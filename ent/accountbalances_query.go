// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountbalances"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accounts"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// AccountBalancesQuery is the builder for querying AccountBalances entities.
type AccountBalancesQuery struct {
	config
	ctx          *QueryContext
	order        []accountbalances.OrderOption
	inters       []Interceptor
	predicates   []predicate.AccountBalances
	withUsers    *UsersQuery
	withAccounts *AccountsQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AccountBalancesQuery builder.
func (abq *AccountBalancesQuery) Where(ps ...predicate.AccountBalances) *AccountBalancesQuery {
	abq.predicates = append(abq.predicates, ps...)
	return abq
}

// Limit the number of records to be returned by this query.
func (abq *AccountBalancesQuery) Limit(limit int) *AccountBalancesQuery {
	abq.ctx.Limit = &limit
	return abq
}

// Offset to start from.
func (abq *AccountBalancesQuery) Offset(offset int) *AccountBalancesQuery {
	abq.ctx.Offset = &offset
	return abq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (abq *AccountBalancesQuery) Unique(unique bool) *AccountBalancesQuery {
	abq.ctx.Unique = &unique
	return abq
}

// Order specifies how the records should be ordered.
func (abq *AccountBalancesQuery) Order(o ...accountbalances.OrderOption) *AccountBalancesQuery {
	abq.order = append(abq.order, o...)
	return abq
}

// QueryUsers chains the current query on the "users" edge.
func (abq *AccountBalancesQuery) QueryUsers() *UsersQuery {
	query := (&UsersClient{config: abq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := abq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := abq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(accountbalances.Table, accountbalances.FieldID, selector),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, accountbalances.UsersTable, accountbalances.UsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(abq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAccounts chains the current query on the "accounts" edge.
func (abq *AccountBalancesQuery) QueryAccounts() *AccountsQuery {
	query := (&AccountsClient{config: abq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := abq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := abq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(accountbalances.Table, accountbalances.FieldID, selector),
			sqlgraph.To(accounts.Table, accounts.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, accountbalances.AccountsTable, accountbalances.AccountsColumn),
		)
		fromU = sqlgraph.SetNeighbors(abq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AccountBalances entity from the query.
// Returns a *NotFoundError when no AccountBalances was found.
func (abq *AccountBalancesQuery) First(ctx context.Context) (*AccountBalances, error) {
	nodes, err := abq.Limit(1).All(setContextOp(ctx, abq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{accountbalances.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (abq *AccountBalancesQuery) FirstX(ctx context.Context) *AccountBalances {
	node, err := abq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AccountBalances ID from the query.
// Returns a *NotFoundError when no AccountBalances ID was found.
func (abq *AccountBalancesQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = abq.Limit(1).IDs(setContextOp(ctx, abq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{accountbalances.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (abq *AccountBalancesQuery) FirstIDX(ctx context.Context) int {
	id, err := abq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AccountBalances entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AccountBalances entity is found.
// Returns a *NotFoundError when no AccountBalances entities are found.
func (abq *AccountBalancesQuery) Only(ctx context.Context) (*AccountBalances, error) {
	nodes, err := abq.Limit(2).All(setContextOp(ctx, abq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{accountbalances.Label}
	default:
		return nil, &NotSingularError{accountbalances.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (abq *AccountBalancesQuery) OnlyX(ctx context.Context) *AccountBalances {
	node, err := abq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AccountBalances ID in the query.
// Returns a *NotSingularError when more than one AccountBalances ID is found.
// Returns a *NotFoundError when no entities are found.
func (abq *AccountBalancesQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = abq.Limit(2).IDs(setContextOp(ctx, abq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{accountbalances.Label}
	default:
		err = &NotSingularError{accountbalances.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (abq *AccountBalancesQuery) OnlyIDX(ctx context.Context) int {
	id, err := abq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AccountBalancesSlice.
func (abq *AccountBalancesQuery) All(ctx context.Context) ([]*AccountBalances, error) {
	ctx = setContextOp(ctx, abq.ctx, ent.OpQueryAll)
	if err := abq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AccountBalances, *AccountBalancesQuery]()
	return withInterceptors[[]*AccountBalances](ctx, abq, qr, abq.inters)
}

// AllX is like All, but panics if an error occurs.
func (abq *AccountBalancesQuery) AllX(ctx context.Context) []*AccountBalances {
	nodes, err := abq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AccountBalances IDs.
func (abq *AccountBalancesQuery) IDs(ctx context.Context) (ids []int, err error) {
	if abq.ctx.Unique == nil && abq.path != nil {
		abq.Unique(true)
	}
	ctx = setContextOp(ctx, abq.ctx, ent.OpQueryIDs)
	if err = abq.Select(accountbalances.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (abq *AccountBalancesQuery) IDsX(ctx context.Context) []int {
	ids, err := abq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (abq *AccountBalancesQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, abq.ctx, ent.OpQueryCount)
	if err := abq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, abq, querierCount[*AccountBalancesQuery](), abq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (abq *AccountBalancesQuery) CountX(ctx context.Context) int {
	count, err := abq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (abq *AccountBalancesQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, abq.ctx, ent.OpQueryExist)
	switch _, err := abq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (abq *AccountBalancesQuery) ExistX(ctx context.Context) bool {
	exist, err := abq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AccountBalancesQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (abq *AccountBalancesQuery) Clone() *AccountBalancesQuery {
	if abq == nil {
		return nil
	}
	return &AccountBalancesQuery{
		config:       abq.config,
		ctx:          abq.ctx.Clone(),
		order:        append([]accountbalances.OrderOption{}, abq.order...),
		inters:       append([]Interceptor{}, abq.inters...),
		predicates:   append([]predicate.AccountBalances{}, abq.predicates...),
		withUsers:    abq.withUsers.Clone(),
		withAccounts: abq.withAccounts.Clone(),
		// clone intermediate query.
		sql:  abq.sql.Clone(),
		path: abq.path,
	}
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (abq *AccountBalancesQuery) WithUsers(opts ...func(*UsersQuery)) *AccountBalancesQuery {
	query := (&UsersClient{config: abq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	abq.withUsers = query
	return abq
}

// WithAccounts tells the query-builder to eager-load the nodes that are connected to
// the "accounts" edge. The optional arguments are used to configure the query builder of the edge.
func (abq *AccountBalancesQuery) WithAccounts(opts ...func(*AccountsQuery)) *AccountBalancesQuery {
	query := (&AccountsClient{config: abq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	abq.withAccounts = query
	return abq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AccountID int `json:"account_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AccountBalances.Query().
//		GroupBy(accountbalances.FieldAccountID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (abq *AccountBalancesQuery) GroupBy(field string, fields ...string) *AccountBalancesGroupBy {
	abq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AccountBalancesGroupBy{build: abq}
	grbuild.flds = &abq.ctx.Fields
	grbuild.label = accountbalances.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AccountID int `json:"account_id,omitempty"`
//	}
//
//	client.AccountBalances.Query().
//		Select(accountbalances.FieldAccountID).
//		Scan(ctx, &v)
func (abq *AccountBalancesQuery) Select(fields ...string) *AccountBalancesSelect {
	abq.ctx.Fields = append(abq.ctx.Fields, fields...)
	sbuild := &AccountBalancesSelect{AccountBalancesQuery: abq}
	sbuild.label = accountbalances.Label
	sbuild.flds, sbuild.scan = &abq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AccountBalancesSelect configured with the given aggregations.
func (abq *AccountBalancesQuery) Aggregate(fns ...AggregateFunc) *AccountBalancesSelect {
	return abq.Select().Aggregate(fns...)
}

func (abq *AccountBalancesQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range abq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, abq); err != nil {
				return err
			}
		}
	}
	for _, f := range abq.ctx.Fields {
		if !accountbalances.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if abq.path != nil {
		prev, err := abq.path(ctx)
		if err != nil {
			return err
		}
		abq.sql = prev
	}
	return nil
}

func (abq *AccountBalancesQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AccountBalances, error) {
	var (
		nodes       = []*AccountBalances{}
		_spec       = abq.querySpec()
		loadedTypes = [2]bool{
			abq.withUsers != nil,
			abq.withAccounts != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AccountBalances).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AccountBalances{config: abq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, abq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := abq.withUsers; query != nil {
		if err := abq.loadUsers(ctx, query, nodes, nil,
			func(n *AccountBalances, e *Users) { n.Edges.Users = e }); err != nil {
			return nil, err
		}
	}
	if query := abq.withAccounts; query != nil {
		if err := abq.loadAccounts(ctx, query, nodes, nil,
			func(n *AccountBalances, e *Accounts) { n.Edges.Accounts = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (abq *AccountBalancesQuery) loadUsers(ctx context.Context, query *UsersQuery, nodes []*AccountBalances, init func(*AccountBalances), assign func(*AccountBalances, *Users)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*AccountBalances)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(users.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (abq *AccountBalancesQuery) loadAccounts(ctx context.Context, query *AccountsQuery, nodes []*AccountBalances, init func(*AccountBalances), assign func(*AccountBalances, *Accounts)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*AccountBalances)
	for i := range nodes {
		fk := nodes[i].AccountID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(accounts.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "account_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (abq *AccountBalancesQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := abq.querySpec()
	_spec.Node.Columns = abq.ctx.Fields
	if len(abq.ctx.Fields) > 0 {
		_spec.Unique = abq.ctx.Unique != nil && *abq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, abq.driver, _spec)
}

func (abq *AccountBalancesQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(accountbalances.Table, accountbalances.Columns, sqlgraph.NewFieldSpec(accountbalances.FieldID, field.TypeInt))
	_spec.From = abq.sql
	if unique := abq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if abq.path != nil {
		_spec.Unique = true
	}
	if fields := abq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountbalances.FieldID)
		for i := range fields {
			if fields[i] != accountbalances.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if abq.withUsers != nil {
			_spec.Node.AddColumnOnce(accountbalances.FieldUserID)
		}
		if abq.withAccounts != nil {
			_spec.Node.AddColumnOnce(accountbalances.FieldAccountID)
		}
	}
	if ps := abq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := abq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := abq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := abq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (abq *AccountBalancesQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(abq.driver.Dialect())
	t1 := builder.Table(accountbalances.Table)
	columns := abq.ctx.Fields
	if len(columns) == 0 {
		columns = accountbalances.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if abq.sql != nil {
		selector = abq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if abq.ctx.Unique != nil && *abq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range abq.predicates {
		p(selector)
	}
	for _, p := range abq.order {
		p(selector)
	}
	if offset := abq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := abq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AccountBalancesGroupBy is the group-by builder for AccountBalances entities.
type AccountBalancesGroupBy struct {
	selector
	build *AccountBalancesQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (abgb *AccountBalancesGroupBy) Aggregate(fns ...AggregateFunc) *AccountBalancesGroupBy {
	abgb.fns = append(abgb.fns, fns...)
	return abgb
}

// Scan applies the selector query and scans the result into the given value.
func (abgb *AccountBalancesGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, abgb.build.ctx, ent.OpQueryGroupBy)
	if err := abgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AccountBalancesQuery, *AccountBalancesGroupBy](ctx, abgb.build, abgb, abgb.build.inters, v)
}

func (abgb *AccountBalancesGroupBy) sqlScan(ctx context.Context, root *AccountBalancesQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(abgb.fns))
	for _, fn := range abgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*abgb.flds)+len(abgb.fns))
		for _, f := range *abgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*abgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := abgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AccountBalancesSelect is the builder for selecting fields of AccountBalances entities.
type AccountBalancesSelect struct {
	*AccountBalancesQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (abs *AccountBalancesSelect) Aggregate(fns ...AggregateFunc) *AccountBalancesSelect {
	abs.fns = append(abs.fns, fns...)
	return abs
}

// Scan applies the selector query and scans the result into the given value.
func (abs *AccountBalancesSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, abs.ctx, ent.OpQuerySelect)
	if err := abs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AccountBalancesQuery, *AccountBalancesSelect](ctx, abs.AccountBalancesQuery, abs, abs.inters, v)
}

func (abs *AccountBalancesSelect) sqlScan(ctx context.Context, root *AccountBalancesQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(abs.fns))
	for _, fn := range abs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*abs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := abs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
