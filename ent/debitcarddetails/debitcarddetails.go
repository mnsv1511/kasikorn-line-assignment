// Code generated by ent, DO NOT EDIT.

package debitcarddetails

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the debitcarddetails type in the database.
	Label = "debit_card_details"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCardID holds the string denoting the card_id field in the database.
	FieldCardID = "card_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldIssuer holds the string denoting the issuer field in the database.
	FieldIssuer = "issuer"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeDebitCards holds the string denoting the debit_cards edge name in mutations.
	EdgeDebitCards = "debit_cards"
	// Table holds the table name of the debitcarddetails in the database.
	Table = "debit_card_details"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "debit_card_details"
	// UsersInverseTable is the table name for the Users entity.
	// It exists in this package in order to avoid circular dependency with the "users" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "user_id"
	// DebitCardsTable is the table that holds the debit_cards relation/edge.
	DebitCardsTable = "debit_card_details"
	// DebitCardsInverseTable is the table name for the DebitCards entity.
	// It exists in this package in order to avoid circular dependency with the "debitcards" package.
	DebitCardsInverseTable = "debit_cards"
	// DebitCardsColumn is the table column denoting the debit_cards relation/edge.
	DebitCardsColumn = "card_id"
)

// Columns holds all SQL columns for debitcarddetails fields.
var Columns = []string{
	FieldID,
	FieldCardID,
	FieldUserID,
	FieldIssuer,
	FieldNumber,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the DebitCardDetails queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCardID orders the results by the card_id field.
func ByCardID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCardID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByIssuer orders the results by the issuer field.
func ByIssuer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIssuer, opts...).ToFunc()
}

// ByNumber orders the results by the number field.
func ByNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumber, opts...).ToFunc()
}

// ByUsersField orders the results by users field.
func ByUsersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), sql.OrderByField(field, opts...))
	}
}

// ByDebitCardsField orders the results by debit_cards field.
func ByDebitCardsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDebitCardsStep(), sql.OrderByField(field, opts...))
	}
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
	)
}
func newDebitCardsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DebitCardsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DebitCardsTable, DebitCardsColumn),
	)
}
