// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// Users is the model entity for the Users schema.
type Users struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UsersQuery when eager-loading is set.
	Edges        UsersEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UsersEdges holds the relations/edges for other nodes in the graph.
type UsersEdges struct {
	// Accounts holds the value of the accounts edge.
	Accounts []*Accounts `json:"accounts,omitempty"`
	// Banners holds the value of the banners edge.
	Banners []*Banners `json:"banners,omitempty"`
	// DebitCards holds the value of the debit_cards edge.
	DebitCards []*DebitCards `json:"debit_cards,omitempty"`
	// Transactions holds the value of the transactions edge.
	Transactions []*Transactions `json:"transactions,omitempty"`
	// UserGreetings holds the value of the user_greetings edge.
	UserGreetings []*UserGreetings `json:"user_greetings,omitempty"`
	// AccountBalances holds the value of the account_balances edge.
	AccountBalances []*AccountBalances `json:"account_balances,omitempty"`
	// AccountDetails holds the value of the account_details edge.
	AccountDetails []*AccountDetails `json:"account_details,omitempty"`
	// AccountFlags holds the value of the account_flags edge.
	AccountFlags []*AccountFlags `json:"account_flags,omitempty"`
	// DebitCardDesign holds the value of the debit_card_design edge.
	DebitCardDesign []*DebitCardDesign `json:"debit_card_design,omitempty"`
	// DebitCardDetails holds the value of the debit_card_details edge.
	DebitCardDetails []*DebitCardDetails `json:"debit_card_details,omitempty"`
	// DebitCardStatus holds the value of the debit_card_status edge.
	DebitCardStatus []*DebitCardStatus `json:"debit_card_status,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [11]bool
}

// AccountsOrErr returns the Accounts value or an error if the edge
// was not loaded in eager-loading.
func (e UsersEdges) AccountsOrErr() ([]*Accounts, error) {
	if e.loadedTypes[0] {
		return e.Accounts, nil
	}
	return nil, &NotLoadedError{edge: "accounts"}
}

// BannersOrErr returns the Banners value or an error if the edge
// was not loaded in eager-loading.
func (e UsersEdges) BannersOrErr() ([]*Banners, error) {
	if e.loadedTypes[1] {
		return e.Banners, nil
	}
	return nil, &NotLoadedError{edge: "banners"}
}

// DebitCardsOrErr returns the DebitCards value or an error if the edge
// was not loaded in eager-loading.
func (e UsersEdges) DebitCardsOrErr() ([]*DebitCards, error) {
	if e.loadedTypes[2] {
		return e.DebitCards, nil
	}
	return nil, &NotLoadedError{edge: "debit_cards"}
}

// TransactionsOrErr returns the Transactions value or an error if the edge
// was not loaded in eager-loading.
func (e UsersEdges) TransactionsOrErr() ([]*Transactions, error) {
	if e.loadedTypes[3] {
		return e.Transactions, nil
	}
	return nil, &NotLoadedError{edge: "transactions"}
}

// UserGreetingsOrErr returns the UserGreetings value or an error if the edge
// was not loaded in eager-loading.
func (e UsersEdges) UserGreetingsOrErr() ([]*UserGreetings, error) {
	if e.loadedTypes[4] {
		return e.UserGreetings, nil
	}
	return nil, &NotLoadedError{edge: "user_greetings"}
}

// AccountBalancesOrErr returns the AccountBalances value or an error if the edge
// was not loaded in eager-loading.
func (e UsersEdges) AccountBalancesOrErr() ([]*AccountBalances, error) {
	if e.loadedTypes[5] {
		return e.AccountBalances, nil
	}
	return nil, &NotLoadedError{edge: "account_balances"}
}

// AccountDetailsOrErr returns the AccountDetails value or an error if the edge
// was not loaded in eager-loading.
func (e UsersEdges) AccountDetailsOrErr() ([]*AccountDetails, error) {
	if e.loadedTypes[6] {
		return e.AccountDetails, nil
	}
	return nil, &NotLoadedError{edge: "account_details"}
}

// AccountFlagsOrErr returns the AccountFlags value or an error if the edge
// was not loaded in eager-loading.
func (e UsersEdges) AccountFlagsOrErr() ([]*AccountFlags, error) {
	if e.loadedTypes[7] {
		return e.AccountFlags, nil
	}
	return nil, &NotLoadedError{edge: "account_flags"}
}

// DebitCardDesignOrErr returns the DebitCardDesign value or an error if the edge
// was not loaded in eager-loading.
func (e UsersEdges) DebitCardDesignOrErr() ([]*DebitCardDesign, error) {
	if e.loadedTypes[8] {
		return e.DebitCardDesign, nil
	}
	return nil, &NotLoadedError{edge: "debit_card_design"}
}

// DebitCardDetailsOrErr returns the DebitCardDetails value or an error if the edge
// was not loaded in eager-loading.
func (e UsersEdges) DebitCardDetailsOrErr() ([]*DebitCardDetails, error) {
	if e.loadedTypes[9] {
		return e.DebitCardDetails, nil
	}
	return nil, &NotLoadedError{edge: "debit_card_details"}
}

// DebitCardStatusOrErr returns the DebitCardStatus value or an error if the edge
// was not loaded in eager-loading.
func (e UsersEdges) DebitCardStatusOrErr() ([]*DebitCardStatus, error) {
	if e.loadedTypes[10] {
		return e.DebitCardStatus, nil
	}
	return nil, &NotLoadedError{edge: "debit_card_status"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Users) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case users.FieldID:
			values[i] = new(sql.NullInt64)
		case users.FieldName, users.FieldImageURL:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Users fields.
func (u *Users) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case users.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case users.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case users.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				u.ImageURL = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Users.
// This includes values selected through modifiers, order, etc.
func (u *Users) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryAccounts queries the "accounts" edge of the Users entity.
func (u *Users) QueryAccounts() *AccountsQuery {
	return NewUsersClient(u.config).QueryAccounts(u)
}

// QueryBanners queries the "banners" edge of the Users entity.
func (u *Users) QueryBanners() *BannersQuery {
	return NewUsersClient(u.config).QueryBanners(u)
}

// QueryDebitCards queries the "debit_cards" edge of the Users entity.
func (u *Users) QueryDebitCards() *DebitCardsQuery {
	return NewUsersClient(u.config).QueryDebitCards(u)
}

// QueryTransactions queries the "transactions" edge of the Users entity.
func (u *Users) QueryTransactions() *TransactionsQuery {
	return NewUsersClient(u.config).QueryTransactions(u)
}

// QueryUserGreetings queries the "user_greetings" edge of the Users entity.
func (u *Users) QueryUserGreetings() *UserGreetingsQuery {
	return NewUsersClient(u.config).QueryUserGreetings(u)
}

// QueryAccountBalances queries the "account_balances" edge of the Users entity.
func (u *Users) QueryAccountBalances() *AccountBalancesQuery {
	return NewUsersClient(u.config).QueryAccountBalances(u)
}

// QueryAccountDetails queries the "account_details" edge of the Users entity.
func (u *Users) QueryAccountDetails() *AccountDetailsQuery {
	return NewUsersClient(u.config).QueryAccountDetails(u)
}

// QueryAccountFlags queries the "account_flags" edge of the Users entity.
func (u *Users) QueryAccountFlags() *AccountFlagsQuery {
	return NewUsersClient(u.config).QueryAccountFlags(u)
}

// QueryDebitCardDesign queries the "debit_card_design" edge of the Users entity.
func (u *Users) QueryDebitCardDesign() *DebitCardDesignQuery {
	return NewUsersClient(u.config).QueryDebitCardDesign(u)
}

// QueryDebitCardDetails queries the "debit_card_details" edge of the Users entity.
func (u *Users) QueryDebitCardDetails() *DebitCardDetailsQuery {
	return NewUsersClient(u.config).QueryDebitCardDetails(u)
}

// QueryDebitCardStatus queries the "debit_card_status" edge of the Users entity.
func (u *Users) QueryDebitCardStatus() *DebitCardStatusQuery {
	return NewUsersClient(u.config).QueryDebitCardStatus(u)
}

// Update returns a builder for updating this Users.
// Note that you need to call Users.Unwrap() before calling this method if this Users
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *Users) Update() *UsersUpdateOne {
	return NewUsersClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the Users entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *Users) Unwrap() *Users {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: Users is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *Users) String() string {
	var builder strings.Builder
	builder.WriteString("Users(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(u.ImageURL)
	builder.WriteByte(')')
	return builder.String()
}

// UsersSlice is a parsable slice of Users.
type UsersSlice []*Users
