// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountbalances"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountdetails"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountflags"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accounts"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/banners"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcarddesign"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcarddetails"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcards"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcardstatus"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/transactions"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/usergreetings"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// UsersUpdate is the builder for updating Users entities.
type UsersUpdate struct {
	config
	hooks    []Hook
	mutation *UsersMutation
}

// Where appends a list predicates to the UsersUpdate builder.
func (uu *UsersUpdate) Where(ps ...predicate.Users) *UsersUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetName sets the "name" field.
func (uu *UsersUpdate) SetName(s string) *UsersUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UsersUpdate) SetNillableName(s *string) *UsersUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetImageURL sets the "image_url" field.
func (uu *UsersUpdate) SetImageURL(s string) *UsersUpdate {
	uu.mutation.SetImageURL(s)
	return uu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (uu *UsersUpdate) SetNillableImageURL(s *string) *UsersUpdate {
	if s != nil {
		uu.SetImageURL(*s)
	}
	return uu
}

// AddAccountIDs adds the "accounts" edge to the Accounts entity by IDs.
func (uu *UsersUpdate) AddAccountIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddAccountIDs(ids...)
	return uu
}

// AddAccounts adds the "accounts" edges to the Accounts entity.
func (uu *UsersUpdate) AddAccounts(a ...*Accounts) *UsersUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAccountIDs(ids...)
}

// AddBannerIDs adds the "banners" edge to the Banners entity by IDs.
func (uu *UsersUpdate) AddBannerIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddBannerIDs(ids...)
	return uu
}

// AddBanners adds the "banners" edges to the Banners entity.
func (uu *UsersUpdate) AddBanners(b ...*Banners) *UsersUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.AddBannerIDs(ids...)
}

// AddDebitCardIDs adds the "debit_cards" edge to the DebitCards entity by IDs.
func (uu *UsersUpdate) AddDebitCardIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddDebitCardIDs(ids...)
	return uu
}

// AddDebitCards adds the "debit_cards" edges to the DebitCards entity.
func (uu *UsersUpdate) AddDebitCards(d ...*DebitCards) *UsersUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.AddDebitCardIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the Transactions entity by IDs.
func (uu *UsersUpdate) AddTransactionIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddTransactionIDs(ids...)
	return uu
}

// AddTransactions adds the "transactions" edges to the Transactions entity.
func (uu *UsersUpdate) AddTransactions(t ...*Transactions) *UsersUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddTransactionIDs(ids...)
}

// AddUserGreetingIDs adds the "user_greetings" edge to the UserGreetings entity by IDs.
func (uu *UsersUpdate) AddUserGreetingIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddUserGreetingIDs(ids...)
	return uu
}

// AddUserGreetings adds the "user_greetings" edges to the UserGreetings entity.
func (uu *UsersUpdate) AddUserGreetings(u ...*UserGreetings) *UsersUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserGreetingIDs(ids...)
}

// AddAccountBalanceIDs adds the "account_balances" edge to the AccountBalances entity by IDs.
func (uu *UsersUpdate) AddAccountBalanceIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddAccountBalanceIDs(ids...)
	return uu
}

// AddAccountBalances adds the "account_balances" edges to the AccountBalances entity.
func (uu *UsersUpdate) AddAccountBalances(a ...*AccountBalances) *UsersUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAccountBalanceIDs(ids...)
}

// AddAccountDetailIDs adds the "account_details" edge to the AccountDetails entity by IDs.
func (uu *UsersUpdate) AddAccountDetailIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddAccountDetailIDs(ids...)
	return uu
}

// AddAccountDetails adds the "account_details" edges to the AccountDetails entity.
func (uu *UsersUpdate) AddAccountDetails(a ...*AccountDetails) *UsersUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAccountDetailIDs(ids...)
}

// AddAccountFlagIDs adds the "account_flags" edge to the AccountFlags entity by IDs.
func (uu *UsersUpdate) AddAccountFlagIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddAccountFlagIDs(ids...)
	return uu
}

// AddAccountFlags adds the "account_flags" edges to the AccountFlags entity.
func (uu *UsersUpdate) AddAccountFlags(a ...*AccountFlags) *UsersUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAccountFlagIDs(ids...)
}

// AddDebitCardDesignIDs adds the "debit_card_design" edge to the DebitCardDesign entity by IDs.
func (uu *UsersUpdate) AddDebitCardDesignIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddDebitCardDesignIDs(ids...)
	return uu
}

// AddDebitCardDesign adds the "debit_card_design" edges to the DebitCardDesign entity.
func (uu *UsersUpdate) AddDebitCardDesign(d ...*DebitCardDesign) *UsersUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.AddDebitCardDesignIDs(ids...)
}

// AddDebitCardDetailIDs adds the "debit_card_details" edge to the DebitCardDetails entity by IDs.
func (uu *UsersUpdate) AddDebitCardDetailIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddDebitCardDetailIDs(ids...)
	return uu
}

// AddDebitCardDetails adds the "debit_card_details" edges to the DebitCardDetails entity.
func (uu *UsersUpdate) AddDebitCardDetails(d ...*DebitCardDetails) *UsersUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.AddDebitCardDetailIDs(ids...)
}

// AddDebitCardStatuIDs adds the "debit_card_status" edge to the DebitCardStatus entity by IDs.
func (uu *UsersUpdate) AddDebitCardStatuIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddDebitCardStatuIDs(ids...)
	return uu
}

// AddDebitCardStatus adds the "debit_card_status" edges to the DebitCardStatus entity.
func (uu *UsersUpdate) AddDebitCardStatus(d ...*DebitCardStatus) *UsersUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.AddDebitCardStatuIDs(ids...)
}

// Mutation returns the UsersMutation object of the builder.
func (uu *UsersUpdate) Mutation() *UsersMutation {
	return uu.mutation
}

// ClearAccounts clears all "accounts" edges to the Accounts entity.
func (uu *UsersUpdate) ClearAccounts() *UsersUpdate {
	uu.mutation.ClearAccounts()
	return uu
}

// RemoveAccountIDs removes the "accounts" edge to Accounts entities by IDs.
func (uu *UsersUpdate) RemoveAccountIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveAccountIDs(ids...)
	return uu
}

// RemoveAccounts removes "accounts" edges to Accounts entities.
func (uu *UsersUpdate) RemoveAccounts(a ...*Accounts) *UsersUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAccountIDs(ids...)
}

// ClearBanners clears all "banners" edges to the Banners entity.
func (uu *UsersUpdate) ClearBanners() *UsersUpdate {
	uu.mutation.ClearBanners()
	return uu
}

// RemoveBannerIDs removes the "banners" edge to Banners entities by IDs.
func (uu *UsersUpdate) RemoveBannerIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveBannerIDs(ids...)
	return uu
}

// RemoveBanners removes "banners" edges to Banners entities.
func (uu *UsersUpdate) RemoveBanners(b ...*Banners) *UsersUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.RemoveBannerIDs(ids...)
}

// ClearDebitCards clears all "debit_cards" edges to the DebitCards entity.
func (uu *UsersUpdate) ClearDebitCards() *UsersUpdate {
	uu.mutation.ClearDebitCards()
	return uu
}

// RemoveDebitCardIDs removes the "debit_cards" edge to DebitCards entities by IDs.
func (uu *UsersUpdate) RemoveDebitCardIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveDebitCardIDs(ids...)
	return uu
}

// RemoveDebitCards removes "debit_cards" edges to DebitCards entities.
func (uu *UsersUpdate) RemoveDebitCards(d ...*DebitCards) *UsersUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.RemoveDebitCardIDs(ids...)
}

// ClearTransactions clears all "transactions" edges to the Transactions entity.
func (uu *UsersUpdate) ClearTransactions() *UsersUpdate {
	uu.mutation.ClearTransactions()
	return uu
}

// RemoveTransactionIDs removes the "transactions" edge to Transactions entities by IDs.
func (uu *UsersUpdate) RemoveTransactionIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveTransactionIDs(ids...)
	return uu
}

// RemoveTransactions removes "transactions" edges to Transactions entities.
func (uu *UsersUpdate) RemoveTransactions(t ...*Transactions) *UsersUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveTransactionIDs(ids...)
}

// ClearUserGreetings clears all "user_greetings" edges to the UserGreetings entity.
func (uu *UsersUpdate) ClearUserGreetings() *UsersUpdate {
	uu.mutation.ClearUserGreetings()
	return uu
}

// RemoveUserGreetingIDs removes the "user_greetings" edge to UserGreetings entities by IDs.
func (uu *UsersUpdate) RemoveUserGreetingIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveUserGreetingIDs(ids...)
	return uu
}

// RemoveUserGreetings removes "user_greetings" edges to UserGreetings entities.
func (uu *UsersUpdate) RemoveUserGreetings(u ...*UserGreetings) *UsersUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserGreetingIDs(ids...)
}

// ClearAccountBalances clears all "account_balances" edges to the AccountBalances entity.
func (uu *UsersUpdate) ClearAccountBalances() *UsersUpdate {
	uu.mutation.ClearAccountBalances()
	return uu
}

// RemoveAccountBalanceIDs removes the "account_balances" edge to AccountBalances entities by IDs.
func (uu *UsersUpdate) RemoveAccountBalanceIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveAccountBalanceIDs(ids...)
	return uu
}

// RemoveAccountBalances removes "account_balances" edges to AccountBalances entities.
func (uu *UsersUpdate) RemoveAccountBalances(a ...*AccountBalances) *UsersUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAccountBalanceIDs(ids...)
}

// ClearAccountDetails clears all "account_details" edges to the AccountDetails entity.
func (uu *UsersUpdate) ClearAccountDetails() *UsersUpdate {
	uu.mutation.ClearAccountDetails()
	return uu
}

// RemoveAccountDetailIDs removes the "account_details" edge to AccountDetails entities by IDs.
func (uu *UsersUpdate) RemoveAccountDetailIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveAccountDetailIDs(ids...)
	return uu
}

// RemoveAccountDetails removes "account_details" edges to AccountDetails entities.
func (uu *UsersUpdate) RemoveAccountDetails(a ...*AccountDetails) *UsersUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAccountDetailIDs(ids...)
}

// ClearAccountFlags clears all "account_flags" edges to the AccountFlags entity.
func (uu *UsersUpdate) ClearAccountFlags() *UsersUpdate {
	uu.mutation.ClearAccountFlags()
	return uu
}

// RemoveAccountFlagIDs removes the "account_flags" edge to AccountFlags entities by IDs.
func (uu *UsersUpdate) RemoveAccountFlagIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveAccountFlagIDs(ids...)
	return uu
}

// RemoveAccountFlags removes "account_flags" edges to AccountFlags entities.
func (uu *UsersUpdate) RemoveAccountFlags(a ...*AccountFlags) *UsersUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAccountFlagIDs(ids...)
}

// ClearDebitCardDesign clears all "debit_card_design" edges to the DebitCardDesign entity.
func (uu *UsersUpdate) ClearDebitCardDesign() *UsersUpdate {
	uu.mutation.ClearDebitCardDesign()
	return uu
}

// RemoveDebitCardDesignIDs removes the "debit_card_design" edge to DebitCardDesign entities by IDs.
func (uu *UsersUpdate) RemoveDebitCardDesignIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveDebitCardDesignIDs(ids...)
	return uu
}

// RemoveDebitCardDesign removes "debit_card_design" edges to DebitCardDesign entities.
func (uu *UsersUpdate) RemoveDebitCardDesign(d ...*DebitCardDesign) *UsersUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.RemoveDebitCardDesignIDs(ids...)
}

// ClearDebitCardDetails clears all "debit_card_details" edges to the DebitCardDetails entity.
func (uu *UsersUpdate) ClearDebitCardDetails() *UsersUpdate {
	uu.mutation.ClearDebitCardDetails()
	return uu
}

// RemoveDebitCardDetailIDs removes the "debit_card_details" edge to DebitCardDetails entities by IDs.
func (uu *UsersUpdate) RemoveDebitCardDetailIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveDebitCardDetailIDs(ids...)
	return uu
}

// RemoveDebitCardDetails removes "debit_card_details" edges to DebitCardDetails entities.
func (uu *UsersUpdate) RemoveDebitCardDetails(d ...*DebitCardDetails) *UsersUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.RemoveDebitCardDetailIDs(ids...)
}

// ClearDebitCardStatus clears all "debit_card_status" edges to the DebitCardStatus entity.
func (uu *UsersUpdate) ClearDebitCardStatus() *UsersUpdate {
	uu.mutation.ClearDebitCardStatus()
	return uu
}

// RemoveDebitCardStatuIDs removes the "debit_card_status" edge to DebitCardStatus entities by IDs.
func (uu *UsersUpdate) RemoveDebitCardStatuIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveDebitCardStatuIDs(ids...)
	return uu
}

// RemoveDebitCardStatus removes "debit_card_status" edges to DebitCardStatus entities.
func (uu *UsersUpdate) RemoveDebitCardStatus(d ...*DebitCardStatus) *UsersUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.RemoveDebitCardStatuIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UsersUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UsersUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UsersUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UsersUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UsersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(users.Table, users.Columns, sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(users.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.ImageURL(); ok {
		_spec.SetField(users.FieldImageURL, field.TypeString, value)
	}
	if uu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountsTable,
			Columns: []string{users.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !uu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountsTable,
			Columns: []string{users.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountsTable,
			Columns: []string{users.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.BannersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.BannersTable,
			Columns: []string{users.BannersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(banners.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedBannersIDs(); len(nodes) > 0 && !uu.mutation.BannersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.BannersTable,
			Columns: []string{users.BannersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(banners.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BannersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.BannersTable,
			Columns: []string{users.BannersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(banners.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.DebitCardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardsTable,
			Columns: []string{users.DebitCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcards.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedDebitCardsIDs(); len(nodes) > 0 && !uu.mutation.DebitCardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardsTable,
			Columns: []string{users.DebitCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcards.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.DebitCardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardsTable,
			Columns: []string{users.DebitCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcards.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.TransactionsTable,
			Columns: []string{users.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !uu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.TransactionsTable,
			Columns: []string{users.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.TransactionsTable,
			Columns: []string{users.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserGreetingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.UserGreetingsTable,
			Columns: []string{users.UserGreetingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usergreetings.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserGreetingsIDs(); len(nodes) > 0 && !uu.mutation.UserGreetingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.UserGreetingsTable,
			Columns: []string{users.UserGreetingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usergreetings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserGreetingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.UserGreetingsTable,
			Columns: []string{users.UserGreetingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usergreetings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AccountBalancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountBalancesTable,
			Columns: []string{users.AccountBalancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountbalances.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAccountBalancesIDs(); len(nodes) > 0 && !uu.mutation.AccountBalancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountBalancesTable,
			Columns: []string{users.AccountBalancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountbalances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AccountBalancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountBalancesTable,
			Columns: []string{users.AccountBalancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountbalances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AccountDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountDetailsTable,
			Columns: []string{users.AccountDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountdetails.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAccountDetailsIDs(); len(nodes) > 0 && !uu.mutation.AccountDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountDetailsTable,
			Columns: []string{users.AccountDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AccountDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountDetailsTable,
			Columns: []string{users.AccountDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AccountFlagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountFlagsTable,
			Columns: []string{users.AccountFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountflags.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAccountFlagsIDs(); len(nodes) > 0 && !uu.mutation.AccountFlagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountFlagsTable,
			Columns: []string{users.AccountFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountflags.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AccountFlagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountFlagsTable,
			Columns: []string{users.AccountFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountflags.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.DebitCardDesignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardDesignTable,
			Columns: []string{users.DebitCardDesignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddesign.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedDebitCardDesignIDs(); len(nodes) > 0 && !uu.mutation.DebitCardDesignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardDesignTable,
			Columns: []string{users.DebitCardDesignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddesign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.DebitCardDesignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardDesignTable,
			Columns: []string{users.DebitCardDesignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddesign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.DebitCardDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardDetailsTable,
			Columns: []string{users.DebitCardDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddetails.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedDebitCardDetailsIDs(); len(nodes) > 0 && !uu.mutation.DebitCardDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardDetailsTable,
			Columns: []string{users.DebitCardDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.DebitCardDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardDetailsTable,
			Columns: []string{users.DebitCardDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.DebitCardStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardStatusTable,
			Columns: []string{users.DebitCardStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcardstatus.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedDebitCardStatusIDs(); len(nodes) > 0 && !uu.mutation.DebitCardStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardStatusTable,
			Columns: []string{users.DebitCardStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcardstatus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.DebitCardStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardStatusTable,
			Columns: []string{users.DebitCardStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcardstatus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{users.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UsersUpdateOne is the builder for updating a single Users entity.
type UsersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UsersMutation
}

// SetName sets the "name" field.
func (uuo *UsersUpdateOne) SetName(s string) *UsersUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableName(s *string) *UsersUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetImageURL sets the "image_url" field.
func (uuo *UsersUpdateOne) SetImageURL(s string) *UsersUpdateOne {
	uuo.mutation.SetImageURL(s)
	return uuo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableImageURL(s *string) *UsersUpdateOne {
	if s != nil {
		uuo.SetImageURL(*s)
	}
	return uuo
}

// AddAccountIDs adds the "accounts" edge to the Accounts entity by IDs.
func (uuo *UsersUpdateOne) AddAccountIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddAccountIDs(ids...)
	return uuo
}

// AddAccounts adds the "accounts" edges to the Accounts entity.
func (uuo *UsersUpdateOne) AddAccounts(a ...*Accounts) *UsersUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAccountIDs(ids...)
}

// AddBannerIDs adds the "banners" edge to the Banners entity by IDs.
func (uuo *UsersUpdateOne) AddBannerIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddBannerIDs(ids...)
	return uuo
}

// AddBanners adds the "banners" edges to the Banners entity.
func (uuo *UsersUpdateOne) AddBanners(b ...*Banners) *UsersUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.AddBannerIDs(ids...)
}

// AddDebitCardIDs adds the "debit_cards" edge to the DebitCards entity by IDs.
func (uuo *UsersUpdateOne) AddDebitCardIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddDebitCardIDs(ids...)
	return uuo
}

// AddDebitCards adds the "debit_cards" edges to the DebitCards entity.
func (uuo *UsersUpdateOne) AddDebitCards(d ...*DebitCards) *UsersUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.AddDebitCardIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the Transactions entity by IDs.
func (uuo *UsersUpdateOne) AddTransactionIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddTransactionIDs(ids...)
	return uuo
}

// AddTransactions adds the "transactions" edges to the Transactions entity.
func (uuo *UsersUpdateOne) AddTransactions(t ...*Transactions) *UsersUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddTransactionIDs(ids...)
}

// AddUserGreetingIDs adds the "user_greetings" edge to the UserGreetings entity by IDs.
func (uuo *UsersUpdateOne) AddUserGreetingIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddUserGreetingIDs(ids...)
	return uuo
}

// AddUserGreetings adds the "user_greetings" edges to the UserGreetings entity.
func (uuo *UsersUpdateOne) AddUserGreetings(u ...*UserGreetings) *UsersUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserGreetingIDs(ids...)
}

// AddAccountBalanceIDs adds the "account_balances" edge to the AccountBalances entity by IDs.
func (uuo *UsersUpdateOne) AddAccountBalanceIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddAccountBalanceIDs(ids...)
	return uuo
}

// AddAccountBalances adds the "account_balances" edges to the AccountBalances entity.
func (uuo *UsersUpdateOne) AddAccountBalances(a ...*AccountBalances) *UsersUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAccountBalanceIDs(ids...)
}

// AddAccountDetailIDs adds the "account_details" edge to the AccountDetails entity by IDs.
func (uuo *UsersUpdateOne) AddAccountDetailIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddAccountDetailIDs(ids...)
	return uuo
}

// AddAccountDetails adds the "account_details" edges to the AccountDetails entity.
func (uuo *UsersUpdateOne) AddAccountDetails(a ...*AccountDetails) *UsersUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAccountDetailIDs(ids...)
}

// AddAccountFlagIDs adds the "account_flags" edge to the AccountFlags entity by IDs.
func (uuo *UsersUpdateOne) AddAccountFlagIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddAccountFlagIDs(ids...)
	return uuo
}

// AddAccountFlags adds the "account_flags" edges to the AccountFlags entity.
func (uuo *UsersUpdateOne) AddAccountFlags(a ...*AccountFlags) *UsersUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAccountFlagIDs(ids...)
}

// AddDebitCardDesignIDs adds the "debit_card_design" edge to the DebitCardDesign entity by IDs.
func (uuo *UsersUpdateOne) AddDebitCardDesignIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddDebitCardDesignIDs(ids...)
	return uuo
}

// AddDebitCardDesign adds the "debit_card_design" edges to the DebitCardDesign entity.
func (uuo *UsersUpdateOne) AddDebitCardDesign(d ...*DebitCardDesign) *UsersUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.AddDebitCardDesignIDs(ids...)
}

// AddDebitCardDetailIDs adds the "debit_card_details" edge to the DebitCardDetails entity by IDs.
func (uuo *UsersUpdateOne) AddDebitCardDetailIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddDebitCardDetailIDs(ids...)
	return uuo
}

// AddDebitCardDetails adds the "debit_card_details" edges to the DebitCardDetails entity.
func (uuo *UsersUpdateOne) AddDebitCardDetails(d ...*DebitCardDetails) *UsersUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.AddDebitCardDetailIDs(ids...)
}

// AddDebitCardStatuIDs adds the "debit_card_status" edge to the DebitCardStatus entity by IDs.
func (uuo *UsersUpdateOne) AddDebitCardStatuIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddDebitCardStatuIDs(ids...)
	return uuo
}

// AddDebitCardStatus adds the "debit_card_status" edges to the DebitCardStatus entity.
func (uuo *UsersUpdateOne) AddDebitCardStatus(d ...*DebitCardStatus) *UsersUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.AddDebitCardStatuIDs(ids...)
}

// Mutation returns the UsersMutation object of the builder.
func (uuo *UsersUpdateOne) Mutation() *UsersMutation {
	return uuo.mutation
}

// ClearAccounts clears all "accounts" edges to the Accounts entity.
func (uuo *UsersUpdateOne) ClearAccounts() *UsersUpdateOne {
	uuo.mutation.ClearAccounts()
	return uuo
}

// RemoveAccountIDs removes the "accounts" edge to Accounts entities by IDs.
func (uuo *UsersUpdateOne) RemoveAccountIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveAccountIDs(ids...)
	return uuo
}

// RemoveAccounts removes "accounts" edges to Accounts entities.
func (uuo *UsersUpdateOne) RemoveAccounts(a ...*Accounts) *UsersUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAccountIDs(ids...)
}

// ClearBanners clears all "banners" edges to the Banners entity.
func (uuo *UsersUpdateOne) ClearBanners() *UsersUpdateOne {
	uuo.mutation.ClearBanners()
	return uuo
}

// RemoveBannerIDs removes the "banners" edge to Banners entities by IDs.
func (uuo *UsersUpdateOne) RemoveBannerIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveBannerIDs(ids...)
	return uuo
}

// RemoveBanners removes "banners" edges to Banners entities.
func (uuo *UsersUpdateOne) RemoveBanners(b ...*Banners) *UsersUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.RemoveBannerIDs(ids...)
}

// ClearDebitCards clears all "debit_cards" edges to the DebitCards entity.
func (uuo *UsersUpdateOne) ClearDebitCards() *UsersUpdateOne {
	uuo.mutation.ClearDebitCards()
	return uuo
}

// RemoveDebitCardIDs removes the "debit_cards" edge to DebitCards entities by IDs.
func (uuo *UsersUpdateOne) RemoveDebitCardIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveDebitCardIDs(ids...)
	return uuo
}

// RemoveDebitCards removes "debit_cards" edges to DebitCards entities.
func (uuo *UsersUpdateOne) RemoveDebitCards(d ...*DebitCards) *UsersUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.RemoveDebitCardIDs(ids...)
}

// ClearTransactions clears all "transactions" edges to the Transactions entity.
func (uuo *UsersUpdateOne) ClearTransactions() *UsersUpdateOne {
	uuo.mutation.ClearTransactions()
	return uuo
}

// RemoveTransactionIDs removes the "transactions" edge to Transactions entities by IDs.
func (uuo *UsersUpdateOne) RemoveTransactionIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveTransactionIDs(ids...)
	return uuo
}

// RemoveTransactions removes "transactions" edges to Transactions entities.
func (uuo *UsersUpdateOne) RemoveTransactions(t ...*Transactions) *UsersUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveTransactionIDs(ids...)
}

// ClearUserGreetings clears all "user_greetings" edges to the UserGreetings entity.
func (uuo *UsersUpdateOne) ClearUserGreetings() *UsersUpdateOne {
	uuo.mutation.ClearUserGreetings()
	return uuo
}

// RemoveUserGreetingIDs removes the "user_greetings" edge to UserGreetings entities by IDs.
func (uuo *UsersUpdateOne) RemoveUserGreetingIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveUserGreetingIDs(ids...)
	return uuo
}

// RemoveUserGreetings removes "user_greetings" edges to UserGreetings entities.
func (uuo *UsersUpdateOne) RemoveUserGreetings(u ...*UserGreetings) *UsersUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserGreetingIDs(ids...)
}

// ClearAccountBalances clears all "account_balances" edges to the AccountBalances entity.
func (uuo *UsersUpdateOne) ClearAccountBalances() *UsersUpdateOne {
	uuo.mutation.ClearAccountBalances()
	return uuo
}

// RemoveAccountBalanceIDs removes the "account_balances" edge to AccountBalances entities by IDs.
func (uuo *UsersUpdateOne) RemoveAccountBalanceIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveAccountBalanceIDs(ids...)
	return uuo
}

// RemoveAccountBalances removes "account_balances" edges to AccountBalances entities.
func (uuo *UsersUpdateOne) RemoveAccountBalances(a ...*AccountBalances) *UsersUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAccountBalanceIDs(ids...)
}

// ClearAccountDetails clears all "account_details" edges to the AccountDetails entity.
func (uuo *UsersUpdateOne) ClearAccountDetails() *UsersUpdateOne {
	uuo.mutation.ClearAccountDetails()
	return uuo
}

// RemoveAccountDetailIDs removes the "account_details" edge to AccountDetails entities by IDs.
func (uuo *UsersUpdateOne) RemoveAccountDetailIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveAccountDetailIDs(ids...)
	return uuo
}

// RemoveAccountDetails removes "account_details" edges to AccountDetails entities.
func (uuo *UsersUpdateOne) RemoveAccountDetails(a ...*AccountDetails) *UsersUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAccountDetailIDs(ids...)
}

// ClearAccountFlags clears all "account_flags" edges to the AccountFlags entity.
func (uuo *UsersUpdateOne) ClearAccountFlags() *UsersUpdateOne {
	uuo.mutation.ClearAccountFlags()
	return uuo
}

// RemoveAccountFlagIDs removes the "account_flags" edge to AccountFlags entities by IDs.
func (uuo *UsersUpdateOne) RemoveAccountFlagIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveAccountFlagIDs(ids...)
	return uuo
}

// RemoveAccountFlags removes "account_flags" edges to AccountFlags entities.
func (uuo *UsersUpdateOne) RemoveAccountFlags(a ...*AccountFlags) *UsersUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAccountFlagIDs(ids...)
}

// ClearDebitCardDesign clears all "debit_card_design" edges to the DebitCardDesign entity.
func (uuo *UsersUpdateOne) ClearDebitCardDesign() *UsersUpdateOne {
	uuo.mutation.ClearDebitCardDesign()
	return uuo
}

// RemoveDebitCardDesignIDs removes the "debit_card_design" edge to DebitCardDesign entities by IDs.
func (uuo *UsersUpdateOne) RemoveDebitCardDesignIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveDebitCardDesignIDs(ids...)
	return uuo
}

// RemoveDebitCardDesign removes "debit_card_design" edges to DebitCardDesign entities.
func (uuo *UsersUpdateOne) RemoveDebitCardDesign(d ...*DebitCardDesign) *UsersUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.RemoveDebitCardDesignIDs(ids...)
}

// ClearDebitCardDetails clears all "debit_card_details" edges to the DebitCardDetails entity.
func (uuo *UsersUpdateOne) ClearDebitCardDetails() *UsersUpdateOne {
	uuo.mutation.ClearDebitCardDetails()
	return uuo
}

// RemoveDebitCardDetailIDs removes the "debit_card_details" edge to DebitCardDetails entities by IDs.
func (uuo *UsersUpdateOne) RemoveDebitCardDetailIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveDebitCardDetailIDs(ids...)
	return uuo
}

// RemoveDebitCardDetails removes "debit_card_details" edges to DebitCardDetails entities.
func (uuo *UsersUpdateOne) RemoveDebitCardDetails(d ...*DebitCardDetails) *UsersUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.RemoveDebitCardDetailIDs(ids...)
}

// ClearDebitCardStatus clears all "debit_card_status" edges to the DebitCardStatus entity.
func (uuo *UsersUpdateOne) ClearDebitCardStatus() *UsersUpdateOne {
	uuo.mutation.ClearDebitCardStatus()
	return uuo
}

// RemoveDebitCardStatuIDs removes the "debit_card_status" edge to DebitCardStatus entities by IDs.
func (uuo *UsersUpdateOne) RemoveDebitCardStatuIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveDebitCardStatuIDs(ids...)
	return uuo
}

// RemoveDebitCardStatus removes "debit_card_status" edges to DebitCardStatus entities.
func (uuo *UsersUpdateOne) RemoveDebitCardStatus(d ...*DebitCardStatus) *UsersUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.RemoveDebitCardStatuIDs(ids...)
}

// Where appends a list predicates to the UsersUpdate builder.
func (uuo *UsersUpdateOne) Where(ps ...predicate.Users) *UsersUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UsersUpdateOne) Select(field string, fields ...string) *UsersUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated Users entity.
func (uuo *UsersUpdateOne) Save(ctx context.Context) (*Users, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UsersUpdateOne) SaveX(ctx context.Context) *Users {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UsersUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UsersUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UsersUpdateOne) sqlSave(ctx context.Context) (_node *Users, err error) {
	_spec := sqlgraph.NewUpdateSpec(users.Table, users.Columns, sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Users.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, users.FieldID)
		for _, f := range fields {
			if !users.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != users.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(users.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.ImageURL(); ok {
		_spec.SetField(users.FieldImageURL, field.TypeString, value)
	}
	if uuo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountsTable,
			Columns: []string{users.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !uuo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountsTable,
			Columns: []string{users.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountsTable,
			Columns: []string{users.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.BannersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.BannersTable,
			Columns: []string{users.BannersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(banners.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedBannersIDs(); len(nodes) > 0 && !uuo.mutation.BannersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.BannersTable,
			Columns: []string{users.BannersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(banners.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BannersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.BannersTable,
			Columns: []string{users.BannersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(banners.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.DebitCardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardsTable,
			Columns: []string{users.DebitCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcards.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedDebitCardsIDs(); len(nodes) > 0 && !uuo.mutation.DebitCardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardsTable,
			Columns: []string{users.DebitCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcards.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.DebitCardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardsTable,
			Columns: []string{users.DebitCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcards.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.TransactionsTable,
			Columns: []string{users.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !uuo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.TransactionsTable,
			Columns: []string{users.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.TransactionsTable,
			Columns: []string{users.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserGreetingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.UserGreetingsTable,
			Columns: []string{users.UserGreetingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usergreetings.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserGreetingsIDs(); len(nodes) > 0 && !uuo.mutation.UserGreetingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.UserGreetingsTable,
			Columns: []string{users.UserGreetingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usergreetings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserGreetingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.UserGreetingsTable,
			Columns: []string{users.UserGreetingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usergreetings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AccountBalancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountBalancesTable,
			Columns: []string{users.AccountBalancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountbalances.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAccountBalancesIDs(); len(nodes) > 0 && !uuo.mutation.AccountBalancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountBalancesTable,
			Columns: []string{users.AccountBalancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountbalances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AccountBalancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountBalancesTable,
			Columns: []string{users.AccountBalancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountbalances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AccountDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountDetailsTable,
			Columns: []string{users.AccountDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountdetails.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAccountDetailsIDs(); len(nodes) > 0 && !uuo.mutation.AccountDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountDetailsTable,
			Columns: []string{users.AccountDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AccountDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountDetailsTable,
			Columns: []string{users.AccountDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AccountFlagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountFlagsTable,
			Columns: []string{users.AccountFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountflags.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAccountFlagsIDs(); len(nodes) > 0 && !uuo.mutation.AccountFlagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountFlagsTable,
			Columns: []string{users.AccountFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountflags.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AccountFlagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.AccountFlagsTable,
			Columns: []string{users.AccountFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountflags.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.DebitCardDesignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardDesignTable,
			Columns: []string{users.DebitCardDesignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddesign.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedDebitCardDesignIDs(); len(nodes) > 0 && !uuo.mutation.DebitCardDesignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardDesignTable,
			Columns: []string{users.DebitCardDesignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddesign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.DebitCardDesignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardDesignTable,
			Columns: []string{users.DebitCardDesignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddesign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.DebitCardDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardDetailsTable,
			Columns: []string{users.DebitCardDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddetails.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedDebitCardDetailsIDs(); len(nodes) > 0 && !uuo.mutation.DebitCardDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardDetailsTable,
			Columns: []string{users.DebitCardDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.DebitCardDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardDetailsTable,
			Columns: []string{users.DebitCardDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.DebitCardStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardStatusTable,
			Columns: []string{users.DebitCardStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcardstatus.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedDebitCardStatusIDs(); len(nodes) > 0 && !uuo.mutation.DebitCardStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardStatusTable,
			Columns: []string{users.DebitCardStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcardstatus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.DebitCardStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.DebitCardStatusTable,
			Columns: []string{users.DebitCardStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcardstatus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Users{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{users.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
