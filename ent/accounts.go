// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accounts"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// Accounts is the model entity for the Accounts schema.
type Accounts struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// AccountNumber holds the value of the "account_number" field.
	AccountNumber string `json:"account_number,omitempty"`
	// Issuer holds the value of the "issuer" field.
	Issuer string `json:"issuer,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccountsQuery when eager-loading is set.
	Edges        AccountsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AccountsEdges holds the relations/edges for other nodes in the graph.
type AccountsEdges struct {
	// AccountBalances holds the value of the account_balances edge.
	AccountBalances []*AccountBalances `json:"account_balances,omitempty"`
	// AccountDetails holds the value of the account_details edge.
	AccountDetails []*AccountDetails `json:"account_details,omitempty"`
	// AccountFlags holds the value of the account_flags edge.
	AccountFlags []*AccountFlags `json:"account_flags,omitempty"`
	// Users holds the value of the users edge.
	Users *Users `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// AccountBalancesOrErr returns the AccountBalances value or an error if the edge
// was not loaded in eager-loading.
func (e AccountsEdges) AccountBalancesOrErr() ([]*AccountBalances, error) {
	if e.loadedTypes[0] {
		return e.AccountBalances, nil
	}
	return nil, &NotLoadedError{edge: "account_balances"}
}

// AccountDetailsOrErr returns the AccountDetails value or an error if the edge
// was not loaded in eager-loading.
func (e AccountsEdges) AccountDetailsOrErr() ([]*AccountDetails, error) {
	if e.loadedTypes[1] {
		return e.AccountDetails, nil
	}
	return nil, &NotLoadedError{edge: "account_details"}
}

// AccountFlagsOrErr returns the AccountFlags value or an error if the edge
// was not loaded in eager-loading.
func (e AccountsEdges) AccountFlagsOrErr() ([]*AccountFlags, error) {
	if e.loadedTypes[2] {
		return e.AccountFlags, nil
	}
	return nil, &NotLoadedError{edge: "account_flags"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccountsEdges) UsersOrErr() (*Users, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: users.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Accounts) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case accounts.FieldID, accounts.FieldUserID:
			values[i] = new(sql.NullInt64)
		case accounts.FieldType, accounts.FieldCurrency, accounts.FieldAccountNumber, accounts.FieldIssuer:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Accounts fields.
func (a *Accounts) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accounts.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case accounts.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				a.UserID = int(value.Int64)
			}
		case accounts.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				a.Type = value.String
			}
		case accounts.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				a.Currency = value.String
			}
		case accounts.FieldAccountNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_number", values[i])
			} else if value.Valid {
				a.AccountNumber = value.String
			}
		case accounts.FieldIssuer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field issuer", values[i])
			} else if value.Valid {
				a.Issuer = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Accounts.
// This includes values selected through modifiers, order, etc.
func (a *Accounts) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryAccountBalances queries the "account_balances" edge of the Accounts entity.
func (a *Accounts) QueryAccountBalances() *AccountBalancesQuery {
	return NewAccountsClient(a.config).QueryAccountBalances(a)
}

// QueryAccountDetails queries the "account_details" edge of the Accounts entity.
func (a *Accounts) QueryAccountDetails() *AccountDetailsQuery {
	return NewAccountsClient(a.config).QueryAccountDetails(a)
}

// QueryAccountFlags queries the "account_flags" edge of the Accounts entity.
func (a *Accounts) QueryAccountFlags() *AccountFlagsQuery {
	return NewAccountsClient(a.config).QueryAccountFlags(a)
}

// QueryUsers queries the "users" edge of the Accounts entity.
func (a *Accounts) QueryUsers() *UsersQuery {
	return NewAccountsClient(a.config).QueryUsers(a)
}

// Update returns a builder for updating this Accounts.
// Note that you need to call Accounts.Unwrap() before calling this method if this Accounts
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Accounts) Update() *AccountsUpdateOne {
	return NewAccountsClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Accounts entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Accounts) Unwrap() *Accounts {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Accounts is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Accounts) String() string {
	var builder strings.Builder
	builder.WriteString("Accounts(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", a.UserID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(a.Type)
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(a.Currency)
	builder.WriteString(", ")
	builder.WriteString("account_number=")
	builder.WriteString(a.AccountNumber)
	builder.WriteString(", ")
	builder.WriteString("issuer=")
	builder.WriteString(a.Issuer)
	builder.WriteByte(')')
	return builder.String()
}

// AccountsSlice is a parsable slice of Accounts.
type AccountsSlice []*Accounts
