// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/transactions"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// Transactions is the model entity for the Transactions schema.
type Transactions struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// IsBank holds the value of the "isBank" field.
	IsBank bool `json:"isBank,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransactionsQuery when eager-loading is set.
	Edges        TransactionsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TransactionsEdges holds the relations/edges for other nodes in the graph.
type TransactionsEdges struct {
	// Users holds the value of the users edge.
	Users *Users `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionsEdges) UsersOrErr() (*Users, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: users.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transactions) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transactions.FieldIsBank:
			values[i] = new(sql.NullBool)
		case transactions.FieldID, transactions.FieldUserID:
			values[i] = new(sql.NullInt64)
		case transactions.FieldName, transactions.FieldImage:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transactions fields.
func (t *Transactions) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transactions.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case transactions.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				t.UserID = int(value.Int64)
			}
		case transactions.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case transactions.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				t.Image = value.String
			}
		case transactions.FieldIsBank:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isBank", values[i])
			} else if value.Valid {
				t.IsBank = value.Bool
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Transactions.
// This includes values selected through modifiers, order, etc.
func (t *Transactions) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the Transactions entity.
func (t *Transactions) QueryUsers() *UsersQuery {
	return NewTransactionsClient(t.config).QueryUsers(t)
}

// Update returns a builder for updating this Transactions.
// Note that you need to call Transactions.Unwrap() before calling this method if this Transactions
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transactions) Update() *TransactionsUpdateOne {
	return NewTransactionsClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Transactions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transactions) Unwrap() *Transactions {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transactions is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transactions) String() string {
	var builder strings.Builder
	builder.WriteString("Transactions(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", t.UserID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(t.Image)
	builder.WriteString(", ")
	builder.WriteString("isBank=")
	builder.WriteString(fmt.Sprintf("%v", t.IsBank))
	builder.WriteByte(')')
	return builder.String()
}

// TransactionsSlice is a parsable slice of Transactions.
type TransactionsSlice []*Transactions
