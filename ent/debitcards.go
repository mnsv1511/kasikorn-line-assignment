// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcards"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// DebitCards is the model entity for the DebitCards schema.
type DebitCards struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DebitCardsQuery when eager-loading is set.
	Edges        DebitCardsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DebitCardsEdges holds the relations/edges for other nodes in the graph.
type DebitCardsEdges struct {
	// DebitCardDesign holds the value of the debit_card_design edge.
	DebitCardDesign []*DebitCardDesign `json:"debit_card_design,omitempty"`
	// DebitCardDetails holds the value of the debit_card_details edge.
	DebitCardDetails []*DebitCardDetails `json:"debit_card_details,omitempty"`
	// DebitCardStatus holds the value of the debit_card_status edge.
	DebitCardStatus []*DebitCardStatus `json:"debit_card_status,omitempty"`
	// Users holds the value of the users edge.
	Users *Users `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// DebitCardDesignOrErr returns the DebitCardDesign value or an error if the edge
// was not loaded in eager-loading.
func (e DebitCardsEdges) DebitCardDesignOrErr() ([]*DebitCardDesign, error) {
	if e.loadedTypes[0] {
		return e.DebitCardDesign, nil
	}
	return nil, &NotLoadedError{edge: "debit_card_design"}
}

// DebitCardDetailsOrErr returns the DebitCardDetails value or an error if the edge
// was not loaded in eager-loading.
func (e DebitCardsEdges) DebitCardDetailsOrErr() ([]*DebitCardDetails, error) {
	if e.loadedTypes[1] {
		return e.DebitCardDetails, nil
	}
	return nil, &NotLoadedError{edge: "debit_card_details"}
}

// DebitCardStatusOrErr returns the DebitCardStatus value or an error if the edge
// was not loaded in eager-loading.
func (e DebitCardsEdges) DebitCardStatusOrErr() ([]*DebitCardStatus, error) {
	if e.loadedTypes[2] {
		return e.DebitCardStatus, nil
	}
	return nil, &NotLoadedError{edge: "debit_card_status"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DebitCardsEdges) UsersOrErr() (*Users, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: users.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DebitCards) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case debitcards.FieldID, debitcards.FieldUserID:
			values[i] = new(sql.NullInt64)
		case debitcards.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DebitCards fields.
func (dc *DebitCards) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case debitcards.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dc.ID = int(value.Int64)
		case debitcards.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				dc.UserID = int(value.Int64)
			}
		case debitcards.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				dc.Name = value.String
			}
		default:
			dc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DebitCards.
// This includes values selected through modifiers, order, etc.
func (dc *DebitCards) Value(name string) (ent.Value, error) {
	return dc.selectValues.Get(name)
}

// QueryDebitCardDesign queries the "debit_card_design" edge of the DebitCards entity.
func (dc *DebitCards) QueryDebitCardDesign() *DebitCardDesignQuery {
	return NewDebitCardsClient(dc.config).QueryDebitCardDesign(dc)
}

// QueryDebitCardDetails queries the "debit_card_details" edge of the DebitCards entity.
func (dc *DebitCards) QueryDebitCardDetails() *DebitCardDetailsQuery {
	return NewDebitCardsClient(dc.config).QueryDebitCardDetails(dc)
}

// QueryDebitCardStatus queries the "debit_card_status" edge of the DebitCards entity.
func (dc *DebitCards) QueryDebitCardStatus() *DebitCardStatusQuery {
	return NewDebitCardsClient(dc.config).QueryDebitCardStatus(dc)
}

// QueryUsers queries the "users" edge of the DebitCards entity.
func (dc *DebitCards) QueryUsers() *UsersQuery {
	return NewDebitCardsClient(dc.config).QueryUsers(dc)
}

// Update returns a builder for updating this DebitCards.
// Note that you need to call DebitCards.Unwrap() before calling this method if this DebitCards
// was returned from a transaction, and the transaction was committed or rolled back.
func (dc *DebitCards) Update() *DebitCardsUpdateOne {
	return NewDebitCardsClient(dc.config).UpdateOne(dc)
}

// Unwrap unwraps the DebitCards entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dc *DebitCards) Unwrap() *DebitCards {
	_tx, ok := dc.config.driver.(*txDriver)
	if !ok {
		panic("ent: DebitCards is not a transactional entity")
	}
	dc.config.driver = _tx.drv
	return dc
}

// String implements the fmt.Stringer.
func (dc *DebitCards) String() string {
	var builder strings.Builder
	builder.WriteString("DebitCards(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dc.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", dc.UserID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(dc.Name)
	builder.WriteByte(')')
	return builder.String()
}

// DebitCardsSlice is a parsable slice of DebitCards.
type DebitCardsSlice []*DebitCards
