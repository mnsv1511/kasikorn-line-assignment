// Code generated by ent, DO NOT EDIT.

package accountdetails

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldLTE(FieldID, id))
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldEQ(FieldAccountID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldEQ(FieldUserID, v))
}

// Color applies equality check predicate on the "color" field. It's identical to ColorEQ.
func Color(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldEQ(FieldColor, v))
}

// IsMainAccount applies equality check predicate on the "is_main_account" field. It's identical to IsMainAccountEQ.
func IsMainAccount(v bool) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldEQ(FieldIsMainAccount, v))
}

// Progress applies equality check predicate on the "progress" field. It's identical to ProgressEQ.
func Progress(v int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldEQ(FieldProgress, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldEQ(FieldName, v))
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldEQ(FieldAccountID, v))
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldNEQ(FieldAccountID, v))
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldIn(FieldAccountID, vs...))
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldNotIn(FieldAccountID, vs...))
}

// AccountIDIsNil applies the IsNil predicate on the "account_id" field.
func AccountIDIsNil() predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldIsNull(FieldAccountID))
}

// AccountIDNotNil applies the NotNil predicate on the "account_id" field.
func AccountIDNotNil() predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldNotNull(FieldAccountID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldNotNull(FieldUserID))
}

// ColorEQ applies the EQ predicate on the "color" field.
func ColorEQ(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldEQ(FieldColor, v))
}

// ColorNEQ applies the NEQ predicate on the "color" field.
func ColorNEQ(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldNEQ(FieldColor, v))
}

// ColorIn applies the In predicate on the "color" field.
func ColorIn(vs ...string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldIn(FieldColor, vs...))
}

// ColorNotIn applies the NotIn predicate on the "color" field.
func ColorNotIn(vs ...string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldNotIn(FieldColor, vs...))
}

// ColorGT applies the GT predicate on the "color" field.
func ColorGT(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldGT(FieldColor, v))
}

// ColorGTE applies the GTE predicate on the "color" field.
func ColorGTE(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldGTE(FieldColor, v))
}

// ColorLT applies the LT predicate on the "color" field.
func ColorLT(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldLT(FieldColor, v))
}

// ColorLTE applies the LTE predicate on the "color" field.
func ColorLTE(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldLTE(FieldColor, v))
}

// ColorContains applies the Contains predicate on the "color" field.
func ColorContains(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldContains(FieldColor, v))
}

// ColorHasPrefix applies the HasPrefix predicate on the "color" field.
func ColorHasPrefix(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldHasPrefix(FieldColor, v))
}

// ColorHasSuffix applies the HasSuffix predicate on the "color" field.
func ColorHasSuffix(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldHasSuffix(FieldColor, v))
}

// ColorEqualFold applies the EqualFold predicate on the "color" field.
func ColorEqualFold(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldEqualFold(FieldColor, v))
}

// ColorContainsFold applies the ContainsFold predicate on the "color" field.
func ColorContainsFold(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldContainsFold(FieldColor, v))
}

// IsMainAccountEQ applies the EQ predicate on the "is_main_account" field.
func IsMainAccountEQ(v bool) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldEQ(FieldIsMainAccount, v))
}

// IsMainAccountNEQ applies the NEQ predicate on the "is_main_account" field.
func IsMainAccountNEQ(v bool) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldNEQ(FieldIsMainAccount, v))
}

// ProgressEQ applies the EQ predicate on the "progress" field.
func ProgressEQ(v int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldEQ(FieldProgress, v))
}

// ProgressNEQ applies the NEQ predicate on the "progress" field.
func ProgressNEQ(v int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldNEQ(FieldProgress, v))
}

// ProgressIn applies the In predicate on the "progress" field.
func ProgressIn(vs ...int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldIn(FieldProgress, vs...))
}

// ProgressNotIn applies the NotIn predicate on the "progress" field.
func ProgressNotIn(vs ...int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldNotIn(FieldProgress, vs...))
}

// ProgressGT applies the GT predicate on the "progress" field.
func ProgressGT(v int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldGT(FieldProgress, v))
}

// ProgressGTE applies the GTE predicate on the "progress" field.
func ProgressGTE(v int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldGTE(FieldProgress, v))
}

// ProgressLT applies the LT predicate on the "progress" field.
func ProgressLT(v int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldLT(FieldProgress, v))
}

// ProgressLTE applies the LTE predicate on the "progress" field.
func ProgressLTE(v int) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldLTE(FieldProgress, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AccountDetails {
	return predicate.AccountDetails(sql.FieldContainsFold(FieldName, v))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.AccountDetails {
	return predicate.AccountDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.Users) predicate.AccountDetails {
	return predicate.AccountDetails(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAccounts applies the HasEdge predicate on the "accounts" edge.
func HasAccounts() predicate.AccountDetails {
	return predicate.AccountDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AccountsTable, AccountsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccountsWith applies the HasEdge predicate on the "accounts" edge with a given conditions (other predicates).
func HasAccountsWith(preds ...predicate.Accounts) predicate.AccountDetails {
	return predicate.AccountDetails(func(s *sql.Selector) {
		step := newAccountsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AccountDetails) predicate.AccountDetails {
	return predicate.AccountDetails(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AccountDetails) predicate.AccountDetails {
	return predicate.AccountDetails(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AccountDetails) predicate.AccountDetails {
	return predicate.AccountDetails(sql.NotPredicates(p))
}
