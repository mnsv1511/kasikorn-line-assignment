// Code generated by ent, DO NOT EDIT.

package debitcards

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the debitcards type in the database.
	Label = "debit_cards"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeDebitCardDesign holds the string denoting the debit_card_design edge name in mutations.
	EdgeDebitCardDesign = "debit_card_design"
	// EdgeDebitCardDetails holds the string denoting the debit_card_details edge name in mutations.
	EdgeDebitCardDetails = "debit_card_details"
	// EdgeDebitCardStatus holds the string denoting the debit_card_status edge name in mutations.
	EdgeDebitCardStatus = "debit_card_status"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the debitcards in the database.
	Table = "debit_cards"
	// DebitCardDesignTable is the table that holds the debit_card_design relation/edge.
	DebitCardDesignTable = "debit_card_designs"
	// DebitCardDesignInverseTable is the table name for the DebitCardDesign entity.
	// It exists in this package in order to avoid circular dependency with the "debitcarddesign" package.
	DebitCardDesignInverseTable = "debit_card_designs"
	// DebitCardDesignColumn is the table column denoting the debit_card_design relation/edge.
	DebitCardDesignColumn = "card_id"
	// DebitCardDetailsTable is the table that holds the debit_card_details relation/edge.
	DebitCardDetailsTable = "debit_card_details"
	// DebitCardDetailsInverseTable is the table name for the DebitCardDetails entity.
	// It exists in this package in order to avoid circular dependency with the "debitcarddetails" package.
	DebitCardDetailsInverseTable = "debit_card_details"
	// DebitCardDetailsColumn is the table column denoting the debit_card_details relation/edge.
	DebitCardDetailsColumn = "card_id"
	// DebitCardStatusTable is the table that holds the debit_card_status relation/edge.
	DebitCardStatusTable = "debit_card_status"
	// DebitCardStatusInverseTable is the table name for the DebitCardStatus entity.
	// It exists in this package in order to avoid circular dependency with the "debitcardstatus" package.
	DebitCardStatusInverseTable = "debit_card_status"
	// DebitCardStatusColumn is the table column denoting the debit_card_status relation/edge.
	DebitCardStatusColumn = "card_id"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "debit_cards"
	// UsersInverseTable is the table name for the Users entity.
	// It exists in this package in order to avoid circular dependency with the "users" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "user_id"
)

// Columns holds all SQL columns for debitcards fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the DebitCards queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDebitCardDesignCount orders the results by debit_card_design count.
func ByDebitCardDesignCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDebitCardDesignStep(), opts...)
	}
}

// ByDebitCardDesign orders the results by debit_card_design terms.
func ByDebitCardDesign(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDebitCardDesignStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDebitCardDetailsCount orders the results by debit_card_details count.
func ByDebitCardDetailsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDebitCardDetailsStep(), opts...)
	}
}

// ByDebitCardDetails orders the results by debit_card_details terms.
func ByDebitCardDetails(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDebitCardDetailsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDebitCardStatusCount orders the results by debit_card_status count.
func ByDebitCardStatusCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDebitCardStatusStep(), opts...)
	}
}

// ByDebitCardStatus orders the results by debit_card_status terms.
func ByDebitCardStatus(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDebitCardStatusStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersField orders the results by users field.
func ByUsersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), sql.OrderByField(field, opts...))
	}
}
func newDebitCardDesignStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DebitCardDesignInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DebitCardDesignTable, DebitCardDesignColumn),
	)
}
func newDebitCardDetailsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DebitCardDetailsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DebitCardDetailsTable, DebitCardDetailsColumn),
	)
}
func newDebitCardStatusStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DebitCardStatusInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DebitCardStatusTable, DebitCardStatusColumn),
	)
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
	)
}
