// Code generated by ent, DO NOT EDIT.

package debitcards

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldEQ(FieldUserID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldEQ(FieldName, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.DebitCards {
	return predicate.DebitCards(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.DebitCards {
	return predicate.DebitCards(sql.FieldNotNull(FieldUserID))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.DebitCards {
	return predicate.DebitCards(sql.FieldContainsFold(FieldName, v))
}

// HasDebitCardDesign applies the HasEdge predicate on the "debit_card_design" edge.
func HasDebitCardDesign() predicate.DebitCards {
	return predicate.DebitCards(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DebitCardDesignTable, DebitCardDesignColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDebitCardDesignWith applies the HasEdge predicate on the "debit_card_design" edge with a given conditions (other predicates).
func HasDebitCardDesignWith(preds ...predicate.DebitCardDesign) predicate.DebitCards {
	return predicate.DebitCards(func(s *sql.Selector) {
		step := newDebitCardDesignStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDebitCardDetails applies the HasEdge predicate on the "debit_card_details" edge.
func HasDebitCardDetails() predicate.DebitCards {
	return predicate.DebitCards(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DebitCardDetailsTable, DebitCardDetailsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDebitCardDetailsWith applies the HasEdge predicate on the "debit_card_details" edge with a given conditions (other predicates).
func HasDebitCardDetailsWith(preds ...predicate.DebitCardDetails) predicate.DebitCards {
	return predicate.DebitCards(func(s *sql.Selector) {
		step := newDebitCardDetailsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDebitCardStatus applies the HasEdge predicate on the "debit_card_status" edge.
func HasDebitCardStatus() predicate.DebitCards {
	return predicate.DebitCards(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DebitCardStatusTable, DebitCardStatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDebitCardStatusWith applies the HasEdge predicate on the "debit_card_status" edge with a given conditions (other predicates).
func HasDebitCardStatusWith(preds ...predicate.DebitCardStatus) predicate.DebitCards {
	return predicate.DebitCards(func(s *sql.Selector) {
		step := newDebitCardStatusStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.DebitCards {
	return predicate.DebitCards(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.Users) predicate.DebitCards {
	return predicate.DebitCards(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DebitCards) predicate.DebitCards {
	return predicate.DebitCards(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DebitCards) predicate.DebitCards {
	return predicate.DebitCards(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DebitCards) predicate.DebitCards {
	return predicate.DebitCards(sql.NotPredicates(p))
}
