// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcarddesign"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcarddetails"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcards"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcardstatus"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// DebitCardsCreate is the builder for creating a DebitCards entity.
type DebitCardsCreate struct {
	config
	mutation *DebitCardsMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (dcc *DebitCardsCreate) SetUserID(i int) *DebitCardsCreate {
	dcc.mutation.SetUserID(i)
	return dcc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (dcc *DebitCardsCreate) SetNillableUserID(i *int) *DebitCardsCreate {
	if i != nil {
		dcc.SetUserID(*i)
	}
	return dcc
}

// SetName sets the "name" field.
func (dcc *DebitCardsCreate) SetName(s string) *DebitCardsCreate {
	dcc.mutation.SetName(s)
	return dcc
}

// AddDebitCardDesignIDs adds the "debit_card_design" edge to the DebitCardDesign entity by IDs.
func (dcc *DebitCardsCreate) AddDebitCardDesignIDs(ids ...int) *DebitCardsCreate {
	dcc.mutation.AddDebitCardDesignIDs(ids...)
	return dcc
}

// AddDebitCardDesign adds the "debit_card_design" edges to the DebitCardDesign entity.
func (dcc *DebitCardsCreate) AddDebitCardDesign(d ...*DebitCardDesign) *DebitCardsCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcc.AddDebitCardDesignIDs(ids...)
}

// AddDebitCardDetailIDs adds the "debit_card_details" edge to the DebitCardDetails entity by IDs.
func (dcc *DebitCardsCreate) AddDebitCardDetailIDs(ids ...int) *DebitCardsCreate {
	dcc.mutation.AddDebitCardDetailIDs(ids...)
	return dcc
}

// AddDebitCardDetails adds the "debit_card_details" edges to the DebitCardDetails entity.
func (dcc *DebitCardsCreate) AddDebitCardDetails(d ...*DebitCardDetails) *DebitCardsCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcc.AddDebitCardDetailIDs(ids...)
}

// AddDebitCardStatuIDs adds the "debit_card_status" edge to the DebitCardStatus entity by IDs.
func (dcc *DebitCardsCreate) AddDebitCardStatuIDs(ids ...int) *DebitCardsCreate {
	dcc.mutation.AddDebitCardStatuIDs(ids...)
	return dcc
}

// AddDebitCardStatus adds the "debit_card_status" edges to the DebitCardStatus entity.
func (dcc *DebitCardsCreate) AddDebitCardStatus(d ...*DebitCardStatus) *DebitCardsCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcc.AddDebitCardStatuIDs(ids...)
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (dcc *DebitCardsCreate) SetUsersID(id int) *DebitCardsCreate {
	dcc.mutation.SetUsersID(id)
	return dcc
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (dcc *DebitCardsCreate) SetNillableUsersID(id *int) *DebitCardsCreate {
	if id != nil {
		dcc = dcc.SetUsersID(*id)
	}
	return dcc
}

// SetUsers sets the "users" edge to the Users entity.
func (dcc *DebitCardsCreate) SetUsers(u *Users) *DebitCardsCreate {
	return dcc.SetUsersID(u.ID)
}

// Mutation returns the DebitCardsMutation object of the builder.
func (dcc *DebitCardsCreate) Mutation() *DebitCardsMutation {
	return dcc.mutation
}

// Save creates the DebitCards in the database.
func (dcc *DebitCardsCreate) Save(ctx context.Context) (*DebitCards, error) {
	return withHooks(ctx, dcc.sqlSave, dcc.mutation, dcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dcc *DebitCardsCreate) SaveX(ctx context.Context) *DebitCards {
	v, err := dcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcc *DebitCardsCreate) Exec(ctx context.Context) error {
	_, err := dcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcc *DebitCardsCreate) ExecX(ctx context.Context) {
	if err := dcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcc *DebitCardsCreate) check() error {
	if _, ok := dcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "DebitCards.name"`)}
	}
	return nil
}

func (dcc *DebitCardsCreate) sqlSave(ctx context.Context) (*DebitCards, error) {
	if err := dcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dcc.mutation.id = &_node.ID
	dcc.mutation.done = true
	return _node, nil
}

func (dcc *DebitCardsCreate) createSpec() (*DebitCards, *sqlgraph.CreateSpec) {
	var (
		_node = &DebitCards{config: dcc.config}
		_spec = sqlgraph.NewCreateSpec(debitcards.Table, sqlgraph.NewFieldSpec(debitcards.FieldID, field.TypeInt))
	)
	if value, ok := dcc.mutation.Name(); ok {
		_spec.SetField(debitcards.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := dcc.mutation.DebitCardDesignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   debitcards.DebitCardDesignTable,
			Columns: []string{debitcards.DebitCardDesignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddesign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dcc.mutation.DebitCardDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   debitcards.DebitCardDetailsTable,
			Columns: []string{debitcards.DebitCardDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dcc.mutation.DebitCardStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   debitcards.DebitCardStatusTable,
			Columns: []string{debitcards.DebitCardStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcardstatus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dcc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcards.UsersTable,
			Columns: []string{debitcards.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DebitCardsCreateBulk is the builder for creating many DebitCards entities in bulk.
type DebitCardsCreateBulk struct {
	config
	err      error
	builders []*DebitCardsCreate
}

// Save creates the DebitCards entities in the database.
func (dccb *DebitCardsCreateBulk) Save(ctx context.Context) ([]*DebitCards, error) {
	if dccb.err != nil {
		return nil, dccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dccb.builders))
	nodes := make([]*DebitCards, len(dccb.builders))
	mutators := make([]Mutator, len(dccb.builders))
	for i := range dccb.builders {
		func(i int, root context.Context) {
			builder := dccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DebitCardsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dccb *DebitCardsCreateBulk) SaveX(ctx context.Context) []*DebitCards {
	v, err := dccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dccb *DebitCardsCreateBulk) Exec(ctx context.Context) error {
	_, err := dccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dccb *DebitCardsCreateBulk) ExecX(ctx context.Context) {
	if err := dccb.Exec(ctx); err != nil {
		panic(err)
	}
}
