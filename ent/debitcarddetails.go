// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcarddetails"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcards"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// DebitCardDetails is the model entity for the DebitCardDetails schema.
type DebitCardDetails struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CardID holds the value of the "card_id" field.
	CardID int `json:"card_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Issuer holds the value of the "issuer" field.
	Issuer string `json:"issuer,omitempty"`
	// Number holds the value of the "number" field.
	Number string `json:"number,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DebitCardDetailsQuery when eager-loading is set.
	Edges        DebitCardDetailsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DebitCardDetailsEdges holds the relations/edges for other nodes in the graph.
type DebitCardDetailsEdges struct {
	// Users holds the value of the users edge.
	Users *Users `json:"users,omitempty"`
	// DebitCards holds the value of the debit_cards edge.
	DebitCards *DebitCards `json:"debit_cards,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DebitCardDetailsEdges) UsersOrErr() (*Users, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: users.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// DebitCardsOrErr returns the DebitCards value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DebitCardDetailsEdges) DebitCardsOrErr() (*DebitCards, error) {
	if e.DebitCards != nil {
		return e.DebitCards, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: debitcards.Label}
	}
	return nil, &NotLoadedError{edge: "debit_cards"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DebitCardDetails) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case debitcarddetails.FieldID, debitcarddetails.FieldCardID, debitcarddetails.FieldUserID:
			values[i] = new(sql.NullInt64)
		case debitcarddetails.FieldIssuer, debitcarddetails.FieldNumber:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DebitCardDetails fields.
func (dcd *DebitCardDetails) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case debitcarddetails.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dcd.ID = int(value.Int64)
		case debitcarddetails.FieldCardID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field card_id", values[i])
			} else if value.Valid {
				dcd.CardID = int(value.Int64)
			}
		case debitcarddetails.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				dcd.UserID = int(value.Int64)
			}
		case debitcarddetails.FieldIssuer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field issuer", values[i])
			} else if value.Valid {
				dcd.Issuer = value.String
			}
		case debitcarddetails.FieldNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				dcd.Number = value.String
			}
		default:
			dcd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DebitCardDetails.
// This includes values selected through modifiers, order, etc.
func (dcd *DebitCardDetails) Value(name string) (ent.Value, error) {
	return dcd.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the DebitCardDetails entity.
func (dcd *DebitCardDetails) QueryUsers() *UsersQuery {
	return NewDebitCardDetailsClient(dcd.config).QueryUsers(dcd)
}

// QueryDebitCards queries the "debit_cards" edge of the DebitCardDetails entity.
func (dcd *DebitCardDetails) QueryDebitCards() *DebitCardsQuery {
	return NewDebitCardDetailsClient(dcd.config).QueryDebitCards(dcd)
}

// Update returns a builder for updating this DebitCardDetails.
// Note that you need to call DebitCardDetails.Unwrap() before calling this method if this DebitCardDetails
// was returned from a transaction, and the transaction was committed or rolled back.
func (dcd *DebitCardDetails) Update() *DebitCardDetailsUpdateOne {
	return NewDebitCardDetailsClient(dcd.config).UpdateOne(dcd)
}

// Unwrap unwraps the DebitCardDetails entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dcd *DebitCardDetails) Unwrap() *DebitCardDetails {
	_tx, ok := dcd.config.driver.(*txDriver)
	if !ok {
		panic("ent: DebitCardDetails is not a transactional entity")
	}
	dcd.config.driver = _tx.drv
	return dcd
}

// String implements the fmt.Stringer.
func (dcd *DebitCardDetails) String() string {
	var builder strings.Builder
	builder.WriteString("DebitCardDetails(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dcd.ID))
	builder.WriteString("card_id=")
	builder.WriteString(fmt.Sprintf("%v", dcd.CardID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", dcd.UserID))
	builder.WriteString(", ")
	builder.WriteString("issuer=")
	builder.WriteString(dcd.Issuer)
	builder.WriteString(", ")
	builder.WriteString("number=")
	builder.WriteString(dcd.Number)
	builder.WriteByte(')')
	return builder.String()
}

// DebitCardDetailsSlice is a parsable slice of DebitCardDetails.
type DebitCardDetailsSlice []*DebitCardDetails
