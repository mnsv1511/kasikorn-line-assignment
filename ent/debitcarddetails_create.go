// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcarddetails"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcards"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// DebitCardDetailsCreate is the builder for creating a DebitCardDetails entity.
type DebitCardDetailsCreate struct {
	config
	mutation *DebitCardDetailsMutation
	hooks    []Hook
}

// SetCardID sets the "card_id" field.
func (dcdc *DebitCardDetailsCreate) SetCardID(i int) *DebitCardDetailsCreate {
	dcdc.mutation.SetCardID(i)
	return dcdc
}

// SetNillableCardID sets the "card_id" field if the given value is not nil.
func (dcdc *DebitCardDetailsCreate) SetNillableCardID(i *int) *DebitCardDetailsCreate {
	if i != nil {
		dcdc.SetCardID(*i)
	}
	return dcdc
}

// SetUserID sets the "user_id" field.
func (dcdc *DebitCardDetailsCreate) SetUserID(i int) *DebitCardDetailsCreate {
	dcdc.mutation.SetUserID(i)
	return dcdc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (dcdc *DebitCardDetailsCreate) SetNillableUserID(i *int) *DebitCardDetailsCreate {
	if i != nil {
		dcdc.SetUserID(*i)
	}
	return dcdc
}

// SetIssuer sets the "issuer" field.
func (dcdc *DebitCardDetailsCreate) SetIssuer(s string) *DebitCardDetailsCreate {
	dcdc.mutation.SetIssuer(s)
	return dcdc
}

// SetNumber sets the "number" field.
func (dcdc *DebitCardDetailsCreate) SetNumber(s string) *DebitCardDetailsCreate {
	dcdc.mutation.SetNumber(s)
	return dcdc
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (dcdc *DebitCardDetailsCreate) SetUsersID(id int) *DebitCardDetailsCreate {
	dcdc.mutation.SetUsersID(id)
	return dcdc
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (dcdc *DebitCardDetailsCreate) SetNillableUsersID(id *int) *DebitCardDetailsCreate {
	if id != nil {
		dcdc = dcdc.SetUsersID(*id)
	}
	return dcdc
}

// SetUsers sets the "users" edge to the Users entity.
func (dcdc *DebitCardDetailsCreate) SetUsers(u *Users) *DebitCardDetailsCreate {
	return dcdc.SetUsersID(u.ID)
}

// SetDebitCardsID sets the "debit_cards" edge to the DebitCards entity by ID.
func (dcdc *DebitCardDetailsCreate) SetDebitCardsID(id int) *DebitCardDetailsCreate {
	dcdc.mutation.SetDebitCardsID(id)
	return dcdc
}

// SetNillableDebitCardsID sets the "debit_cards" edge to the DebitCards entity by ID if the given value is not nil.
func (dcdc *DebitCardDetailsCreate) SetNillableDebitCardsID(id *int) *DebitCardDetailsCreate {
	if id != nil {
		dcdc = dcdc.SetDebitCardsID(*id)
	}
	return dcdc
}

// SetDebitCards sets the "debit_cards" edge to the DebitCards entity.
func (dcdc *DebitCardDetailsCreate) SetDebitCards(d *DebitCards) *DebitCardDetailsCreate {
	return dcdc.SetDebitCardsID(d.ID)
}

// Mutation returns the DebitCardDetailsMutation object of the builder.
func (dcdc *DebitCardDetailsCreate) Mutation() *DebitCardDetailsMutation {
	return dcdc.mutation
}

// Save creates the DebitCardDetails in the database.
func (dcdc *DebitCardDetailsCreate) Save(ctx context.Context) (*DebitCardDetails, error) {
	return withHooks(ctx, dcdc.sqlSave, dcdc.mutation, dcdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dcdc *DebitCardDetailsCreate) SaveX(ctx context.Context) *DebitCardDetails {
	v, err := dcdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcdc *DebitCardDetailsCreate) Exec(ctx context.Context) error {
	_, err := dcdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcdc *DebitCardDetailsCreate) ExecX(ctx context.Context) {
	if err := dcdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcdc *DebitCardDetailsCreate) check() error {
	if _, ok := dcdc.mutation.Issuer(); !ok {
		return &ValidationError{Name: "issuer", err: errors.New(`ent: missing required field "DebitCardDetails.issuer"`)}
	}
	if _, ok := dcdc.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`ent: missing required field "DebitCardDetails.number"`)}
	}
	return nil
}

func (dcdc *DebitCardDetailsCreate) sqlSave(ctx context.Context) (*DebitCardDetails, error) {
	if err := dcdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dcdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dcdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dcdc.mutation.id = &_node.ID
	dcdc.mutation.done = true
	return _node, nil
}

func (dcdc *DebitCardDetailsCreate) createSpec() (*DebitCardDetails, *sqlgraph.CreateSpec) {
	var (
		_node = &DebitCardDetails{config: dcdc.config}
		_spec = sqlgraph.NewCreateSpec(debitcarddetails.Table, sqlgraph.NewFieldSpec(debitcarddetails.FieldID, field.TypeInt))
	)
	if value, ok := dcdc.mutation.Issuer(); ok {
		_spec.SetField(debitcarddetails.FieldIssuer, field.TypeString, value)
		_node.Issuer = value
	}
	if value, ok := dcdc.mutation.Number(); ok {
		_spec.SetField(debitcarddetails.FieldNumber, field.TypeString, value)
		_node.Number = value
	}
	if nodes := dcdc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcarddetails.UsersTable,
			Columns: []string{debitcarddetails.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dcdc.mutation.DebitCardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcarddetails.DebitCardsTable,
			Columns: []string{debitcarddetails.DebitCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcards.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CardID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DebitCardDetailsCreateBulk is the builder for creating many DebitCardDetails entities in bulk.
type DebitCardDetailsCreateBulk struct {
	config
	err      error
	builders []*DebitCardDetailsCreate
}

// Save creates the DebitCardDetails entities in the database.
func (dcdcb *DebitCardDetailsCreateBulk) Save(ctx context.Context) ([]*DebitCardDetails, error) {
	if dcdcb.err != nil {
		return nil, dcdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcdcb.builders))
	nodes := make([]*DebitCardDetails, len(dcdcb.builders))
	mutators := make([]Mutator, len(dcdcb.builders))
	for i := range dcdcb.builders {
		func(i int, root context.Context) {
			builder := dcdcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DebitCardDetailsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcdcb *DebitCardDetailsCreateBulk) SaveX(ctx context.Context) []*DebitCardDetails {
	v, err := dcdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcdcb *DebitCardDetailsCreateBulk) Exec(ctx context.Context) error {
	_, err := dcdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcdcb *DebitCardDetailsCreateBulk) ExecX(ctx context.Context) {
	if err := dcdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
