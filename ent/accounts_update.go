// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountbalances"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountdetails"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountflags"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accounts"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// AccountsUpdate is the builder for updating Accounts entities.
type AccountsUpdate struct {
	config
	hooks    []Hook
	mutation *AccountsMutation
}

// Where appends a list predicates to the AccountsUpdate builder.
func (au *AccountsUpdate) Where(ps ...predicate.Accounts) *AccountsUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUserID sets the "user_id" field.
func (au *AccountsUpdate) SetUserID(i int) *AccountsUpdate {
	au.mutation.SetUserID(i)
	return au
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (au *AccountsUpdate) SetNillableUserID(i *int) *AccountsUpdate {
	if i != nil {
		au.SetUserID(*i)
	}
	return au
}

// ClearUserID clears the value of the "user_id" field.
func (au *AccountsUpdate) ClearUserID() *AccountsUpdate {
	au.mutation.ClearUserID()
	return au
}

// SetType sets the "type" field.
func (au *AccountsUpdate) SetType(s string) *AccountsUpdate {
	au.mutation.SetType(s)
	return au
}

// SetNillableType sets the "type" field if the given value is not nil.
func (au *AccountsUpdate) SetNillableType(s *string) *AccountsUpdate {
	if s != nil {
		au.SetType(*s)
	}
	return au
}

// SetCurrency sets the "currency" field.
func (au *AccountsUpdate) SetCurrency(s string) *AccountsUpdate {
	au.mutation.SetCurrency(s)
	return au
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (au *AccountsUpdate) SetNillableCurrency(s *string) *AccountsUpdate {
	if s != nil {
		au.SetCurrency(*s)
	}
	return au
}

// SetAccountNumber sets the "account_number" field.
func (au *AccountsUpdate) SetAccountNumber(s string) *AccountsUpdate {
	au.mutation.SetAccountNumber(s)
	return au
}

// SetNillableAccountNumber sets the "account_number" field if the given value is not nil.
func (au *AccountsUpdate) SetNillableAccountNumber(s *string) *AccountsUpdate {
	if s != nil {
		au.SetAccountNumber(*s)
	}
	return au
}

// SetIssuer sets the "issuer" field.
func (au *AccountsUpdate) SetIssuer(s string) *AccountsUpdate {
	au.mutation.SetIssuer(s)
	return au
}

// SetNillableIssuer sets the "issuer" field if the given value is not nil.
func (au *AccountsUpdate) SetNillableIssuer(s *string) *AccountsUpdate {
	if s != nil {
		au.SetIssuer(*s)
	}
	return au
}

// AddAccountBalanceIDs adds the "account_balances" edge to the AccountBalances entity by IDs.
func (au *AccountsUpdate) AddAccountBalanceIDs(ids ...int) *AccountsUpdate {
	au.mutation.AddAccountBalanceIDs(ids...)
	return au
}

// AddAccountBalances adds the "account_balances" edges to the AccountBalances entity.
func (au *AccountsUpdate) AddAccountBalances(a ...*AccountBalances) *AccountsUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAccountBalanceIDs(ids...)
}

// AddAccountDetailIDs adds the "account_details" edge to the AccountDetails entity by IDs.
func (au *AccountsUpdate) AddAccountDetailIDs(ids ...int) *AccountsUpdate {
	au.mutation.AddAccountDetailIDs(ids...)
	return au
}

// AddAccountDetails adds the "account_details" edges to the AccountDetails entity.
func (au *AccountsUpdate) AddAccountDetails(a ...*AccountDetails) *AccountsUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAccountDetailIDs(ids...)
}

// AddAccountFlagIDs adds the "account_flags" edge to the AccountFlags entity by IDs.
func (au *AccountsUpdate) AddAccountFlagIDs(ids ...int) *AccountsUpdate {
	au.mutation.AddAccountFlagIDs(ids...)
	return au
}

// AddAccountFlags adds the "account_flags" edges to the AccountFlags entity.
func (au *AccountsUpdate) AddAccountFlags(a ...*AccountFlags) *AccountsUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAccountFlagIDs(ids...)
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (au *AccountsUpdate) SetUsersID(id int) *AccountsUpdate {
	au.mutation.SetUsersID(id)
	return au
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (au *AccountsUpdate) SetNillableUsersID(id *int) *AccountsUpdate {
	if id != nil {
		au = au.SetUsersID(*id)
	}
	return au
}

// SetUsers sets the "users" edge to the Users entity.
func (au *AccountsUpdate) SetUsers(u *Users) *AccountsUpdate {
	return au.SetUsersID(u.ID)
}

// Mutation returns the AccountsMutation object of the builder.
func (au *AccountsUpdate) Mutation() *AccountsMutation {
	return au.mutation
}

// ClearAccountBalances clears all "account_balances" edges to the AccountBalances entity.
func (au *AccountsUpdate) ClearAccountBalances() *AccountsUpdate {
	au.mutation.ClearAccountBalances()
	return au
}

// RemoveAccountBalanceIDs removes the "account_balances" edge to AccountBalances entities by IDs.
func (au *AccountsUpdate) RemoveAccountBalanceIDs(ids ...int) *AccountsUpdate {
	au.mutation.RemoveAccountBalanceIDs(ids...)
	return au
}

// RemoveAccountBalances removes "account_balances" edges to AccountBalances entities.
func (au *AccountsUpdate) RemoveAccountBalances(a ...*AccountBalances) *AccountsUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAccountBalanceIDs(ids...)
}

// ClearAccountDetails clears all "account_details" edges to the AccountDetails entity.
func (au *AccountsUpdate) ClearAccountDetails() *AccountsUpdate {
	au.mutation.ClearAccountDetails()
	return au
}

// RemoveAccountDetailIDs removes the "account_details" edge to AccountDetails entities by IDs.
func (au *AccountsUpdate) RemoveAccountDetailIDs(ids ...int) *AccountsUpdate {
	au.mutation.RemoveAccountDetailIDs(ids...)
	return au
}

// RemoveAccountDetails removes "account_details" edges to AccountDetails entities.
func (au *AccountsUpdate) RemoveAccountDetails(a ...*AccountDetails) *AccountsUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAccountDetailIDs(ids...)
}

// ClearAccountFlags clears all "account_flags" edges to the AccountFlags entity.
func (au *AccountsUpdate) ClearAccountFlags() *AccountsUpdate {
	au.mutation.ClearAccountFlags()
	return au
}

// RemoveAccountFlagIDs removes the "account_flags" edge to AccountFlags entities by IDs.
func (au *AccountsUpdate) RemoveAccountFlagIDs(ids ...int) *AccountsUpdate {
	au.mutation.RemoveAccountFlagIDs(ids...)
	return au
}

// RemoveAccountFlags removes "account_flags" edges to AccountFlags entities.
func (au *AccountsUpdate) RemoveAccountFlags(a ...*AccountFlags) *AccountsUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAccountFlagIDs(ids...)
}

// ClearUsers clears the "users" edge to the Users entity.
func (au *AccountsUpdate) ClearUsers() *AccountsUpdate {
	au.mutation.ClearUsers()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AccountsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AccountsUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AccountsUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AccountsUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AccountsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(accounts.Table, accounts.Columns, sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.SetField(accounts.FieldType, field.TypeString, value)
	}
	if value, ok := au.mutation.Currency(); ok {
		_spec.SetField(accounts.FieldCurrency, field.TypeString, value)
	}
	if value, ok := au.mutation.AccountNumber(); ok {
		_spec.SetField(accounts.FieldAccountNumber, field.TypeString, value)
	}
	if value, ok := au.mutation.Issuer(); ok {
		_spec.SetField(accounts.FieldIssuer, field.TypeString, value)
	}
	if au.mutation.AccountBalancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.AccountBalancesTable,
			Columns: []string{accounts.AccountBalancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountbalances.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAccountBalancesIDs(); len(nodes) > 0 && !au.mutation.AccountBalancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.AccountBalancesTable,
			Columns: []string{accounts.AccountBalancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountbalances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AccountBalancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.AccountBalancesTable,
			Columns: []string{accounts.AccountBalancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountbalances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AccountDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.AccountDetailsTable,
			Columns: []string{accounts.AccountDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountdetails.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAccountDetailsIDs(); len(nodes) > 0 && !au.mutation.AccountDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.AccountDetailsTable,
			Columns: []string{accounts.AccountDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AccountDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.AccountDetailsTable,
			Columns: []string{accounts.AccountDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AccountFlagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.AccountFlagsTable,
			Columns: []string{accounts.AccountFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountflags.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAccountFlagsIDs(); len(nodes) > 0 && !au.mutation.AccountFlagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.AccountFlagsTable,
			Columns: []string{accounts.AccountFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountflags.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AccountFlagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.AccountFlagsTable,
			Columns: []string{accounts.AccountFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountflags.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accounts.UsersTable,
			Columns: []string{accounts.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accounts.UsersTable,
			Columns: []string{accounts.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accounts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AccountsUpdateOne is the builder for updating a single Accounts entity.
type AccountsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountsMutation
}

// SetUserID sets the "user_id" field.
func (auo *AccountsUpdateOne) SetUserID(i int) *AccountsUpdateOne {
	auo.mutation.SetUserID(i)
	return auo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auo *AccountsUpdateOne) SetNillableUserID(i *int) *AccountsUpdateOne {
	if i != nil {
		auo.SetUserID(*i)
	}
	return auo
}

// ClearUserID clears the value of the "user_id" field.
func (auo *AccountsUpdateOne) ClearUserID() *AccountsUpdateOne {
	auo.mutation.ClearUserID()
	return auo
}

// SetType sets the "type" field.
func (auo *AccountsUpdateOne) SetType(s string) *AccountsUpdateOne {
	auo.mutation.SetType(s)
	return auo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (auo *AccountsUpdateOne) SetNillableType(s *string) *AccountsUpdateOne {
	if s != nil {
		auo.SetType(*s)
	}
	return auo
}

// SetCurrency sets the "currency" field.
func (auo *AccountsUpdateOne) SetCurrency(s string) *AccountsUpdateOne {
	auo.mutation.SetCurrency(s)
	return auo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (auo *AccountsUpdateOne) SetNillableCurrency(s *string) *AccountsUpdateOne {
	if s != nil {
		auo.SetCurrency(*s)
	}
	return auo
}

// SetAccountNumber sets the "account_number" field.
func (auo *AccountsUpdateOne) SetAccountNumber(s string) *AccountsUpdateOne {
	auo.mutation.SetAccountNumber(s)
	return auo
}

// SetNillableAccountNumber sets the "account_number" field if the given value is not nil.
func (auo *AccountsUpdateOne) SetNillableAccountNumber(s *string) *AccountsUpdateOne {
	if s != nil {
		auo.SetAccountNumber(*s)
	}
	return auo
}

// SetIssuer sets the "issuer" field.
func (auo *AccountsUpdateOne) SetIssuer(s string) *AccountsUpdateOne {
	auo.mutation.SetIssuer(s)
	return auo
}

// SetNillableIssuer sets the "issuer" field if the given value is not nil.
func (auo *AccountsUpdateOne) SetNillableIssuer(s *string) *AccountsUpdateOne {
	if s != nil {
		auo.SetIssuer(*s)
	}
	return auo
}

// AddAccountBalanceIDs adds the "account_balances" edge to the AccountBalances entity by IDs.
func (auo *AccountsUpdateOne) AddAccountBalanceIDs(ids ...int) *AccountsUpdateOne {
	auo.mutation.AddAccountBalanceIDs(ids...)
	return auo
}

// AddAccountBalances adds the "account_balances" edges to the AccountBalances entity.
func (auo *AccountsUpdateOne) AddAccountBalances(a ...*AccountBalances) *AccountsUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAccountBalanceIDs(ids...)
}

// AddAccountDetailIDs adds the "account_details" edge to the AccountDetails entity by IDs.
func (auo *AccountsUpdateOne) AddAccountDetailIDs(ids ...int) *AccountsUpdateOne {
	auo.mutation.AddAccountDetailIDs(ids...)
	return auo
}

// AddAccountDetails adds the "account_details" edges to the AccountDetails entity.
func (auo *AccountsUpdateOne) AddAccountDetails(a ...*AccountDetails) *AccountsUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAccountDetailIDs(ids...)
}

// AddAccountFlagIDs adds the "account_flags" edge to the AccountFlags entity by IDs.
func (auo *AccountsUpdateOne) AddAccountFlagIDs(ids ...int) *AccountsUpdateOne {
	auo.mutation.AddAccountFlagIDs(ids...)
	return auo
}

// AddAccountFlags adds the "account_flags" edges to the AccountFlags entity.
func (auo *AccountsUpdateOne) AddAccountFlags(a ...*AccountFlags) *AccountsUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAccountFlagIDs(ids...)
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (auo *AccountsUpdateOne) SetUsersID(id int) *AccountsUpdateOne {
	auo.mutation.SetUsersID(id)
	return auo
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (auo *AccountsUpdateOne) SetNillableUsersID(id *int) *AccountsUpdateOne {
	if id != nil {
		auo = auo.SetUsersID(*id)
	}
	return auo
}

// SetUsers sets the "users" edge to the Users entity.
func (auo *AccountsUpdateOne) SetUsers(u *Users) *AccountsUpdateOne {
	return auo.SetUsersID(u.ID)
}

// Mutation returns the AccountsMutation object of the builder.
func (auo *AccountsUpdateOne) Mutation() *AccountsMutation {
	return auo.mutation
}

// ClearAccountBalances clears all "account_balances" edges to the AccountBalances entity.
func (auo *AccountsUpdateOne) ClearAccountBalances() *AccountsUpdateOne {
	auo.mutation.ClearAccountBalances()
	return auo
}

// RemoveAccountBalanceIDs removes the "account_balances" edge to AccountBalances entities by IDs.
func (auo *AccountsUpdateOne) RemoveAccountBalanceIDs(ids ...int) *AccountsUpdateOne {
	auo.mutation.RemoveAccountBalanceIDs(ids...)
	return auo
}

// RemoveAccountBalances removes "account_balances" edges to AccountBalances entities.
func (auo *AccountsUpdateOne) RemoveAccountBalances(a ...*AccountBalances) *AccountsUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAccountBalanceIDs(ids...)
}

// ClearAccountDetails clears all "account_details" edges to the AccountDetails entity.
func (auo *AccountsUpdateOne) ClearAccountDetails() *AccountsUpdateOne {
	auo.mutation.ClearAccountDetails()
	return auo
}

// RemoveAccountDetailIDs removes the "account_details" edge to AccountDetails entities by IDs.
func (auo *AccountsUpdateOne) RemoveAccountDetailIDs(ids ...int) *AccountsUpdateOne {
	auo.mutation.RemoveAccountDetailIDs(ids...)
	return auo
}

// RemoveAccountDetails removes "account_details" edges to AccountDetails entities.
func (auo *AccountsUpdateOne) RemoveAccountDetails(a ...*AccountDetails) *AccountsUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAccountDetailIDs(ids...)
}

// ClearAccountFlags clears all "account_flags" edges to the AccountFlags entity.
func (auo *AccountsUpdateOne) ClearAccountFlags() *AccountsUpdateOne {
	auo.mutation.ClearAccountFlags()
	return auo
}

// RemoveAccountFlagIDs removes the "account_flags" edge to AccountFlags entities by IDs.
func (auo *AccountsUpdateOne) RemoveAccountFlagIDs(ids ...int) *AccountsUpdateOne {
	auo.mutation.RemoveAccountFlagIDs(ids...)
	return auo
}

// RemoveAccountFlags removes "account_flags" edges to AccountFlags entities.
func (auo *AccountsUpdateOne) RemoveAccountFlags(a ...*AccountFlags) *AccountsUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAccountFlagIDs(ids...)
}

// ClearUsers clears the "users" edge to the Users entity.
func (auo *AccountsUpdateOne) ClearUsers() *AccountsUpdateOne {
	auo.mutation.ClearUsers()
	return auo
}

// Where appends a list predicates to the AccountsUpdate builder.
func (auo *AccountsUpdateOne) Where(ps ...predicate.Accounts) *AccountsUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AccountsUpdateOne) Select(field string, fields ...string) *AccountsUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Accounts entity.
func (auo *AccountsUpdateOne) Save(ctx context.Context) (*Accounts, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AccountsUpdateOne) SaveX(ctx context.Context) *Accounts {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AccountsUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AccountsUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AccountsUpdateOne) sqlSave(ctx context.Context) (_node *Accounts, err error) {
	_spec := sqlgraph.NewUpdateSpec(accounts.Table, accounts.Columns, sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Accounts.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accounts.FieldID)
		for _, f := range fields {
			if !accounts.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accounts.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.SetField(accounts.FieldType, field.TypeString, value)
	}
	if value, ok := auo.mutation.Currency(); ok {
		_spec.SetField(accounts.FieldCurrency, field.TypeString, value)
	}
	if value, ok := auo.mutation.AccountNumber(); ok {
		_spec.SetField(accounts.FieldAccountNumber, field.TypeString, value)
	}
	if value, ok := auo.mutation.Issuer(); ok {
		_spec.SetField(accounts.FieldIssuer, field.TypeString, value)
	}
	if auo.mutation.AccountBalancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.AccountBalancesTable,
			Columns: []string{accounts.AccountBalancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountbalances.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAccountBalancesIDs(); len(nodes) > 0 && !auo.mutation.AccountBalancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.AccountBalancesTable,
			Columns: []string{accounts.AccountBalancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountbalances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AccountBalancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.AccountBalancesTable,
			Columns: []string{accounts.AccountBalancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountbalances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AccountDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.AccountDetailsTable,
			Columns: []string{accounts.AccountDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountdetails.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAccountDetailsIDs(); len(nodes) > 0 && !auo.mutation.AccountDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.AccountDetailsTable,
			Columns: []string{accounts.AccountDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AccountDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.AccountDetailsTable,
			Columns: []string{accounts.AccountDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AccountFlagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.AccountFlagsTable,
			Columns: []string{accounts.AccountFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountflags.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAccountFlagsIDs(); len(nodes) > 0 && !auo.mutation.AccountFlagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.AccountFlagsTable,
			Columns: []string{accounts.AccountFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountflags.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AccountFlagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.AccountFlagsTable,
			Columns: []string{accounts.AccountFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountflags.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accounts.UsersTable,
			Columns: []string{accounts.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accounts.UsersTable,
			Columns: []string{accounts.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Accounts{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accounts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
