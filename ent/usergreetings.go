// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/usergreetings"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// UserGreetings is the model entity for the UserGreetings schema.
type UserGreetings struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Greeting holds the value of the "greeting" field.
	Greeting string `json:"greeting,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserGreetingsQuery when eager-loading is set.
	Edges        UserGreetingsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserGreetingsEdges holds the relations/edges for other nodes in the graph.
type UserGreetingsEdges struct {
	// Users holds the value of the users edge.
	Users *Users `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserGreetingsEdges) UsersOrErr() (*Users, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: users.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserGreetings) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usergreetings.FieldID, usergreetings.FieldUserID:
			values[i] = new(sql.NullInt64)
		case usergreetings.FieldGreeting:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserGreetings fields.
func (ug *UserGreetings) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usergreetings.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ug.ID = int(value.Int64)
		case usergreetings.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ug.UserID = int(value.Int64)
			}
		case usergreetings.FieldGreeting:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field greeting", values[i])
			} else if value.Valid {
				ug.Greeting = value.String
			}
		default:
			ug.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserGreetings.
// This includes values selected through modifiers, order, etc.
func (ug *UserGreetings) Value(name string) (ent.Value, error) {
	return ug.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the UserGreetings entity.
func (ug *UserGreetings) QueryUsers() *UsersQuery {
	return NewUserGreetingsClient(ug.config).QueryUsers(ug)
}

// Update returns a builder for updating this UserGreetings.
// Note that you need to call UserGreetings.Unwrap() before calling this method if this UserGreetings
// was returned from a transaction, and the transaction was committed or rolled back.
func (ug *UserGreetings) Update() *UserGreetingsUpdateOne {
	return NewUserGreetingsClient(ug.config).UpdateOne(ug)
}

// Unwrap unwraps the UserGreetings entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ug *UserGreetings) Unwrap() *UserGreetings {
	_tx, ok := ug.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserGreetings is not a transactional entity")
	}
	ug.config.driver = _tx.drv
	return ug
}

// String implements the fmt.Stringer.
func (ug *UserGreetings) String() string {
	var builder strings.Builder
	builder.WriteString("UserGreetings(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ug.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ug.UserID))
	builder.WriteString(", ")
	builder.WriteString("greeting=")
	builder.WriteString(ug.Greeting)
	builder.WriteByte(')')
	return builder.String()
}

// UserGreetingsSlice is a parsable slice of UserGreetings.
type UserGreetingsSlice []*UserGreetings
