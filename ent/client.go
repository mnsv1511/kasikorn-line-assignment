// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/mnsv1511/kasikorn-line-assignment/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountbalances"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountdetails"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountflags"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accounts"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/banners"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcarddesign"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcarddetails"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcards"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcardstatus"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/transactions"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/usergreetings"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AccountBalances is the client for interacting with the AccountBalances builders.
	AccountBalances *AccountBalancesClient
	// AccountDetails is the client for interacting with the AccountDetails builders.
	AccountDetails *AccountDetailsClient
	// AccountFlags is the client for interacting with the AccountFlags builders.
	AccountFlags *AccountFlagsClient
	// Accounts is the client for interacting with the Accounts builders.
	Accounts *AccountsClient
	// Banners is the client for interacting with the Banners builders.
	Banners *BannersClient
	// DebitCardDesign is the client for interacting with the DebitCardDesign builders.
	DebitCardDesign *DebitCardDesignClient
	// DebitCardDetails is the client for interacting with the DebitCardDetails builders.
	DebitCardDetails *DebitCardDetailsClient
	// DebitCardStatus is the client for interacting with the DebitCardStatus builders.
	DebitCardStatus *DebitCardStatusClient
	// DebitCards is the client for interacting with the DebitCards builders.
	DebitCards *DebitCardsClient
	// Transactions is the client for interacting with the Transactions builders.
	Transactions *TransactionsClient
	// UserGreetings is the client for interacting with the UserGreetings builders.
	UserGreetings *UserGreetingsClient
	// Users is the client for interacting with the Users builders.
	Users *UsersClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AccountBalances = NewAccountBalancesClient(c.config)
	c.AccountDetails = NewAccountDetailsClient(c.config)
	c.AccountFlags = NewAccountFlagsClient(c.config)
	c.Accounts = NewAccountsClient(c.config)
	c.Banners = NewBannersClient(c.config)
	c.DebitCardDesign = NewDebitCardDesignClient(c.config)
	c.DebitCardDetails = NewDebitCardDetailsClient(c.config)
	c.DebitCardStatus = NewDebitCardStatusClient(c.config)
	c.DebitCards = NewDebitCardsClient(c.config)
	c.Transactions = NewTransactionsClient(c.config)
	c.UserGreetings = NewUserGreetingsClient(c.config)
	c.Users = NewUsersClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		AccountBalances:  NewAccountBalancesClient(cfg),
		AccountDetails:   NewAccountDetailsClient(cfg),
		AccountFlags:     NewAccountFlagsClient(cfg),
		Accounts:         NewAccountsClient(cfg),
		Banners:          NewBannersClient(cfg),
		DebitCardDesign:  NewDebitCardDesignClient(cfg),
		DebitCardDetails: NewDebitCardDetailsClient(cfg),
		DebitCardStatus:  NewDebitCardStatusClient(cfg),
		DebitCards:       NewDebitCardsClient(cfg),
		Transactions:     NewTransactionsClient(cfg),
		UserGreetings:    NewUserGreetingsClient(cfg),
		Users:            NewUsersClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		AccountBalances:  NewAccountBalancesClient(cfg),
		AccountDetails:   NewAccountDetailsClient(cfg),
		AccountFlags:     NewAccountFlagsClient(cfg),
		Accounts:         NewAccountsClient(cfg),
		Banners:          NewBannersClient(cfg),
		DebitCardDesign:  NewDebitCardDesignClient(cfg),
		DebitCardDetails: NewDebitCardDetailsClient(cfg),
		DebitCardStatus:  NewDebitCardStatusClient(cfg),
		DebitCards:       NewDebitCardsClient(cfg),
		Transactions:     NewTransactionsClient(cfg),
		UserGreetings:    NewUserGreetingsClient(cfg),
		Users:            NewUsersClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AccountBalances.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AccountBalances, c.AccountDetails, c.AccountFlags, c.Accounts, c.Banners,
		c.DebitCardDesign, c.DebitCardDetails, c.DebitCardStatus, c.DebitCards,
		c.Transactions, c.UserGreetings, c.Users,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AccountBalances, c.AccountDetails, c.AccountFlags, c.Accounts, c.Banners,
		c.DebitCardDesign, c.DebitCardDetails, c.DebitCardStatus, c.DebitCards,
		c.Transactions, c.UserGreetings, c.Users,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AccountBalancesMutation:
		return c.AccountBalances.mutate(ctx, m)
	case *AccountDetailsMutation:
		return c.AccountDetails.mutate(ctx, m)
	case *AccountFlagsMutation:
		return c.AccountFlags.mutate(ctx, m)
	case *AccountsMutation:
		return c.Accounts.mutate(ctx, m)
	case *BannersMutation:
		return c.Banners.mutate(ctx, m)
	case *DebitCardDesignMutation:
		return c.DebitCardDesign.mutate(ctx, m)
	case *DebitCardDetailsMutation:
		return c.DebitCardDetails.mutate(ctx, m)
	case *DebitCardStatusMutation:
		return c.DebitCardStatus.mutate(ctx, m)
	case *DebitCardsMutation:
		return c.DebitCards.mutate(ctx, m)
	case *TransactionsMutation:
		return c.Transactions.mutate(ctx, m)
	case *UserGreetingsMutation:
		return c.UserGreetings.mutate(ctx, m)
	case *UsersMutation:
		return c.Users.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AccountBalancesClient is a client for the AccountBalances schema.
type AccountBalancesClient struct {
	config
}

// NewAccountBalancesClient returns a client for the AccountBalances from the given config.
func NewAccountBalancesClient(c config) *AccountBalancesClient {
	return &AccountBalancesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `accountbalances.Hooks(f(g(h())))`.
func (c *AccountBalancesClient) Use(hooks ...Hook) {
	c.hooks.AccountBalances = append(c.hooks.AccountBalances, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `accountbalances.Intercept(f(g(h())))`.
func (c *AccountBalancesClient) Intercept(interceptors ...Interceptor) {
	c.inters.AccountBalances = append(c.inters.AccountBalances, interceptors...)
}

// Create returns a builder for creating a AccountBalances entity.
func (c *AccountBalancesClient) Create() *AccountBalancesCreate {
	mutation := newAccountBalancesMutation(c.config, OpCreate)
	return &AccountBalancesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AccountBalances entities.
func (c *AccountBalancesClient) CreateBulk(builders ...*AccountBalancesCreate) *AccountBalancesCreateBulk {
	return &AccountBalancesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AccountBalancesClient) MapCreateBulk(slice any, setFunc func(*AccountBalancesCreate, int)) *AccountBalancesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AccountBalancesCreateBulk{err: fmt.Errorf("calling to AccountBalancesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AccountBalancesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AccountBalancesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AccountBalances.
func (c *AccountBalancesClient) Update() *AccountBalancesUpdate {
	mutation := newAccountBalancesMutation(c.config, OpUpdate)
	return &AccountBalancesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccountBalancesClient) UpdateOne(ab *AccountBalances) *AccountBalancesUpdateOne {
	mutation := newAccountBalancesMutation(c.config, OpUpdateOne, withAccountBalances(ab))
	return &AccountBalancesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccountBalancesClient) UpdateOneID(id int) *AccountBalancesUpdateOne {
	mutation := newAccountBalancesMutation(c.config, OpUpdateOne, withAccountBalancesID(id))
	return &AccountBalancesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AccountBalances.
func (c *AccountBalancesClient) Delete() *AccountBalancesDelete {
	mutation := newAccountBalancesMutation(c.config, OpDelete)
	return &AccountBalancesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccountBalancesClient) DeleteOne(ab *AccountBalances) *AccountBalancesDeleteOne {
	return c.DeleteOneID(ab.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccountBalancesClient) DeleteOneID(id int) *AccountBalancesDeleteOne {
	builder := c.Delete().Where(accountbalances.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccountBalancesDeleteOne{builder}
}

// Query returns a query builder for AccountBalances.
func (c *AccountBalancesClient) Query() *AccountBalancesQuery {
	return &AccountBalancesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAccountBalances},
		inters: c.Interceptors(),
	}
}

// Get returns a AccountBalances entity by its id.
func (c *AccountBalancesClient) Get(ctx context.Context, id int) (*AccountBalances, error) {
	return c.Query().Where(accountbalances.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccountBalancesClient) GetX(ctx context.Context, id int) *AccountBalances {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a AccountBalances.
func (c *AccountBalancesClient) QueryUsers(ab *AccountBalances) *UsersQuery {
	query := (&UsersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ab.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accountbalances.Table, accountbalances.FieldID, id),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, accountbalances.UsersTable, accountbalances.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(ab.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccounts queries the accounts edge of a AccountBalances.
func (c *AccountBalancesClient) QueryAccounts(ab *AccountBalances) *AccountsQuery {
	query := (&AccountsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ab.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accountbalances.Table, accountbalances.FieldID, id),
			sqlgraph.To(accounts.Table, accounts.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, accountbalances.AccountsTable, accountbalances.AccountsColumn),
		)
		fromV = sqlgraph.Neighbors(ab.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AccountBalancesClient) Hooks() []Hook {
	return c.hooks.AccountBalances
}

// Interceptors returns the client interceptors.
func (c *AccountBalancesClient) Interceptors() []Interceptor {
	return c.inters.AccountBalances
}

func (c *AccountBalancesClient) mutate(ctx context.Context, m *AccountBalancesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AccountBalancesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AccountBalancesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AccountBalancesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AccountBalancesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AccountBalances mutation op: %q", m.Op())
	}
}

// AccountDetailsClient is a client for the AccountDetails schema.
type AccountDetailsClient struct {
	config
}

// NewAccountDetailsClient returns a client for the AccountDetails from the given config.
func NewAccountDetailsClient(c config) *AccountDetailsClient {
	return &AccountDetailsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `accountdetails.Hooks(f(g(h())))`.
func (c *AccountDetailsClient) Use(hooks ...Hook) {
	c.hooks.AccountDetails = append(c.hooks.AccountDetails, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `accountdetails.Intercept(f(g(h())))`.
func (c *AccountDetailsClient) Intercept(interceptors ...Interceptor) {
	c.inters.AccountDetails = append(c.inters.AccountDetails, interceptors...)
}

// Create returns a builder for creating a AccountDetails entity.
func (c *AccountDetailsClient) Create() *AccountDetailsCreate {
	mutation := newAccountDetailsMutation(c.config, OpCreate)
	return &AccountDetailsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AccountDetails entities.
func (c *AccountDetailsClient) CreateBulk(builders ...*AccountDetailsCreate) *AccountDetailsCreateBulk {
	return &AccountDetailsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AccountDetailsClient) MapCreateBulk(slice any, setFunc func(*AccountDetailsCreate, int)) *AccountDetailsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AccountDetailsCreateBulk{err: fmt.Errorf("calling to AccountDetailsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AccountDetailsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AccountDetailsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AccountDetails.
func (c *AccountDetailsClient) Update() *AccountDetailsUpdate {
	mutation := newAccountDetailsMutation(c.config, OpUpdate)
	return &AccountDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccountDetailsClient) UpdateOne(ad *AccountDetails) *AccountDetailsUpdateOne {
	mutation := newAccountDetailsMutation(c.config, OpUpdateOne, withAccountDetails(ad))
	return &AccountDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccountDetailsClient) UpdateOneID(id int) *AccountDetailsUpdateOne {
	mutation := newAccountDetailsMutation(c.config, OpUpdateOne, withAccountDetailsID(id))
	return &AccountDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AccountDetails.
func (c *AccountDetailsClient) Delete() *AccountDetailsDelete {
	mutation := newAccountDetailsMutation(c.config, OpDelete)
	return &AccountDetailsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccountDetailsClient) DeleteOne(ad *AccountDetails) *AccountDetailsDeleteOne {
	return c.DeleteOneID(ad.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccountDetailsClient) DeleteOneID(id int) *AccountDetailsDeleteOne {
	builder := c.Delete().Where(accountdetails.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccountDetailsDeleteOne{builder}
}

// Query returns a query builder for AccountDetails.
func (c *AccountDetailsClient) Query() *AccountDetailsQuery {
	return &AccountDetailsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAccountDetails},
		inters: c.Interceptors(),
	}
}

// Get returns a AccountDetails entity by its id.
func (c *AccountDetailsClient) Get(ctx context.Context, id int) (*AccountDetails, error) {
	return c.Query().Where(accountdetails.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccountDetailsClient) GetX(ctx context.Context, id int) *AccountDetails {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a AccountDetails.
func (c *AccountDetailsClient) QueryUsers(ad *AccountDetails) *UsersQuery {
	query := (&UsersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ad.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accountdetails.Table, accountdetails.FieldID, id),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, accountdetails.UsersTable, accountdetails.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(ad.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccounts queries the accounts edge of a AccountDetails.
func (c *AccountDetailsClient) QueryAccounts(ad *AccountDetails) *AccountsQuery {
	query := (&AccountsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ad.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accountdetails.Table, accountdetails.FieldID, id),
			sqlgraph.To(accounts.Table, accounts.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, accountdetails.AccountsTable, accountdetails.AccountsColumn),
		)
		fromV = sqlgraph.Neighbors(ad.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AccountDetailsClient) Hooks() []Hook {
	return c.hooks.AccountDetails
}

// Interceptors returns the client interceptors.
func (c *AccountDetailsClient) Interceptors() []Interceptor {
	return c.inters.AccountDetails
}

func (c *AccountDetailsClient) mutate(ctx context.Context, m *AccountDetailsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AccountDetailsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AccountDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AccountDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AccountDetailsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AccountDetails mutation op: %q", m.Op())
	}
}

// AccountFlagsClient is a client for the AccountFlags schema.
type AccountFlagsClient struct {
	config
}

// NewAccountFlagsClient returns a client for the AccountFlags from the given config.
func NewAccountFlagsClient(c config) *AccountFlagsClient {
	return &AccountFlagsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `accountflags.Hooks(f(g(h())))`.
func (c *AccountFlagsClient) Use(hooks ...Hook) {
	c.hooks.AccountFlags = append(c.hooks.AccountFlags, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `accountflags.Intercept(f(g(h())))`.
func (c *AccountFlagsClient) Intercept(interceptors ...Interceptor) {
	c.inters.AccountFlags = append(c.inters.AccountFlags, interceptors...)
}

// Create returns a builder for creating a AccountFlags entity.
func (c *AccountFlagsClient) Create() *AccountFlagsCreate {
	mutation := newAccountFlagsMutation(c.config, OpCreate)
	return &AccountFlagsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AccountFlags entities.
func (c *AccountFlagsClient) CreateBulk(builders ...*AccountFlagsCreate) *AccountFlagsCreateBulk {
	return &AccountFlagsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AccountFlagsClient) MapCreateBulk(slice any, setFunc func(*AccountFlagsCreate, int)) *AccountFlagsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AccountFlagsCreateBulk{err: fmt.Errorf("calling to AccountFlagsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AccountFlagsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AccountFlagsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AccountFlags.
func (c *AccountFlagsClient) Update() *AccountFlagsUpdate {
	mutation := newAccountFlagsMutation(c.config, OpUpdate)
	return &AccountFlagsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccountFlagsClient) UpdateOne(af *AccountFlags) *AccountFlagsUpdateOne {
	mutation := newAccountFlagsMutation(c.config, OpUpdateOne, withAccountFlags(af))
	return &AccountFlagsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccountFlagsClient) UpdateOneID(id int) *AccountFlagsUpdateOne {
	mutation := newAccountFlagsMutation(c.config, OpUpdateOne, withAccountFlagsID(id))
	return &AccountFlagsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AccountFlags.
func (c *AccountFlagsClient) Delete() *AccountFlagsDelete {
	mutation := newAccountFlagsMutation(c.config, OpDelete)
	return &AccountFlagsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccountFlagsClient) DeleteOne(af *AccountFlags) *AccountFlagsDeleteOne {
	return c.DeleteOneID(af.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccountFlagsClient) DeleteOneID(id int) *AccountFlagsDeleteOne {
	builder := c.Delete().Where(accountflags.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccountFlagsDeleteOne{builder}
}

// Query returns a query builder for AccountFlags.
func (c *AccountFlagsClient) Query() *AccountFlagsQuery {
	return &AccountFlagsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAccountFlags},
		inters: c.Interceptors(),
	}
}

// Get returns a AccountFlags entity by its id.
func (c *AccountFlagsClient) Get(ctx context.Context, id int) (*AccountFlags, error) {
	return c.Query().Where(accountflags.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccountFlagsClient) GetX(ctx context.Context, id int) *AccountFlags {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a AccountFlags.
func (c *AccountFlagsClient) QueryUsers(af *AccountFlags) *UsersQuery {
	query := (&UsersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := af.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accountflags.Table, accountflags.FieldID, id),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, accountflags.UsersTable, accountflags.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(af.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccounts queries the accounts edge of a AccountFlags.
func (c *AccountFlagsClient) QueryAccounts(af *AccountFlags) *AccountsQuery {
	query := (&AccountsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := af.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accountflags.Table, accountflags.FieldID, id),
			sqlgraph.To(accounts.Table, accounts.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, accountflags.AccountsTable, accountflags.AccountsColumn),
		)
		fromV = sqlgraph.Neighbors(af.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AccountFlagsClient) Hooks() []Hook {
	return c.hooks.AccountFlags
}

// Interceptors returns the client interceptors.
func (c *AccountFlagsClient) Interceptors() []Interceptor {
	return c.inters.AccountFlags
}

func (c *AccountFlagsClient) mutate(ctx context.Context, m *AccountFlagsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AccountFlagsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AccountFlagsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AccountFlagsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AccountFlagsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AccountFlags mutation op: %q", m.Op())
	}
}

// AccountsClient is a client for the Accounts schema.
type AccountsClient struct {
	config
}

// NewAccountsClient returns a client for the Accounts from the given config.
func NewAccountsClient(c config) *AccountsClient {
	return &AccountsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `accounts.Hooks(f(g(h())))`.
func (c *AccountsClient) Use(hooks ...Hook) {
	c.hooks.Accounts = append(c.hooks.Accounts, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `accounts.Intercept(f(g(h())))`.
func (c *AccountsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Accounts = append(c.inters.Accounts, interceptors...)
}

// Create returns a builder for creating a Accounts entity.
func (c *AccountsClient) Create() *AccountsCreate {
	mutation := newAccountsMutation(c.config, OpCreate)
	return &AccountsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Accounts entities.
func (c *AccountsClient) CreateBulk(builders ...*AccountsCreate) *AccountsCreateBulk {
	return &AccountsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AccountsClient) MapCreateBulk(slice any, setFunc func(*AccountsCreate, int)) *AccountsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AccountsCreateBulk{err: fmt.Errorf("calling to AccountsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AccountsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AccountsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Accounts.
func (c *AccountsClient) Update() *AccountsUpdate {
	mutation := newAccountsMutation(c.config, OpUpdate)
	return &AccountsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccountsClient) UpdateOne(a *Accounts) *AccountsUpdateOne {
	mutation := newAccountsMutation(c.config, OpUpdateOne, withAccounts(a))
	return &AccountsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccountsClient) UpdateOneID(id int) *AccountsUpdateOne {
	mutation := newAccountsMutation(c.config, OpUpdateOne, withAccountsID(id))
	return &AccountsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Accounts.
func (c *AccountsClient) Delete() *AccountsDelete {
	mutation := newAccountsMutation(c.config, OpDelete)
	return &AccountsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccountsClient) DeleteOne(a *Accounts) *AccountsDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccountsClient) DeleteOneID(id int) *AccountsDeleteOne {
	builder := c.Delete().Where(accounts.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccountsDeleteOne{builder}
}

// Query returns a query builder for Accounts.
func (c *AccountsClient) Query() *AccountsQuery {
	return &AccountsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAccounts},
		inters: c.Interceptors(),
	}
}

// Get returns a Accounts entity by its id.
func (c *AccountsClient) Get(ctx context.Context, id int) (*Accounts, error) {
	return c.Query().Where(accounts.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccountsClient) GetX(ctx context.Context, id int) *Accounts {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAccountBalances queries the account_balances edge of a Accounts.
func (c *AccountsClient) QueryAccountBalances(a *Accounts) *AccountBalancesQuery {
	query := (&AccountBalancesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accounts.Table, accounts.FieldID, id),
			sqlgraph.To(accountbalances.Table, accountbalances.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, accounts.AccountBalancesTable, accounts.AccountBalancesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccountDetails queries the account_details edge of a Accounts.
func (c *AccountsClient) QueryAccountDetails(a *Accounts) *AccountDetailsQuery {
	query := (&AccountDetailsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accounts.Table, accounts.FieldID, id),
			sqlgraph.To(accountdetails.Table, accountdetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, accounts.AccountDetailsTable, accounts.AccountDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccountFlags queries the account_flags edge of a Accounts.
func (c *AccountsClient) QueryAccountFlags(a *Accounts) *AccountFlagsQuery {
	query := (&AccountFlagsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accounts.Table, accounts.FieldID, id),
			sqlgraph.To(accountflags.Table, accountflags.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, accounts.AccountFlagsTable, accounts.AccountFlagsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a Accounts.
func (c *AccountsClient) QueryUsers(a *Accounts) *UsersQuery {
	query := (&UsersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accounts.Table, accounts.FieldID, id),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, accounts.UsersTable, accounts.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AccountsClient) Hooks() []Hook {
	return c.hooks.Accounts
}

// Interceptors returns the client interceptors.
func (c *AccountsClient) Interceptors() []Interceptor {
	return c.inters.Accounts
}

func (c *AccountsClient) mutate(ctx context.Context, m *AccountsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AccountsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AccountsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AccountsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AccountsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Accounts mutation op: %q", m.Op())
	}
}

// BannersClient is a client for the Banners schema.
type BannersClient struct {
	config
}

// NewBannersClient returns a client for the Banners from the given config.
func NewBannersClient(c config) *BannersClient {
	return &BannersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `banners.Hooks(f(g(h())))`.
func (c *BannersClient) Use(hooks ...Hook) {
	c.hooks.Banners = append(c.hooks.Banners, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `banners.Intercept(f(g(h())))`.
func (c *BannersClient) Intercept(interceptors ...Interceptor) {
	c.inters.Banners = append(c.inters.Banners, interceptors...)
}

// Create returns a builder for creating a Banners entity.
func (c *BannersClient) Create() *BannersCreate {
	mutation := newBannersMutation(c.config, OpCreate)
	return &BannersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Banners entities.
func (c *BannersClient) CreateBulk(builders ...*BannersCreate) *BannersCreateBulk {
	return &BannersCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BannersClient) MapCreateBulk(slice any, setFunc func(*BannersCreate, int)) *BannersCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BannersCreateBulk{err: fmt.Errorf("calling to BannersClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BannersCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BannersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Banners.
func (c *BannersClient) Update() *BannersUpdate {
	mutation := newBannersMutation(c.config, OpUpdate)
	return &BannersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BannersClient) UpdateOne(b *Banners) *BannersUpdateOne {
	mutation := newBannersMutation(c.config, OpUpdateOne, withBanners(b))
	return &BannersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BannersClient) UpdateOneID(id int) *BannersUpdateOne {
	mutation := newBannersMutation(c.config, OpUpdateOne, withBannersID(id))
	return &BannersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Banners.
func (c *BannersClient) Delete() *BannersDelete {
	mutation := newBannersMutation(c.config, OpDelete)
	return &BannersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BannersClient) DeleteOne(b *Banners) *BannersDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BannersClient) DeleteOneID(id int) *BannersDeleteOne {
	builder := c.Delete().Where(banners.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BannersDeleteOne{builder}
}

// Query returns a query builder for Banners.
func (c *BannersClient) Query() *BannersQuery {
	return &BannersQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBanners},
		inters: c.Interceptors(),
	}
}

// Get returns a Banners entity by its id.
func (c *BannersClient) Get(ctx context.Context, id int) (*Banners, error) {
	return c.Query().Where(banners.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BannersClient) GetX(ctx context.Context, id int) *Banners {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Banners.
func (c *BannersClient) QueryUsers(b *Banners) *UsersQuery {
	query := (&UsersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(banners.Table, banners.FieldID, id),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, banners.UsersTable, banners.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BannersClient) Hooks() []Hook {
	return c.hooks.Banners
}

// Interceptors returns the client interceptors.
func (c *BannersClient) Interceptors() []Interceptor {
	return c.inters.Banners
}

func (c *BannersClient) mutate(ctx context.Context, m *BannersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BannersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BannersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BannersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BannersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Banners mutation op: %q", m.Op())
	}
}

// DebitCardDesignClient is a client for the DebitCardDesign schema.
type DebitCardDesignClient struct {
	config
}

// NewDebitCardDesignClient returns a client for the DebitCardDesign from the given config.
func NewDebitCardDesignClient(c config) *DebitCardDesignClient {
	return &DebitCardDesignClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `debitcarddesign.Hooks(f(g(h())))`.
func (c *DebitCardDesignClient) Use(hooks ...Hook) {
	c.hooks.DebitCardDesign = append(c.hooks.DebitCardDesign, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `debitcarddesign.Intercept(f(g(h())))`.
func (c *DebitCardDesignClient) Intercept(interceptors ...Interceptor) {
	c.inters.DebitCardDesign = append(c.inters.DebitCardDesign, interceptors...)
}

// Create returns a builder for creating a DebitCardDesign entity.
func (c *DebitCardDesignClient) Create() *DebitCardDesignCreate {
	mutation := newDebitCardDesignMutation(c.config, OpCreate)
	return &DebitCardDesignCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DebitCardDesign entities.
func (c *DebitCardDesignClient) CreateBulk(builders ...*DebitCardDesignCreate) *DebitCardDesignCreateBulk {
	return &DebitCardDesignCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DebitCardDesignClient) MapCreateBulk(slice any, setFunc func(*DebitCardDesignCreate, int)) *DebitCardDesignCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DebitCardDesignCreateBulk{err: fmt.Errorf("calling to DebitCardDesignClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DebitCardDesignCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DebitCardDesignCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DebitCardDesign.
func (c *DebitCardDesignClient) Update() *DebitCardDesignUpdate {
	mutation := newDebitCardDesignMutation(c.config, OpUpdate)
	return &DebitCardDesignUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DebitCardDesignClient) UpdateOne(dcd *DebitCardDesign) *DebitCardDesignUpdateOne {
	mutation := newDebitCardDesignMutation(c.config, OpUpdateOne, withDebitCardDesign(dcd))
	return &DebitCardDesignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DebitCardDesignClient) UpdateOneID(id int) *DebitCardDesignUpdateOne {
	mutation := newDebitCardDesignMutation(c.config, OpUpdateOne, withDebitCardDesignID(id))
	return &DebitCardDesignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DebitCardDesign.
func (c *DebitCardDesignClient) Delete() *DebitCardDesignDelete {
	mutation := newDebitCardDesignMutation(c.config, OpDelete)
	return &DebitCardDesignDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DebitCardDesignClient) DeleteOne(dcd *DebitCardDesign) *DebitCardDesignDeleteOne {
	return c.DeleteOneID(dcd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DebitCardDesignClient) DeleteOneID(id int) *DebitCardDesignDeleteOne {
	builder := c.Delete().Where(debitcarddesign.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DebitCardDesignDeleteOne{builder}
}

// Query returns a query builder for DebitCardDesign.
func (c *DebitCardDesignClient) Query() *DebitCardDesignQuery {
	return &DebitCardDesignQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDebitCardDesign},
		inters: c.Interceptors(),
	}
}

// Get returns a DebitCardDesign entity by its id.
func (c *DebitCardDesignClient) Get(ctx context.Context, id int) (*DebitCardDesign, error) {
	return c.Query().Where(debitcarddesign.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DebitCardDesignClient) GetX(ctx context.Context, id int) *DebitCardDesign {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a DebitCardDesign.
func (c *DebitCardDesignClient) QueryUsers(dcd *DebitCardDesign) *UsersQuery {
	query := (&UsersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dcd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(debitcarddesign.Table, debitcarddesign.FieldID, id),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, debitcarddesign.UsersTable, debitcarddesign.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(dcd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDebitCards queries the debit_cards edge of a DebitCardDesign.
func (c *DebitCardDesignClient) QueryDebitCards(dcd *DebitCardDesign) *DebitCardsQuery {
	query := (&DebitCardsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dcd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(debitcarddesign.Table, debitcarddesign.FieldID, id),
			sqlgraph.To(debitcards.Table, debitcards.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, debitcarddesign.DebitCardsTable, debitcarddesign.DebitCardsColumn),
		)
		fromV = sqlgraph.Neighbors(dcd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DebitCardDesignClient) Hooks() []Hook {
	return c.hooks.DebitCardDesign
}

// Interceptors returns the client interceptors.
func (c *DebitCardDesignClient) Interceptors() []Interceptor {
	return c.inters.DebitCardDesign
}

func (c *DebitCardDesignClient) mutate(ctx context.Context, m *DebitCardDesignMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DebitCardDesignCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DebitCardDesignUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DebitCardDesignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DebitCardDesignDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DebitCardDesign mutation op: %q", m.Op())
	}
}

// DebitCardDetailsClient is a client for the DebitCardDetails schema.
type DebitCardDetailsClient struct {
	config
}

// NewDebitCardDetailsClient returns a client for the DebitCardDetails from the given config.
func NewDebitCardDetailsClient(c config) *DebitCardDetailsClient {
	return &DebitCardDetailsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `debitcarddetails.Hooks(f(g(h())))`.
func (c *DebitCardDetailsClient) Use(hooks ...Hook) {
	c.hooks.DebitCardDetails = append(c.hooks.DebitCardDetails, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `debitcarddetails.Intercept(f(g(h())))`.
func (c *DebitCardDetailsClient) Intercept(interceptors ...Interceptor) {
	c.inters.DebitCardDetails = append(c.inters.DebitCardDetails, interceptors...)
}

// Create returns a builder for creating a DebitCardDetails entity.
func (c *DebitCardDetailsClient) Create() *DebitCardDetailsCreate {
	mutation := newDebitCardDetailsMutation(c.config, OpCreate)
	return &DebitCardDetailsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DebitCardDetails entities.
func (c *DebitCardDetailsClient) CreateBulk(builders ...*DebitCardDetailsCreate) *DebitCardDetailsCreateBulk {
	return &DebitCardDetailsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DebitCardDetailsClient) MapCreateBulk(slice any, setFunc func(*DebitCardDetailsCreate, int)) *DebitCardDetailsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DebitCardDetailsCreateBulk{err: fmt.Errorf("calling to DebitCardDetailsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DebitCardDetailsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DebitCardDetailsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DebitCardDetails.
func (c *DebitCardDetailsClient) Update() *DebitCardDetailsUpdate {
	mutation := newDebitCardDetailsMutation(c.config, OpUpdate)
	return &DebitCardDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DebitCardDetailsClient) UpdateOne(dcd *DebitCardDetails) *DebitCardDetailsUpdateOne {
	mutation := newDebitCardDetailsMutation(c.config, OpUpdateOne, withDebitCardDetails(dcd))
	return &DebitCardDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DebitCardDetailsClient) UpdateOneID(id int) *DebitCardDetailsUpdateOne {
	mutation := newDebitCardDetailsMutation(c.config, OpUpdateOne, withDebitCardDetailsID(id))
	return &DebitCardDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DebitCardDetails.
func (c *DebitCardDetailsClient) Delete() *DebitCardDetailsDelete {
	mutation := newDebitCardDetailsMutation(c.config, OpDelete)
	return &DebitCardDetailsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DebitCardDetailsClient) DeleteOne(dcd *DebitCardDetails) *DebitCardDetailsDeleteOne {
	return c.DeleteOneID(dcd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DebitCardDetailsClient) DeleteOneID(id int) *DebitCardDetailsDeleteOne {
	builder := c.Delete().Where(debitcarddetails.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DebitCardDetailsDeleteOne{builder}
}

// Query returns a query builder for DebitCardDetails.
func (c *DebitCardDetailsClient) Query() *DebitCardDetailsQuery {
	return &DebitCardDetailsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDebitCardDetails},
		inters: c.Interceptors(),
	}
}

// Get returns a DebitCardDetails entity by its id.
func (c *DebitCardDetailsClient) Get(ctx context.Context, id int) (*DebitCardDetails, error) {
	return c.Query().Where(debitcarddetails.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DebitCardDetailsClient) GetX(ctx context.Context, id int) *DebitCardDetails {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a DebitCardDetails.
func (c *DebitCardDetailsClient) QueryUsers(dcd *DebitCardDetails) *UsersQuery {
	query := (&UsersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dcd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(debitcarddetails.Table, debitcarddetails.FieldID, id),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, debitcarddetails.UsersTable, debitcarddetails.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(dcd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDebitCards queries the debit_cards edge of a DebitCardDetails.
func (c *DebitCardDetailsClient) QueryDebitCards(dcd *DebitCardDetails) *DebitCardsQuery {
	query := (&DebitCardsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dcd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(debitcarddetails.Table, debitcarddetails.FieldID, id),
			sqlgraph.To(debitcards.Table, debitcards.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, debitcarddetails.DebitCardsTable, debitcarddetails.DebitCardsColumn),
		)
		fromV = sqlgraph.Neighbors(dcd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DebitCardDetailsClient) Hooks() []Hook {
	return c.hooks.DebitCardDetails
}

// Interceptors returns the client interceptors.
func (c *DebitCardDetailsClient) Interceptors() []Interceptor {
	return c.inters.DebitCardDetails
}

func (c *DebitCardDetailsClient) mutate(ctx context.Context, m *DebitCardDetailsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DebitCardDetailsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DebitCardDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DebitCardDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DebitCardDetailsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DebitCardDetails mutation op: %q", m.Op())
	}
}

// DebitCardStatusClient is a client for the DebitCardStatus schema.
type DebitCardStatusClient struct {
	config
}

// NewDebitCardStatusClient returns a client for the DebitCardStatus from the given config.
func NewDebitCardStatusClient(c config) *DebitCardStatusClient {
	return &DebitCardStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `debitcardstatus.Hooks(f(g(h())))`.
func (c *DebitCardStatusClient) Use(hooks ...Hook) {
	c.hooks.DebitCardStatus = append(c.hooks.DebitCardStatus, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `debitcardstatus.Intercept(f(g(h())))`.
func (c *DebitCardStatusClient) Intercept(interceptors ...Interceptor) {
	c.inters.DebitCardStatus = append(c.inters.DebitCardStatus, interceptors...)
}

// Create returns a builder for creating a DebitCardStatus entity.
func (c *DebitCardStatusClient) Create() *DebitCardStatusCreate {
	mutation := newDebitCardStatusMutation(c.config, OpCreate)
	return &DebitCardStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DebitCardStatus entities.
func (c *DebitCardStatusClient) CreateBulk(builders ...*DebitCardStatusCreate) *DebitCardStatusCreateBulk {
	return &DebitCardStatusCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DebitCardStatusClient) MapCreateBulk(slice any, setFunc func(*DebitCardStatusCreate, int)) *DebitCardStatusCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DebitCardStatusCreateBulk{err: fmt.Errorf("calling to DebitCardStatusClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DebitCardStatusCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DebitCardStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DebitCardStatus.
func (c *DebitCardStatusClient) Update() *DebitCardStatusUpdate {
	mutation := newDebitCardStatusMutation(c.config, OpUpdate)
	return &DebitCardStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DebitCardStatusClient) UpdateOne(dcs *DebitCardStatus) *DebitCardStatusUpdateOne {
	mutation := newDebitCardStatusMutation(c.config, OpUpdateOne, withDebitCardStatus(dcs))
	return &DebitCardStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DebitCardStatusClient) UpdateOneID(id int) *DebitCardStatusUpdateOne {
	mutation := newDebitCardStatusMutation(c.config, OpUpdateOne, withDebitCardStatusID(id))
	return &DebitCardStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DebitCardStatus.
func (c *DebitCardStatusClient) Delete() *DebitCardStatusDelete {
	mutation := newDebitCardStatusMutation(c.config, OpDelete)
	return &DebitCardStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DebitCardStatusClient) DeleteOne(dcs *DebitCardStatus) *DebitCardStatusDeleteOne {
	return c.DeleteOneID(dcs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DebitCardStatusClient) DeleteOneID(id int) *DebitCardStatusDeleteOne {
	builder := c.Delete().Where(debitcardstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DebitCardStatusDeleteOne{builder}
}

// Query returns a query builder for DebitCardStatus.
func (c *DebitCardStatusClient) Query() *DebitCardStatusQuery {
	return &DebitCardStatusQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDebitCardStatus},
		inters: c.Interceptors(),
	}
}

// Get returns a DebitCardStatus entity by its id.
func (c *DebitCardStatusClient) Get(ctx context.Context, id int) (*DebitCardStatus, error) {
	return c.Query().Where(debitcardstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DebitCardStatusClient) GetX(ctx context.Context, id int) *DebitCardStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a DebitCardStatus.
func (c *DebitCardStatusClient) QueryUsers(dcs *DebitCardStatus) *UsersQuery {
	query := (&UsersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dcs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(debitcardstatus.Table, debitcardstatus.FieldID, id),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, debitcardstatus.UsersTable, debitcardstatus.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(dcs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDebitCards queries the debit_cards edge of a DebitCardStatus.
func (c *DebitCardStatusClient) QueryDebitCards(dcs *DebitCardStatus) *DebitCardsQuery {
	query := (&DebitCardsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dcs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(debitcardstatus.Table, debitcardstatus.FieldID, id),
			sqlgraph.To(debitcards.Table, debitcards.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, debitcardstatus.DebitCardsTable, debitcardstatus.DebitCardsColumn),
		)
		fromV = sqlgraph.Neighbors(dcs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DebitCardStatusClient) Hooks() []Hook {
	return c.hooks.DebitCardStatus
}

// Interceptors returns the client interceptors.
func (c *DebitCardStatusClient) Interceptors() []Interceptor {
	return c.inters.DebitCardStatus
}

func (c *DebitCardStatusClient) mutate(ctx context.Context, m *DebitCardStatusMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DebitCardStatusCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DebitCardStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DebitCardStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DebitCardStatusDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DebitCardStatus mutation op: %q", m.Op())
	}
}

// DebitCardsClient is a client for the DebitCards schema.
type DebitCardsClient struct {
	config
}

// NewDebitCardsClient returns a client for the DebitCards from the given config.
func NewDebitCardsClient(c config) *DebitCardsClient {
	return &DebitCardsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `debitcards.Hooks(f(g(h())))`.
func (c *DebitCardsClient) Use(hooks ...Hook) {
	c.hooks.DebitCards = append(c.hooks.DebitCards, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `debitcards.Intercept(f(g(h())))`.
func (c *DebitCardsClient) Intercept(interceptors ...Interceptor) {
	c.inters.DebitCards = append(c.inters.DebitCards, interceptors...)
}

// Create returns a builder for creating a DebitCards entity.
func (c *DebitCardsClient) Create() *DebitCardsCreate {
	mutation := newDebitCardsMutation(c.config, OpCreate)
	return &DebitCardsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DebitCards entities.
func (c *DebitCardsClient) CreateBulk(builders ...*DebitCardsCreate) *DebitCardsCreateBulk {
	return &DebitCardsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DebitCardsClient) MapCreateBulk(slice any, setFunc func(*DebitCardsCreate, int)) *DebitCardsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DebitCardsCreateBulk{err: fmt.Errorf("calling to DebitCardsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DebitCardsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DebitCardsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DebitCards.
func (c *DebitCardsClient) Update() *DebitCardsUpdate {
	mutation := newDebitCardsMutation(c.config, OpUpdate)
	return &DebitCardsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DebitCardsClient) UpdateOne(dc *DebitCards) *DebitCardsUpdateOne {
	mutation := newDebitCardsMutation(c.config, OpUpdateOne, withDebitCards(dc))
	return &DebitCardsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DebitCardsClient) UpdateOneID(id int) *DebitCardsUpdateOne {
	mutation := newDebitCardsMutation(c.config, OpUpdateOne, withDebitCardsID(id))
	return &DebitCardsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DebitCards.
func (c *DebitCardsClient) Delete() *DebitCardsDelete {
	mutation := newDebitCardsMutation(c.config, OpDelete)
	return &DebitCardsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DebitCardsClient) DeleteOne(dc *DebitCards) *DebitCardsDeleteOne {
	return c.DeleteOneID(dc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DebitCardsClient) DeleteOneID(id int) *DebitCardsDeleteOne {
	builder := c.Delete().Where(debitcards.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DebitCardsDeleteOne{builder}
}

// Query returns a query builder for DebitCards.
func (c *DebitCardsClient) Query() *DebitCardsQuery {
	return &DebitCardsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDebitCards},
		inters: c.Interceptors(),
	}
}

// Get returns a DebitCards entity by its id.
func (c *DebitCardsClient) Get(ctx context.Context, id int) (*DebitCards, error) {
	return c.Query().Where(debitcards.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DebitCardsClient) GetX(ctx context.Context, id int) *DebitCards {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDebitCardDesign queries the debit_card_design edge of a DebitCards.
func (c *DebitCardsClient) QueryDebitCardDesign(dc *DebitCards) *DebitCardDesignQuery {
	query := (&DebitCardDesignClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(debitcards.Table, debitcards.FieldID, id),
			sqlgraph.To(debitcarddesign.Table, debitcarddesign.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, debitcards.DebitCardDesignTable, debitcards.DebitCardDesignColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDebitCardDetails queries the debit_card_details edge of a DebitCards.
func (c *DebitCardsClient) QueryDebitCardDetails(dc *DebitCards) *DebitCardDetailsQuery {
	query := (&DebitCardDetailsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(debitcards.Table, debitcards.FieldID, id),
			sqlgraph.To(debitcarddetails.Table, debitcarddetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, debitcards.DebitCardDetailsTable, debitcards.DebitCardDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDebitCardStatus queries the debit_card_status edge of a DebitCards.
func (c *DebitCardsClient) QueryDebitCardStatus(dc *DebitCards) *DebitCardStatusQuery {
	query := (&DebitCardStatusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(debitcards.Table, debitcards.FieldID, id),
			sqlgraph.To(debitcardstatus.Table, debitcardstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, debitcards.DebitCardStatusTable, debitcards.DebitCardStatusColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a DebitCards.
func (c *DebitCardsClient) QueryUsers(dc *DebitCards) *UsersQuery {
	query := (&UsersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(debitcards.Table, debitcards.FieldID, id),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, debitcards.UsersTable, debitcards.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DebitCardsClient) Hooks() []Hook {
	return c.hooks.DebitCards
}

// Interceptors returns the client interceptors.
func (c *DebitCardsClient) Interceptors() []Interceptor {
	return c.inters.DebitCards
}

func (c *DebitCardsClient) mutate(ctx context.Context, m *DebitCardsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DebitCardsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DebitCardsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DebitCardsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DebitCardsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DebitCards mutation op: %q", m.Op())
	}
}

// TransactionsClient is a client for the Transactions schema.
type TransactionsClient struct {
	config
}

// NewTransactionsClient returns a client for the Transactions from the given config.
func NewTransactionsClient(c config) *TransactionsClient {
	return &TransactionsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transactions.Hooks(f(g(h())))`.
func (c *TransactionsClient) Use(hooks ...Hook) {
	c.hooks.Transactions = append(c.hooks.Transactions, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `transactions.Intercept(f(g(h())))`.
func (c *TransactionsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Transactions = append(c.inters.Transactions, interceptors...)
}

// Create returns a builder for creating a Transactions entity.
func (c *TransactionsClient) Create() *TransactionsCreate {
	mutation := newTransactionsMutation(c.config, OpCreate)
	return &TransactionsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Transactions entities.
func (c *TransactionsClient) CreateBulk(builders ...*TransactionsCreate) *TransactionsCreateBulk {
	return &TransactionsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TransactionsClient) MapCreateBulk(slice any, setFunc func(*TransactionsCreate, int)) *TransactionsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TransactionsCreateBulk{err: fmt.Errorf("calling to TransactionsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TransactionsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TransactionsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Transactions.
func (c *TransactionsClient) Update() *TransactionsUpdate {
	mutation := newTransactionsMutation(c.config, OpUpdate)
	return &TransactionsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransactionsClient) UpdateOne(t *Transactions) *TransactionsUpdateOne {
	mutation := newTransactionsMutation(c.config, OpUpdateOne, withTransactions(t))
	return &TransactionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransactionsClient) UpdateOneID(id int) *TransactionsUpdateOne {
	mutation := newTransactionsMutation(c.config, OpUpdateOne, withTransactionsID(id))
	return &TransactionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Transactions.
func (c *TransactionsClient) Delete() *TransactionsDelete {
	mutation := newTransactionsMutation(c.config, OpDelete)
	return &TransactionsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TransactionsClient) DeleteOne(t *Transactions) *TransactionsDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TransactionsClient) DeleteOneID(id int) *TransactionsDeleteOne {
	builder := c.Delete().Where(transactions.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransactionsDeleteOne{builder}
}

// Query returns a query builder for Transactions.
func (c *TransactionsClient) Query() *TransactionsQuery {
	return &TransactionsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTransactions},
		inters: c.Interceptors(),
	}
}

// Get returns a Transactions entity by its id.
func (c *TransactionsClient) Get(ctx context.Context, id int) (*Transactions, error) {
	return c.Query().Where(transactions.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransactionsClient) GetX(ctx context.Context, id int) *Transactions {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Transactions.
func (c *TransactionsClient) QueryUsers(t *Transactions) *UsersQuery {
	query := (&UsersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transactions.Table, transactions.FieldID, id),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, transactions.UsersTable, transactions.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TransactionsClient) Hooks() []Hook {
	return c.hooks.Transactions
}

// Interceptors returns the client interceptors.
func (c *TransactionsClient) Interceptors() []Interceptor {
	return c.inters.Transactions
}

func (c *TransactionsClient) mutate(ctx context.Context, m *TransactionsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TransactionsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TransactionsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TransactionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TransactionsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Transactions mutation op: %q", m.Op())
	}
}

// UserGreetingsClient is a client for the UserGreetings schema.
type UserGreetingsClient struct {
	config
}

// NewUserGreetingsClient returns a client for the UserGreetings from the given config.
func NewUserGreetingsClient(c config) *UserGreetingsClient {
	return &UserGreetingsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usergreetings.Hooks(f(g(h())))`.
func (c *UserGreetingsClient) Use(hooks ...Hook) {
	c.hooks.UserGreetings = append(c.hooks.UserGreetings, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usergreetings.Intercept(f(g(h())))`.
func (c *UserGreetingsClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserGreetings = append(c.inters.UserGreetings, interceptors...)
}

// Create returns a builder for creating a UserGreetings entity.
func (c *UserGreetingsClient) Create() *UserGreetingsCreate {
	mutation := newUserGreetingsMutation(c.config, OpCreate)
	return &UserGreetingsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserGreetings entities.
func (c *UserGreetingsClient) CreateBulk(builders ...*UserGreetingsCreate) *UserGreetingsCreateBulk {
	return &UserGreetingsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserGreetingsClient) MapCreateBulk(slice any, setFunc func(*UserGreetingsCreate, int)) *UserGreetingsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserGreetingsCreateBulk{err: fmt.Errorf("calling to UserGreetingsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserGreetingsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserGreetingsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserGreetings.
func (c *UserGreetingsClient) Update() *UserGreetingsUpdate {
	mutation := newUserGreetingsMutation(c.config, OpUpdate)
	return &UserGreetingsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserGreetingsClient) UpdateOne(ug *UserGreetings) *UserGreetingsUpdateOne {
	mutation := newUserGreetingsMutation(c.config, OpUpdateOne, withUserGreetings(ug))
	return &UserGreetingsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserGreetingsClient) UpdateOneID(id int) *UserGreetingsUpdateOne {
	mutation := newUserGreetingsMutation(c.config, OpUpdateOne, withUserGreetingsID(id))
	return &UserGreetingsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserGreetings.
func (c *UserGreetingsClient) Delete() *UserGreetingsDelete {
	mutation := newUserGreetingsMutation(c.config, OpDelete)
	return &UserGreetingsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserGreetingsClient) DeleteOne(ug *UserGreetings) *UserGreetingsDeleteOne {
	return c.DeleteOneID(ug.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserGreetingsClient) DeleteOneID(id int) *UserGreetingsDeleteOne {
	builder := c.Delete().Where(usergreetings.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserGreetingsDeleteOne{builder}
}

// Query returns a query builder for UserGreetings.
func (c *UserGreetingsClient) Query() *UserGreetingsQuery {
	return &UserGreetingsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserGreetings},
		inters: c.Interceptors(),
	}
}

// Get returns a UserGreetings entity by its id.
func (c *UserGreetingsClient) Get(ctx context.Context, id int) (*UserGreetings, error) {
	return c.Query().Where(usergreetings.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserGreetingsClient) GetX(ctx context.Context, id int) *UserGreetings {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a UserGreetings.
func (c *UserGreetingsClient) QueryUsers(ug *UserGreetings) *UsersQuery {
	query := (&UsersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ug.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usergreetings.Table, usergreetings.FieldID, id),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usergreetings.UsersTable, usergreetings.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(ug.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserGreetingsClient) Hooks() []Hook {
	return c.hooks.UserGreetings
}

// Interceptors returns the client interceptors.
func (c *UserGreetingsClient) Interceptors() []Interceptor {
	return c.inters.UserGreetings
}

func (c *UserGreetingsClient) mutate(ctx context.Context, m *UserGreetingsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserGreetingsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserGreetingsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserGreetingsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserGreetingsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserGreetings mutation op: %q", m.Op())
	}
}

// UsersClient is a client for the Users schema.
type UsersClient struct {
	config
}

// NewUsersClient returns a client for the Users from the given config.
func NewUsersClient(c config) *UsersClient {
	return &UsersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `users.Hooks(f(g(h())))`.
func (c *UsersClient) Use(hooks ...Hook) {
	c.hooks.Users = append(c.hooks.Users, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `users.Intercept(f(g(h())))`.
func (c *UsersClient) Intercept(interceptors ...Interceptor) {
	c.inters.Users = append(c.inters.Users, interceptors...)
}

// Create returns a builder for creating a Users entity.
func (c *UsersClient) Create() *UsersCreate {
	mutation := newUsersMutation(c.config, OpCreate)
	return &UsersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Users entities.
func (c *UsersClient) CreateBulk(builders ...*UsersCreate) *UsersCreateBulk {
	return &UsersCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UsersClient) MapCreateBulk(slice any, setFunc func(*UsersCreate, int)) *UsersCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UsersCreateBulk{err: fmt.Errorf("calling to UsersClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UsersCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UsersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Users.
func (c *UsersClient) Update() *UsersUpdate {
	mutation := newUsersMutation(c.config, OpUpdate)
	return &UsersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UsersClient) UpdateOne(u *Users) *UsersUpdateOne {
	mutation := newUsersMutation(c.config, OpUpdateOne, withUsers(u))
	return &UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UsersClient) UpdateOneID(id int) *UsersUpdateOne {
	mutation := newUsersMutation(c.config, OpUpdateOne, withUsersID(id))
	return &UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Users.
func (c *UsersClient) Delete() *UsersDelete {
	mutation := newUsersMutation(c.config, OpDelete)
	return &UsersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UsersClient) DeleteOne(u *Users) *UsersDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UsersClient) DeleteOneID(id int) *UsersDeleteOne {
	builder := c.Delete().Where(users.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UsersDeleteOne{builder}
}

// Query returns a query builder for Users.
func (c *UsersClient) Query() *UsersQuery {
	return &UsersQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUsers},
		inters: c.Interceptors(),
	}
}

// Get returns a Users entity by its id.
func (c *UsersClient) Get(ctx context.Context, id int) (*Users, error) {
	return c.Query().Where(users.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UsersClient) GetX(ctx context.Context, id int) *Users {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAccounts queries the accounts edge of a Users.
func (c *UsersClient) QueryAccounts(u *Users) *AccountsQuery {
	query := (&AccountsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, id),
			sqlgraph.To(accounts.Table, accounts.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.AccountsTable, users.AccountsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBanners queries the banners edge of a Users.
func (c *UsersClient) QueryBanners(u *Users) *BannersQuery {
	query := (&BannersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, id),
			sqlgraph.To(banners.Table, banners.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.BannersTable, users.BannersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDebitCards queries the debit_cards edge of a Users.
func (c *UsersClient) QueryDebitCards(u *Users) *DebitCardsQuery {
	query := (&DebitCardsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, id),
			sqlgraph.To(debitcards.Table, debitcards.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.DebitCardsTable, users.DebitCardsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransactions queries the transactions edge of a Users.
func (c *UsersClient) QueryTransactions(u *Users) *TransactionsQuery {
	query := (&TransactionsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, id),
			sqlgraph.To(transactions.Table, transactions.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.TransactionsTable, users.TransactionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserGreetings queries the user_greetings edge of a Users.
func (c *UsersClient) QueryUserGreetings(u *Users) *UserGreetingsQuery {
	query := (&UserGreetingsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, id),
			sqlgraph.To(usergreetings.Table, usergreetings.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.UserGreetingsTable, users.UserGreetingsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccountBalances queries the account_balances edge of a Users.
func (c *UsersClient) QueryAccountBalances(u *Users) *AccountBalancesQuery {
	query := (&AccountBalancesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, id),
			sqlgraph.To(accountbalances.Table, accountbalances.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.AccountBalancesTable, users.AccountBalancesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccountDetails queries the account_details edge of a Users.
func (c *UsersClient) QueryAccountDetails(u *Users) *AccountDetailsQuery {
	query := (&AccountDetailsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, id),
			sqlgraph.To(accountdetails.Table, accountdetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.AccountDetailsTable, users.AccountDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccountFlags queries the account_flags edge of a Users.
func (c *UsersClient) QueryAccountFlags(u *Users) *AccountFlagsQuery {
	query := (&AccountFlagsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, id),
			sqlgraph.To(accountflags.Table, accountflags.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.AccountFlagsTable, users.AccountFlagsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDebitCardDesign queries the debit_card_design edge of a Users.
func (c *UsersClient) QueryDebitCardDesign(u *Users) *DebitCardDesignQuery {
	query := (&DebitCardDesignClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, id),
			sqlgraph.To(debitcarddesign.Table, debitcarddesign.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.DebitCardDesignTable, users.DebitCardDesignColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDebitCardDetails queries the debit_card_details edge of a Users.
func (c *UsersClient) QueryDebitCardDetails(u *Users) *DebitCardDetailsQuery {
	query := (&DebitCardDetailsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, id),
			sqlgraph.To(debitcarddetails.Table, debitcarddetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.DebitCardDetailsTable, users.DebitCardDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDebitCardStatus queries the debit_card_status edge of a Users.
func (c *UsersClient) QueryDebitCardStatus(u *Users) *DebitCardStatusQuery {
	query := (&DebitCardStatusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, id),
			sqlgraph.To(debitcardstatus.Table, debitcardstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.DebitCardStatusTable, users.DebitCardStatusColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UsersClient) Hooks() []Hook {
	return c.hooks.Users
}

// Interceptors returns the client interceptors.
func (c *UsersClient) Interceptors() []Interceptor {
	return c.inters.Users
}

func (c *UsersClient) mutate(ctx context.Context, m *UsersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UsersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UsersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UsersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Users mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AccountBalances, AccountDetails, AccountFlags, Accounts, Banners,
		DebitCardDesign, DebitCardDetails, DebitCardStatus, DebitCards, Transactions,
		UserGreetings, Users []ent.Hook
	}
	inters struct {
		AccountBalances, AccountDetails, AccountFlags, Accounts, Banners,
		DebitCardDesign, DebitCardDetails, DebitCardStatus, DebitCards, Transactions,
		UserGreetings, Users []ent.Interceptor
	}
)
