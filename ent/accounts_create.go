// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountbalances"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountdetails"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountflags"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accounts"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// AccountsCreate is the builder for creating a Accounts entity.
type AccountsCreate struct {
	config
	mutation *AccountsMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (ac *AccountsCreate) SetUserID(i int) *AccountsCreate {
	ac.mutation.SetUserID(i)
	return ac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ac *AccountsCreate) SetNillableUserID(i *int) *AccountsCreate {
	if i != nil {
		ac.SetUserID(*i)
	}
	return ac
}

// SetType sets the "type" field.
func (ac *AccountsCreate) SetType(s string) *AccountsCreate {
	ac.mutation.SetType(s)
	return ac
}

// SetCurrency sets the "currency" field.
func (ac *AccountsCreate) SetCurrency(s string) *AccountsCreate {
	ac.mutation.SetCurrency(s)
	return ac
}

// SetAccountNumber sets the "account_number" field.
func (ac *AccountsCreate) SetAccountNumber(s string) *AccountsCreate {
	ac.mutation.SetAccountNumber(s)
	return ac
}

// SetIssuer sets the "issuer" field.
func (ac *AccountsCreate) SetIssuer(s string) *AccountsCreate {
	ac.mutation.SetIssuer(s)
	return ac
}

// AddAccountBalanceIDs adds the "account_balances" edge to the AccountBalances entity by IDs.
func (ac *AccountsCreate) AddAccountBalanceIDs(ids ...int) *AccountsCreate {
	ac.mutation.AddAccountBalanceIDs(ids...)
	return ac
}

// AddAccountBalances adds the "account_balances" edges to the AccountBalances entity.
func (ac *AccountsCreate) AddAccountBalances(a ...*AccountBalances) *AccountsCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAccountBalanceIDs(ids...)
}

// AddAccountDetailIDs adds the "account_details" edge to the AccountDetails entity by IDs.
func (ac *AccountsCreate) AddAccountDetailIDs(ids ...int) *AccountsCreate {
	ac.mutation.AddAccountDetailIDs(ids...)
	return ac
}

// AddAccountDetails adds the "account_details" edges to the AccountDetails entity.
func (ac *AccountsCreate) AddAccountDetails(a ...*AccountDetails) *AccountsCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAccountDetailIDs(ids...)
}

// AddAccountFlagIDs adds the "account_flags" edge to the AccountFlags entity by IDs.
func (ac *AccountsCreate) AddAccountFlagIDs(ids ...int) *AccountsCreate {
	ac.mutation.AddAccountFlagIDs(ids...)
	return ac
}

// AddAccountFlags adds the "account_flags" edges to the AccountFlags entity.
func (ac *AccountsCreate) AddAccountFlags(a ...*AccountFlags) *AccountsCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAccountFlagIDs(ids...)
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (ac *AccountsCreate) SetUsersID(id int) *AccountsCreate {
	ac.mutation.SetUsersID(id)
	return ac
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (ac *AccountsCreate) SetNillableUsersID(id *int) *AccountsCreate {
	if id != nil {
		ac = ac.SetUsersID(*id)
	}
	return ac
}

// SetUsers sets the "users" edge to the Users entity.
func (ac *AccountsCreate) SetUsers(u *Users) *AccountsCreate {
	return ac.SetUsersID(u.ID)
}

// Mutation returns the AccountsMutation object of the builder.
func (ac *AccountsCreate) Mutation() *AccountsMutation {
	return ac.mutation
}

// Save creates the Accounts in the database.
func (ac *AccountsCreate) Save(ctx context.Context) (*Accounts, error) {
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AccountsCreate) SaveX(ctx context.Context) *Accounts {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AccountsCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AccountsCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AccountsCreate) check() error {
	if _, ok := ac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Accounts.type"`)}
	}
	if _, ok := ac.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "Accounts.currency"`)}
	}
	if _, ok := ac.mutation.AccountNumber(); !ok {
		return &ValidationError{Name: "account_number", err: errors.New(`ent: missing required field "Accounts.account_number"`)}
	}
	if _, ok := ac.mutation.Issuer(); !ok {
		return &ValidationError{Name: "issuer", err: errors.New(`ent: missing required field "Accounts.issuer"`)}
	}
	return nil
}

func (ac *AccountsCreate) sqlSave(ctx context.Context) (*Accounts, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AccountsCreate) createSpec() (*Accounts, *sqlgraph.CreateSpec) {
	var (
		_node = &Accounts{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(accounts.Table, sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.GetType(); ok {
		_spec.SetField(accounts.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ac.mutation.Currency(); ok {
		_spec.SetField(accounts.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := ac.mutation.AccountNumber(); ok {
		_spec.SetField(accounts.FieldAccountNumber, field.TypeString, value)
		_node.AccountNumber = value
	}
	if value, ok := ac.mutation.Issuer(); ok {
		_spec.SetField(accounts.FieldIssuer, field.TypeString, value)
		_node.Issuer = value
	}
	if nodes := ac.mutation.AccountBalancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.AccountBalancesTable,
			Columns: []string{accounts.AccountBalancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountbalances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AccountDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.AccountDetailsTable,
			Columns: []string{accounts.AccountDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AccountFlagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.AccountFlagsTable,
			Columns: []string{accounts.AccountFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountflags.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accounts.UsersTable,
			Columns: []string{accounts.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AccountsCreateBulk is the builder for creating many Accounts entities in bulk.
type AccountsCreateBulk struct {
	config
	err      error
	builders []*AccountsCreate
}

// Save creates the Accounts entities in the database.
func (acb *AccountsCreateBulk) Save(ctx context.Context) ([]*Accounts, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Accounts, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AccountsCreateBulk) SaveX(ctx context.Context) []*Accounts {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AccountsCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AccountsCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
