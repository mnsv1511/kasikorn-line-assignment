// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcards"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcardstatus"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// DebitCardStatusUpdate is the builder for updating DebitCardStatus entities.
type DebitCardStatusUpdate struct {
	config
	hooks    []Hook
	mutation *DebitCardStatusMutation
}

// Where appends a list predicates to the DebitCardStatusUpdate builder.
func (dcsu *DebitCardStatusUpdate) Where(ps ...predicate.DebitCardStatus) *DebitCardStatusUpdate {
	dcsu.mutation.Where(ps...)
	return dcsu
}

// SetCardID sets the "card_id" field.
func (dcsu *DebitCardStatusUpdate) SetCardID(i int) *DebitCardStatusUpdate {
	dcsu.mutation.SetCardID(i)
	return dcsu
}

// SetNillableCardID sets the "card_id" field if the given value is not nil.
func (dcsu *DebitCardStatusUpdate) SetNillableCardID(i *int) *DebitCardStatusUpdate {
	if i != nil {
		dcsu.SetCardID(*i)
	}
	return dcsu
}

// ClearCardID clears the value of the "card_id" field.
func (dcsu *DebitCardStatusUpdate) ClearCardID() *DebitCardStatusUpdate {
	dcsu.mutation.ClearCardID()
	return dcsu
}

// SetUserID sets the "user_id" field.
func (dcsu *DebitCardStatusUpdate) SetUserID(i int) *DebitCardStatusUpdate {
	dcsu.mutation.SetUserID(i)
	return dcsu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (dcsu *DebitCardStatusUpdate) SetNillableUserID(i *int) *DebitCardStatusUpdate {
	if i != nil {
		dcsu.SetUserID(*i)
	}
	return dcsu
}

// ClearUserID clears the value of the "user_id" field.
func (dcsu *DebitCardStatusUpdate) ClearUserID() *DebitCardStatusUpdate {
	dcsu.mutation.ClearUserID()
	return dcsu
}

// SetStatus sets the "status" field.
func (dcsu *DebitCardStatusUpdate) SetStatus(s string) *DebitCardStatusUpdate {
	dcsu.mutation.SetStatus(s)
	return dcsu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dcsu *DebitCardStatusUpdate) SetNillableStatus(s *string) *DebitCardStatusUpdate {
	if s != nil {
		dcsu.SetStatus(*s)
	}
	return dcsu
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (dcsu *DebitCardStatusUpdate) SetUsersID(id int) *DebitCardStatusUpdate {
	dcsu.mutation.SetUsersID(id)
	return dcsu
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (dcsu *DebitCardStatusUpdate) SetNillableUsersID(id *int) *DebitCardStatusUpdate {
	if id != nil {
		dcsu = dcsu.SetUsersID(*id)
	}
	return dcsu
}

// SetUsers sets the "users" edge to the Users entity.
func (dcsu *DebitCardStatusUpdate) SetUsers(u *Users) *DebitCardStatusUpdate {
	return dcsu.SetUsersID(u.ID)
}

// SetDebitCardsID sets the "debit_cards" edge to the DebitCards entity by ID.
func (dcsu *DebitCardStatusUpdate) SetDebitCardsID(id int) *DebitCardStatusUpdate {
	dcsu.mutation.SetDebitCardsID(id)
	return dcsu
}

// SetNillableDebitCardsID sets the "debit_cards" edge to the DebitCards entity by ID if the given value is not nil.
func (dcsu *DebitCardStatusUpdate) SetNillableDebitCardsID(id *int) *DebitCardStatusUpdate {
	if id != nil {
		dcsu = dcsu.SetDebitCardsID(*id)
	}
	return dcsu
}

// SetDebitCards sets the "debit_cards" edge to the DebitCards entity.
func (dcsu *DebitCardStatusUpdate) SetDebitCards(d *DebitCards) *DebitCardStatusUpdate {
	return dcsu.SetDebitCardsID(d.ID)
}

// Mutation returns the DebitCardStatusMutation object of the builder.
func (dcsu *DebitCardStatusUpdate) Mutation() *DebitCardStatusMutation {
	return dcsu.mutation
}

// ClearUsers clears the "users" edge to the Users entity.
func (dcsu *DebitCardStatusUpdate) ClearUsers() *DebitCardStatusUpdate {
	dcsu.mutation.ClearUsers()
	return dcsu
}

// ClearDebitCards clears the "debit_cards" edge to the DebitCards entity.
func (dcsu *DebitCardStatusUpdate) ClearDebitCards() *DebitCardStatusUpdate {
	dcsu.mutation.ClearDebitCards()
	return dcsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcsu *DebitCardStatusUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dcsu.sqlSave, dcsu.mutation, dcsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcsu *DebitCardStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := dcsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcsu *DebitCardStatusUpdate) Exec(ctx context.Context) error {
	_, err := dcsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcsu *DebitCardStatusUpdate) ExecX(ctx context.Context) {
	if err := dcsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dcsu *DebitCardStatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(debitcardstatus.Table, debitcardstatus.Columns, sqlgraph.NewFieldSpec(debitcardstatus.FieldID, field.TypeInt))
	if ps := dcsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcsu.mutation.Status(); ok {
		_spec.SetField(debitcardstatus.FieldStatus, field.TypeString, value)
	}
	if dcsu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcardstatus.UsersTable,
			Columns: []string{debitcardstatus.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcsu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcardstatus.UsersTable,
			Columns: []string{debitcardstatus.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcsu.mutation.DebitCardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcardstatus.DebitCardsTable,
			Columns: []string{debitcardstatus.DebitCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcards.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcsu.mutation.DebitCardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcardstatus.DebitCardsTable,
			Columns: []string{debitcardstatus.DebitCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcards.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dcsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{debitcardstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dcsu.mutation.done = true
	return n, nil
}

// DebitCardStatusUpdateOne is the builder for updating a single DebitCardStatus entity.
type DebitCardStatusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DebitCardStatusMutation
}

// SetCardID sets the "card_id" field.
func (dcsuo *DebitCardStatusUpdateOne) SetCardID(i int) *DebitCardStatusUpdateOne {
	dcsuo.mutation.SetCardID(i)
	return dcsuo
}

// SetNillableCardID sets the "card_id" field if the given value is not nil.
func (dcsuo *DebitCardStatusUpdateOne) SetNillableCardID(i *int) *DebitCardStatusUpdateOne {
	if i != nil {
		dcsuo.SetCardID(*i)
	}
	return dcsuo
}

// ClearCardID clears the value of the "card_id" field.
func (dcsuo *DebitCardStatusUpdateOne) ClearCardID() *DebitCardStatusUpdateOne {
	dcsuo.mutation.ClearCardID()
	return dcsuo
}

// SetUserID sets the "user_id" field.
func (dcsuo *DebitCardStatusUpdateOne) SetUserID(i int) *DebitCardStatusUpdateOne {
	dcsuo.mutation.SetUserID(i)
	return dcsuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (dcsuo *DebitCardStatusUpdateOne) SetNillableUserID(i *int) *DebitCardStatusUpdateOne {
	if i != nil {
		dcsuo.SetUserID(*i)
	}
	return dcsuo
}

// ClearUserID clears the value of the "user_id" field.
func (dcsuo *DebitCardStatusUpdateOne) ClearUserID() *DebitCardStatusUpdateOne {
	dcsuo.mutation.ClearUserID()
	return dcsuo
}

// SetStatus sets the "status" field.
func (dcsuo *DebitCardStatusUpdateOne) SetStatus(s string) *DebitCardStatusUpdateOne {
	dcsuo.mutation.SetStatus(s)
	return dcsuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dcsuo *DebitCardStatusUpdateOne) SetNillableStatus(s *string) *DebitCardStatusUpdateOne {
	if s != nil {
		dcsuo.SetStatus(*s)
	}
	return dcsuo
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (dcsuo *DebitCardStatusUpdateOne) SetUsersID(id int) *DebitCardStatusUpdateOne {
	dcsuo.mutation.SetUsersID(id)
	return dcsuo
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (dcsuo *DebitCardStatusUpdateOne) SetNillableUsersID(id *int) *DebitCardStatusUpdateOne {
	if id != nil {
		dcsuo = dcsuo.SetUsersID(*id)
	}
	return dcsuo
}

// SetUsers sets the "users" edge to the Users entity.
func (dcsuo *DebitCardStatusUpdateOne) SetUsers(u *Users) *DebitCardStatusUpdateOne {
	return dcsuo.SetUsersID(u.ID)
}

// SetDebitCardsID sets the "debit_cards" edge to the DebitCards entity by ID.
func (dcsuo *DebitCardStatusUpdateOne) SetDebitCardsID(id int) *DebitCardStatusUpdateOne {
	dcsuo.mutation.SetDebitCardsID(id)
	return dcsuo
}

// SetNillableDebitCardsID sets the "debit_cards" edge to the DebitCards entity by ID if the given value is not nil.
func (dcsuo *DebitCardStatusUpdateOne) SetNillableDebitCardsID(id *int) *DebitCardStatusUpdateOne {
	if id != nil {
		dcsuo = dcsuo.SetDebitCardsID(*id)
	}
	return dcsuo
}

// SetDebitCards sets the "debit_cards" edge to the DebitCards entity.
func (dcsuo *DebitCardStatusUpdateOne) SetDebitCards(d *DebitCards) *DebitCardStatusUpdateOne {
	return dcsuo.SetDebitCardsID(d.ID)
}

// Mutation returns the DebitCardStatusMutation object of the builder.
func (dcsuo *DebitCardStatusUpdateOne) Mutation() *DebitCardStatusMutation {
	return dcsuo.mutation
}

// ClearUsers clears the "users" edge to the Users entity.
func (dcsuo *DebitCardStatusUpdateOne) ClearUsers() *DebitCardStatusUpdateOne {
	dcsuo.mutation.ClearUsers()
	return dcsuo
}

// ClearDebitCards clears the "debit_cards" edge to the DebitCards entity.
func (dcsuo *DebitCardStatusUpdateOne) ClearDebitCards() *DebitCardStatusUpdateOne {
	dcsuo.mutation.ClearDebitCards()
	return dcsuo
}

// Where appends a list predicates to the DebitCardStatusUpdate builder.
func (dcsuo *DebitCardStatusUpdateOne) Where(ps ...predicate.DebitCardStatus) *DebitCardStatusUpdateOne {
	dcsuo.mutation.Where(ps...)
	return dcsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcsuo *DebitCardStatusUpdateOne) Select(field string, fields ...string) *DebitCardStatusUpdateOne {
	dcsuo.fields = append([]string{field}, fields...)
	return dcsuo
}

// Save executes the query and returns the updated DebitCardStatus entity.
func (dcsuo *DebitCardStatusUpdateOne) Save(ctx context.Context) (*DebitCardStatus, error) {
	return withHooks(ctx, dcsuo.sqlSave, dcsuo.mutation, dcsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcsuo *DebitCardStatusUpdateOne) SaveX(ctx context.Context) *DebitCardStatus {
	node, err := dcsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcsuo *DebitCardStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := dcsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcsuo *DebitCardStatusUpdateOne) ExecX(ctx context.Context) {
	if err := dcsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dcsuo *DebitCardStatusUpdateOne) sqlSave(ctx context.Context) (_node *DebitCardStatus, err error) {
	_spec := sqlgraph.NewUpdateSpec(debitcardstatus.Table, debitcardstatus.Columns, sqlgraph.NewFieldSpec(debitcardstatus.FieldID, field.TypeInt))
	id, ok := dcsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DebitCardStatus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dcsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, debitcardstatus.FieldID)
		for _, f := range fields {
			if !debitcardstatus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != debitcardstatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcsuo.mutation.Status(); ok {
		_spec.SetField(debitcardstatus.FieldStatus, field.TypeString, value)
	}
	if dcsuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcardstatus.UsersTable,
			Columns: []string{debitcardstatus.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcsuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcardstatus.UsersTable,
			Columns: []string{debitcardstatus.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcsuo.mutation.DebitCardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcardstatus.DebitCardsTable,
			Columns: []string{debitcardstatus.DebitCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcards.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcsuo.mutation.DebitCardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcardstatus.DebitCardsTable,
			Columns: []string{debitcardstatus.DebitCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcards.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DebitCardStatus{config: dcsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{debitcardstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dcsuo.mutation.done = true
	return _node, nil
}
