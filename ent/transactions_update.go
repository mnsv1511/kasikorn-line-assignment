// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/transactions"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// TransactionsUpdate is the builder for updating Transactions entities.
type TransactionsUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionsMutation
}

// Where appends a list predicates to the TransactionsUpdate builder.
func (tu *TransactionsUpdate) Where(ps ...predicate.Transactions) *TransactionsUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUserID sets the "user_id" field.
func (tu *TransactionsUpdate) SetUserID(i int) *TransactionsUpdate {
	tu.mutation.SetUserID(i)
	return tu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tu *TransactionsUpdate) SetNillableUserID(i *int) *TransactionsUpdate {
	if i != nil {
		tu.SetUserID(*i)
	}
	return tu
}

// ClearUserID clears the value of the "user_id" field.
func (tu *TransactionsUpdate) ClearUserID() *TransactionsUpdate {
	tu.mutation.ClearUserID()
	return tu
}

// SetName sets the "name" field.
func (tu *TransactionsUpdate) SetName(s string) *TransactionsUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TransactionsUpdate) SetNillableName(s *string) *TransactionsUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetImage sets the "image" field.
func (tu *TransactionsUpdate) SetImage(s string) *TransactionsUpdate {
	tu.mutation.SetImage(s)
	return tu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (tu *TransactionsUpdate) SetNillableImage(s *string) *TransactionsUpdate {
	if s != nil {
		tu.SetImage(*s)
	}
	return tu
}

// SetIsBank sets the "isBank" field.
func (tu *TransactionsUpdate) SetIsBank(b bool) *TransactionsUpdate {
	tu.mutation.SetIsBank(b)
	return tu
}

// SetNillableIsBank sets the "isBank" field if the given value is not nil.
func (tu *TransactionsUpdate) SetNillableIsBank(b *bool) *TransactionsUpdate {
	if b != nil {
		tu.SetIsBank(*b)
	}
	return tu
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (tu *TransactionsUpdate) SetUsersID(id int) *TransactionsUpdate {
	tu.mutation.SetUsersID(id)
	return tu
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (tu *TransactionsUpdate) SetNillableUsersID(id *int) *TransactionsUpdate {
	if id != nil {
		tu = tu.SetUsersID(*id)
	}
	return tu
}

// SetUsers sets the "users" edge to the Users entity.
func (tu *TransactionsUpdate) SetUsers(u *Users) *TransactionsUpdate {
	return tu.SetUsersID(u.ID)
}

// Mutation returns the TransactionsMutation object of the builder.
func (tu *TransactionsUpdate) Mutation() *TransactionsMutation {
	return tu.mutation
}

// ClearUsers clears the "users" edge to the Users entity.
func (tu *TransactionsUpdate) ClearUsers() *TransactionsUpdate {
	tu.mutation.ClearUsers()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransactionsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransactionsUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransactionsUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransactionsUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TransactionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(transactions.Table, transactions.Columns, sqlgraph.NewFieldSpec(transactions.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(transactions.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Image(); ok {
		_spec.SetField(transactions.FieldImage, field.TypeString, value)
	}
	if value, ok := tu.mutation.IsBank(); ok {
		_spec.SetField(transactions.FieldIsBank, field.TypeBool, value)
	}
	if tu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactions.UsersTable,
			Columns: []string{transactions.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactions.UsersTable,
			Columns: []string{transactions.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TransactionsUpdateOne is the builder for updating a single Transactions entity.
type TransactionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionsMutation
}

// SetUserID sets the "user_id" field.
func (tuo *TransactionsUpdateOne) SetUserID(i int) *TransactionsUpdateOne {
	tuo.mutation.SetUserID(i)
	return tuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuo *TransactionsUpdateOne) SetNillableUserID(i *int) *TransactionsUpdateOne {
	if i != nil {
		tuo.SetUserID(*i)
	}
	return tuo
}

// ClearUserID clears the value of the "user_id" field.
func (tuo *TransactionsUpdateOne) ClearUserID() *TransactionsUpdateOne {
	tuo.mutation.ClearUserID()
	return tuo
}

// SetName sets the "name" field.
func (tuo *TransactionsUpdateOne) SetName(s string) *TransactionsUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TransactionsUpdateOne) SetNillableName(s *string) *TransactionsUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetImage sets the "image" field.
func (tuo *TransactionsUpdateOne) SetImage(s string) *TransactionsUpdateOne {
	tuo.mutation.SetImage(s)
	return tuo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (tuo *TransactionsUpdateOne) SetNillableImage(s *string) *TransactionsUpdateOne {
	if s != nil {
		tuo.SetImage(*s)
	}
	return tuo
}

// SetIsBank sets the "isBank" field.
func (tuo *TransactionsUpdateOne) SetIsBank(b bool) *TransactionsUpdateOne {
	tuo.mutation.SetIsBank(b)
	return tuo
}

// SetNillableIsBank sets the "isBank" field if the given value is not nil.
func (tuo *TransactionsUpdateOne) SetNillableIsBank(b *bool) *TransactionsUpdateOne {
	if b != nil {
		tuo.SetIsBank(*b)
	}
	return tuo
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (tuo *TransactionsUpdateOne) SetUsersID(id int) *TransactionsUpdateOne {
	tuo.mutation.SetUsersID(id)
	return tuo
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (tuo *TransactionsUpdateOne) SetNillableUsersID(id *int) *TransactionsUpdateOne {
	if id != nil {
		tuo = tuo.SetUsersID(*id)
	}
	return tuo
}

// SetUsers sets the "users" edge to the Users entity.
func (tuo *TransactionsUpdateOne) SetUsers(u *Users) *TransactionsUpdateOne {
	return tuo.SetUsersID(u.ID)
}

// Mutation returns the TransactionsMutation object of the builder.
func (tuo *TransactionsUpdateOne) Mutation() *TransactionsMutation {
	return tuo.mutation
}

// ClearUsers clears the "users" edge to the Users entity.
func (tuo *TransactionsUpdateOne) ClearUsers() *TransactionsUpdateOne {
	tuo.mutation.ClearUsers()
	return tuo
}

// Where appends a list predicates to the TransactionsUpdate builder.
func (tuo *TransactionsUpdateOne) Where(ps ...predicate.Transactions) *TransactionsUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransactionsUpdateOne) Select(field string, fields ...string) *TransactionsUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transactions entity.
func (tuo *TransactionsUpdateOne) Save(ctx context.Context) (*Transactions, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransactionsUpdateOne) SaveX(ctx context.Context) *Transactions {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransactionsUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransactionsUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TransactionsUpdateOne) sqlSave(ctx context.Context) (_node *Transactions, err error) {
	_spec := sqlgraph.NewUpdateSpec(transactions.Table, transactions.Columns, sqlgraph.NewFieldSpec(transactions.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transactions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transactions.FieldID)
		for _, f := range fields {
			if !transactions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transactions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(transactions.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Image(); ok {
		_spec.SetField(transactions.FieldImage, field.TypeString, value)
	}
	if value, ok := tuo.mutation.IsBank(); ok {
		_spec.SetField(transactions.FieldIsBank, field.TypeBool, value)
	}
	if tuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactions.UsersTable,
			Columns: []string{transactions.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactions.UsersTable,
			Columns: []string{transactions.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transactions{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
