// Code generated by ent, DO NOT EDIT.

package accounts

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the accounts type in the database.
	Label = "accounts"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldAccountNumber holds the string denoting the account_number field in the database.
	FieldAccountNumber = "account_number"
	// FieldIssuer holds the string denoting the issuer field in the database.
	FieldIssuer = "issuer"
	// EdgeAccountBalances holds the string denoting the account_balances edge name in mutations.
	EdgeAccountBalances = "account_balances"
	// EdgeAccountDetails holds the string denoting the account_details edge name in mutations.
	EdgeAccountDetails = "account_details"
	// EdgeAccountFlags holds the string denoting the account_flags edge name in mutations.
	EdgeAccountFlags = "account_flags"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the accounts in the database.
	Table = "accounts"
	// AccountBalancesTable is the table that holds the account_balances relation/edge.
	AccountBalancesTable = "account_balances"
	// AccountBalancesInverseTable is the table name for the AccountBalances entity.
	// It exists in this package in order to avoid circular dependency with the "accountbalances" package.
	AccountBalancesInverseTable = "account_balances"
	// AccountBalancesColumn is the table column denoting the account_balances relation/edge.
	AccountBalancesColumn = "account_id"
	// AccountDetailsTable is the table that holds the account_details relation/edge.
	AccountDetailsTable = "account_details"
	// AccountDetailsInverseTable is the table name for the AccountDetails entity.
	// It exists in this package in order to avoid circular dependency with the "accountdetails" package.
	AccountDetailsInverseTable = "account_details"
	// AccountDetailsColumn is the table column denoting the account_details relation/edge.
	AccountDetailsColumn = "account_id"
	// AccountFlagsTable is the table that holds the account_flags relation/edge.
	AccountFlagsTable = "account_flags"
	// AccountFlagsInverseTable is the table name for the AccountFlags entity.
	// It exists in this package in order to avoid circular dependency with the "accountflags" package.
	AccountFlagsInverseTable = "account_flags"
	// AccountFlagsColumn is the table column denoting the account_flags relation/edge.
	AccountFlagsColumn = "account_id"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "accounts"
	// UsersInverseTable is the table name for the Users entity.
	// It exists in this package in order to avoid circular dependency with the "users" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "user_id"
)

// Columns holds all SQL columns for accounts fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldType,
	FieldCurrency,
	FieldAccountNumber,
	FieldIssuer,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Accounts queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByAccountNumber orders the results by the account_number field.
func ByAccountNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountNumber, opts...).ToFunc()
}

// ByIssuer orders the results by the issuer field.
func ByIssuer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIssuer, opts...).ToFunc()
}

// ByAccountBalancesCount orders the results by account_balances count.
func ByAccountBalancesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAccountBalancesStep(), opts...)
	}
}

// ByAccountBalances orders the results by account_balances terms.
func ByAccountBalances(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccountBalancesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAccountDetailsCount orders the results by account_details count.
func ByAccountDetailsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAccountDetailsStep(), opts...)
	}
}

// ByAccountDetails orders the results by account_details terms.
func ByAccountDetails(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccountDetailsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAccountFlagsCount orders the results by account_flags count.
func ByAccountFlagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAccountFlagsStep(), opts...)
	}
}

// ByAccountFlags orders the results by account_flags terms.
func ByAccountFlags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccountFlagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersField orders the results by users field.
func ByUsersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), sql.OrderByField(field, opts...))
	}
}
func newAccountBalancesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccountBalancesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AccountBalancesTable, AccountBalancesColumn),
	)
}
func newAccountDetailsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccountDetailsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AccountDetailsTable, AccountDetailsColumn),
	)
}
func newAccountFlagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccountFlagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AccountFlagsTable, AccountFlagsColumn),
	)
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
	)
}
