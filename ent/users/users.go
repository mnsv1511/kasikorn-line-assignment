// Code generated by ent, DO NOT EDIT.

package users

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the users type in the database.
	Label = "users"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// EdgeAccounts holds the string denoting the accounts edge name in mutations.
	EdgeAccounts = "accounts"
	// EdgeBanners holds the string denoting the banners edge name in mutations.
	EdgeBanners = "banners"
	// EdgeDebitCards holds the string denoting the debit_cards edge name in mutations.
	EdgeDebitCards = "debit_cards"
	// EdgeTransactions holds the string denoting the transactions edge name in mutations.
	EdgeTransactions = "transactions"
	// EdgeUserGreetings holds the string denoting the user_greetings edge name in mutations.
	EdgeUserGreetings = "user_greetings"
	// EdgeAccountBalances holds the string denoting the account_balances edge name in mutations.
	EdgeAccountBalances = "account_balances"
	// EdgeAccountDetails holds the string denoting the account_details edge name in mutations.
	EdgeAccountDetails = "account_details"
	// EdgeAccountFlags holds the string denoting the account_flags edge name in mutations.
	EdgeAccountFlags = "account_flags"
	// EdgeDebitCardDesign holds the string denoting the debit_card_design edge name in mutations.
	EdgeDebitCardDesign = "debit_card_design"
	// EdgeDebitCardDetails holds the string denoting the debit_card_details edge name in mutations.
	EdgeDebitCardDetails = "debit_card_details"
	// EdgeDebitCardStatus holds the string denoting the debit_card_status edge name in mutations.
	EdgeDebitCardStatus = "debit_card_status"
	// Table holds the table name of the users in the database.
	Table = "users"
	// AccountsTable is the table that holds the accounts relation/edge.
	AccountsTable = "accounts"
	// AccountsInverseTable is the table name for the Accounts entity.
	// It exists in this package in order to avoid circular dependency with the "accounts" package.
	AccountsInverseTable = "accounts"
	// AccountsColumn is the table column denoting the accounts relation/edge.
	AccountsColumn = "user_id"
	// BannersTable is the table that holds the banners relation/edge.
	BannersTable = "banners"
	// BannersInverseTable is the table name for the Banners entity.
	// It exists in this package in order to avoid circular dependency with the "banners" package.
	BannersInverseTable = "banners"
	// BannersColumn is the table column denoting the banners relation/edge.
	BannersColumn = "user_id"
	// DebitCardsTable is the table that holds the debit_cards relation/edge.
	DebitCardsTable = "debit_cards"
	// DebitCardsInverseTable is the table name for the DebitCards entity.
	// It exists in this package in order to avoid circular dependency with the "debitcards" package.
	DebitCardsInverseTable = "debit_cards"
	// DebitCardsColumn is the table column denoting the debit_cards relation/edge.
	DebitCardsColumn = "user_id"
	// TransactionsTable is the table that holds the transactions relation/edge.
	TransactionsTable = "transactions"
	// TransactionsInverseTable is the table name for the Transactions entity.
	// It exists in this package in order to avoid circular dependency with the "transactions" package.
	TransactionsInverseTable = "transactions"
	// TransactionsColumn is the table column denoting the transactions relation/edge.
	TransactionsColumn = "user_id"
	// UserGreetingsTable is the table that holds the user_greetings relation/edge.
	UserGreetingsTable = "user_greetings"
	// UserGreetingsInverseTable is the table name for the UserGreetings entity.
	// It exists in this package in order to avoid circular dependency with the "usergreetings" package.
	UserGreetingsInverseTable = "user_greetings"
	// UserGreetingsColumn is the table column denoting the user_greetings relation/edge.
	UserGreetingsColumn = "user_id"
	// AccountBalancesTable is the table that holds the account_balances relation/edge.
	AccountBalancesTable = "account_balances"
	// AccountBalancesInverseTable is the table name for the AccountBalances entity.
	// It exists in this package in order to avoid circular dependency with the "accountbalances" package.
	AccountBalancesInverseTable = "account_balances"
	// AccountBalancesColumn is the table column denoting the account_balances relation/edge.
	AccountBalancesColumn = "user_id"
	// AccountDetailsTable is the table that holds the account_details relation/edge.
	AccountDetailsTable = "account_details"
	// AccountDetailsInverseTable is the table name for the AccountDetails entity.
	// It exists in this package in order to avoid circular dependency with the "accountdetails" package.
	AccountDetailsInverseTable = "account_details"
	// AccountDetailsColumn is the table column denoting the account_details relation/edge.
	AccountDetailsColumn = "user_id"
	// AccountFlagsTable is the table that holds the account_flags relation/edge.
	AccountFlagsTable = "account_flags"
	// AccountFlagsInverseTable is the table name for the AccountFlags entity.
	// It exists in this package in order to avoid circular dependency with the "accountflags" package.
	AccountFlagsInverseTable = "account_flags"
	// AccountFlagsColumn is the table column denoting the account_flags relation/edge.
	AccountFlagsColumn = "user_id"
	// DebitCardDesignTable is the table that holds the debit_card_design relation/edge.
	DebitCardDesignTable = "debit_card_designs"
	// DebitCardDesignInverseTable is the table name for the DebitCardDesign entity.
	// It exists in this package in order to avoid circular dependency with the "debitcarddesign" package.
	DebitCardDesignInverseTable = "debit_card_designs"
	// DebitCardDesignColumn is the table column denoting the debit_card_design relation/edge.
	DebitCardDesignColumn = "user_id"
	// DebitCardDetailsTable is the table that holds the debit_card_details relation/edge.
	DebitCardDetailsTable = "debit_card_details"
	// DebitCardDetailsInverseTable is the table name for the DebitCardDetails entity.
	// It exists in this package in order to avoid circular dependency with the "debitcarddetails" package.
	DebitCardDetailsInverseTable = "debit_card_details"
	// DebitCardDetailsColumn is the table column denoting the debit_card_details relation/edge.
	DebitCardDetailsColumn = "user_id"
	// DebitCardStatusTable is the table that holds the debit_card_status relation/edge.
	DebitCardStatusTable = "debit_card_status"
	// DebitCardStatusInverseTable is the table name for the DebitCardStatus entity.
	// It exists in this package in order to avoid circular dependency with the "debitcardstatus" package.
	DebitCardStatusInverseTable = "debit_card_status"
	// DebitCardStatusColumn is the table column denoting the debit_card_status relation/edge.
	DebitCardStatusColumn = "user_id"
)

// Columns holds all SQL columns for users fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldImageURL,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Users queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByImageURL orders the results by the image_url field.
func ByImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageURL, opts...).ToFunc()
}

// ByAccountsCount orders the results by accounts count.
func ByAccountsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAccountsStep(), opts...)
	}
}

// ByAccounts orders the results by accounts terms.
func ByAccounts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccountsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBannersCount orders the results by banners count.
func ByBannersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBannersStep(), opts...)
	}
}

// ByBanners orders the results by banners terms.
func ByBanners(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBannersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDebitCardsCount orders the results by debit_cards count.
func ByDebitCardsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDebitCardsStep(), opts...)
	}
}

// ByDebitCards orders the results by debit_cards terms.
func ByDebitCards(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDebitCardsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTransactionsCount orders the results by transactions count.
func ByTransactionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTransactionsStep(), opts...)
	}
}

// ByTransactions orders the results by transactions terms.
func ByTransactions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTransactionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserGreetingsCount orders the results by user_greetings count.
func ByUserGreetingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserGreetingsStep(), opts...)
	}
}

// ByUserGreetings orders the results by user_greetings terms.
func ByUserGreetings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserGreetingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAccountBalancesCount orders the results by account_balances count.
func ByAccountBalancesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAccountBalancesStep(), opts...)
	}
}

// ByAccountBalances orders the results by account_balances terms.
func ByAccountBalances(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccountBalancesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAccountDetailsCount orders the results by account_details count.
func ByAccountDetailsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAccountDetailsStep(), opts...)
	}
}

// ByAccountDetails orders the results by account_details terms.
func ByAccountDetails(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccountDetailsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAccountFlagsCount orders the results by account_flags count.
func ByAccountFlagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAccountFlagsStep(), opts...)
	}
}

// ByAccountFlags orders the results by account_flags terms.
func ByAccountFlags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccountFlagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDebitCardDesignCount orders the results by debit_card_design count.
func ByDebitCardDesignCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDebitCardDesignStep(), opts...)
	}
}

// ByDebitCardDesign orders the results by debit_card_design terms.
func ByDebitCardDesign(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDebitCardDesignStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDebitCardDetailsCount orders the results by debit_card_details count.
func ByDebitCardDetailsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDebitCardDetailsStep(), opts...)
	}
}

// ByDebitCardDetails orders the results by debit_card_details terms.
func ByDebitCardDetails(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDebitCardDetailsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDebitCardStatusCount orders the results by debit_card_status count.
func ByDebitCardStatusCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDebitCardStatusStep(), opts...)
	}
}

// ByDebitCardStatus orders the results by debit_card_status terms.
func ByDebitCardStatus(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDebitCardStatusStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAccountsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccountsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AccountsTable, AccountsColumn),
	)
}
func newBannersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BannersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BannersTable, BannersColumn),
	)
}
func newDebitCardsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DebitCardsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DebitCardsTable, DebitCardsColumn),
	)
}
func newTransactionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TransactionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TransactionsTable, TransactionsColumn),
	)
}
func newUserGreetingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserGreetingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserGreetingsTable, UserGreetingsColumn),
	)
}
func newAccountBalancesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccountBalancesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AccountBalancesTable, AccountBalancesColumn),
	)
}
func newAccountDetailsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccountDetailsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AccountDetailsTable, AccountDetailsColumn),
	)
}
func newAccountFlagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccountFlagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AccountFlagsTable, AccountFlagsColumn),
	)
}
func newDebitCardDesignStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DebitCardDesignInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DebitCardDesignTable, DebitCardDesignColumn),
	)
}
func newDebitCardDetailsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DebitCardDetailsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DebitCardDetailsTable, DebitCardDetailsColumn),
	)
}
func newDebitCardStatusStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DebitCardStatusInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DebitCardStatusTable, DebitCardStatusColumn),
	)
}
