// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcarddesign"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcards"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// DebitCardDesignUpdate is the builder for updating DebitCardDesign entities.
type DebitCardDesignUpdate struct {
	config
	hooks    []Hook
	mutation *DebitCardDesignMutation
}

// Where appends a list predicates to the DebitCardDesignUpdate builder.
func (dcdu *DebitCardDesignUpdate) Where(ps ...predicate.DebitCardDesign) *DebitCardDesignUpdate {
	dcdu.mutation.Where(ps...)
	return dcdu
}

// SetCardID sets the "card_id" field.
func (dcdu *DebitCardDesignUpdate) SetCardID(i int) *DebitCardDesignUpdate {
	dcdu.mutation.SetCardID(i)
	return dcdu
}

// SetNillableCardID sets the "card_id" field if the given value is not nil.
func (dcdu *DebitCardDesignUpdate) SetNillableCardID(i *int) *DebitCardDesignUpdate {
	if i != nil {
		dcdu.SetCardID(*i)
	}
	return dcdu
}

// ClearCardID clears the value of the "card_id" field.
func (dcdu *DebitCardDesignUpdate) ClearCardID() *DebitCardDesignUpdate {
	dcdu.mutation.ClearCardID()
	return dcdu
}

// SetUserID sets the "user_id" field.
func (dcdu *DebitCardDesignUpdate) SetUserID(i int) *DebitCardDesignUpdate {
	dcdu.mutation.SetUserID(i)
	return dcdu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (dcdu *DebitCardDesignUpdate) SetNillableUserID(i *int) *DebitCardDesignUpdate {
	if i != nil {
		dcdu.SetUserID(*i)
	}
	return dcdu
}

// ClearUserID clears the value of the "user_id" field.
func (dcdu *DebitCardDesignUpdate) ClearUserID() *DebitCardDesignUpdate {
	dcdu.mutation.ClearUserID()
	return dcdu
}

// SetColor sets the "color" field.
func (dcdu *DebitCardDesignUpdate) SetColor(s string) *DebitCardDesignUpdate {
	dcdu.mutation.SetColor(s)
	return dcdu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (dcdu *DebitCardDesignUpdate) SetNillableColor(s *string) *DebitCardDesignUpdate {
	if s != nil {
		dcdu.SetColor(*s)
	}
	return dcdu
}

// SetBorderColor sets the "border_color" field.
func (dcdu *DebitCardDesignUpdate) SetBorderColor(s string) *DebitCardDesignUpdate {
	dcdu.mutation.SetBorderColor(s)
	return dcdu
}

// SetNillableBorderColor sets the "border_color" field if the given value is not nil.
func (dcdu *DebitCardDesignUpdate) SetNillableBorderColor(s *string) *DebitCardDesignUpdate {
	if s != nil {
		dcdu.SetBorderColor(*s)
	}
	return dcdu
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (dcdu *DebitCardDesignUpdate) SetUsersID(id int) *DebitCardDesignUpdate {
	dcdu.mutation.SetUsersID(id)
	return dcdu
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (dcdu *DebitCardDesignUpdate) SetNillableUsersID(id *int) *DebitCardDesignUpdate {
	if id != nil {
		dcdu = dcdu.SetUsersID(*id)
	}
	return dcdu
}

// SetUsers sets the "users" edge to the Users entity.
func (dcdu *DebitCardDesignUpdate) SetUsers(u *Users) *DebitCardDesignUpdate {
	return dcdu.SetUsersID(u.ID)
}

// SetDebitCardsID sets the "debit_cards" edge to the DebitCards entity by ID.
func (dcdu *DebitCardDesignUpdate) SetDebitCardsID(id int) *DebitCardDesignUpdate {
	dcdu.mutation.SetDebitCardsID(id)
	return dcdu
}

// SetNillableDebitCardsID sets the "debit_cards" edge to the DebitCards entity by ID if the given value is not nil.
func (dcdu *DebitCardDesignUpdate) SetNillableDebitCardsID(id *int) *DebitCardDesignUpdate {
	if id != nil {
		dcdu = dcdu.SetDebitCardsID(*id)
	}
	return dcdu
}

// SetDebitCards sets the "debit_cards" edge to the DebitCards entity.
func (dcdu *DebitCardDesignUpdate) SetDebitCards(d *DebitCards) *DebitCardDesignUpdate {
	return dcdu.SetDebitCardsID(d.ID)
}

// Mutation returns the DebitCardDesignMutation object of the builder.
func (dcdu *DebitCardDesignUpdate) Mutation() *DebitCardDesignMutation {
	return dcdu.mutation
}

// ClearUsers clears the "users" edge to the Users entity.
func (dcdu *DebitCardDesignUpdate) ClearUsers() *DebitCardDesignUpdate {
	dcdu.mutation.ClearUsers()
	return dcdu
}

// ClearDebitCards clears the "debit_cards" edge to the DebitCards entity.
func (dcdu *DebitCardDesignUpdate) ClearDebitCards() *DebitCardDesignUpdate {
	dcdu.mutation.ClearDebitCards()
	return dcdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcdu *DebitCardDesignUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dcdu.sqlSave, dcdu.mutation, dcdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcdu *DebitCardDesignUpdate) SaveX(ctx context.Context) int {
	affected, err := dcdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcdu *DebitCardDesignUpdate) Exec(ctx context.Context) error {
	_, err := dcdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcdu *DebitCardDesignUpdate) ExecX(ctx context.Context) {
	if err := dcdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dcdu *DebitCardDesignUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(debitcarddesign.Table, debitcarddesign.Columns, sqlgraph.NewFieldSpec(debitcarddesign.FieldID, field.TypeInt))
	if ps := dcdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcdu.mutation.Color(); ok {
		_spec.SetField(debitcarddesign.FieldColor, field.TypeString, value)
	}
	if value, ok := dcdu.mutation.BorderColor(); ok {
		_spec.SetField(debitcarddesign.FieldBorderColor, field.TypeString, value)
	}
	if dcdu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcarddesign.UsersTable,
			Columns: []string{debitcarddesign.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcdu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcarddesign.UsersTable,
			Columns: []string{debitcarddesign.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcdu.mutation.DebitCardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcarddesign.DebitCardsTable,
			Columns: []string{debitcarddesign.DebitCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcards.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcdu.mutation.DebitCardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcarddesign.DebitCardsTable,
			Columns: []string{debitcarddesign.DebitCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcards.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dcdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{debitcarddesign.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dcdu.mutation.done = true
	return n, nil
}

// DebitCardDesignUpdateOne is the builder for updating a single DebitCardDesign entity.
type DebitCardDesignUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DebitCardDesignMutation
}

// SetCardID sets the "card_id" field.
func (dcduo *DebitCardDesignUpdateOne) SetCardID(i int) *DebitCardDesignUpdateOne {
	dcduo.mutation.SetCardID(i)
	return dcduo
}

// SetNillableCardID sets the "card_id" field if the given value is not nil.
func (dcduo *DebitCardDesignUpdateOne) SetNillableCardID(i *int) *DebitCardDesignUpdateOne {
	if i != nil {
		dcduo.SetCardID(*i)
	}
	return dcduo
}

// ClearCardID clears the value of the "card_id" field.
func (dcduo *DebitCardDesignUpdateOne) ClearCardID() *DebitCardDesignUpdateOne {
	dcduo.mutation.ClearCardID()
	return dcduo
}

// SetUserID sets the "user_id" field.
func (dcduo *DebitCardDesignUpdateOne) SetUserID(i int) *DebitCardDesignUpdateOne {
	dcduo.mutation.SetUserID(i)
	return dcduo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (dcduo *DebitCardDesignUpdateOne) SetNillableUserID(i *int) *DebitCardDesignUpdateOne {
	if i != nil {
		dcduo.SetUserID(*i)
	}
	return dcduo
}

// ClearUserID clears the value of the "user_id" field.
func (dcduo *DebitCardDesignUpdateOne) ClearUserID() *DebitCardDesignUpdateOne {
	dcduo.mutation.ClearUserID()
	return dcduo
}

// SetColor sets the "color" field.
func (dcduo *DebitCardDesignUpdateOne) SetColor(s string) *DebitCardDesignUpdateOne {
	dcduo.mutation.SetColor(s)
	return dcduo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (dcduo *DebitCardDesignUpdateOne) SetNillableColor(s *string) *DebitCardDesignUpdateOne {
	if s != nil {
		dcduo.SetColor(*s)
	}
	return dcduo
}

// SetBorderColor sets the "border_color" field.
func (dcduo *DebitCardDesignUpdateOne) SetBorderColor(s string) *DebitCardDesignUpdateOne {
	dcduo.mutation.SetBorderColor(s)
	return dcduo
}

// SetNillableBorderColor sets the "border_color" field if the given value is not nil.
func (dcduo *DebitCardDesignUpdateOne) SetNillableBorderColor(s *string) *DebitCardDesignUpdateOne {
	if s != nil {
		dcduo.SetBorderColor(*s)
	}
	return dcduo
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (dcduo *DebitCardDesignUpdateOne) SetUsersID(id int) *DebitCardDesignUpdateOne {
	dcduo.mutation.SetUsersID(id)
	return dcduo
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (dcduo *DebitCardDesignUpdateOne) SetNillableUsersID(id *int) *DebitCardDesignUpdateOne {
	if id != nil {
		dcduo = dcduo.SetUsersID(*id)
	}
	return dcduo
}

// SetUsers sets the "users" edge to the Users entity.
func (dcduo *DebitCardDesignUpdateOne) SetUsers(u *Users) *DebitCardDesignUpdateOne {
	return dcduo.SetUsersID(u.ID)
}

// SetDebitCardsID sets the "debit_cards" edge to the DebitCards entity by ID.
func (dcduo *DebitCardDesignUpdateOne) SetDebitCardsID(id int) *DebitCardDesignUpdateOne {
	dcduo.mutation.SetDebitCardsID(id)
	return dcduo
}

// SetNillableDebitCardsID sets the "debit_cards" edge to the DebitCards entity by ID if the given value is not nil.
func (dcduo *DebitCardDesignUpdateOne) SetNillableDebitCardsID(id *int) *DebitCardDesignUpdateOne {
	if id != nil {
		dcduo = dcduo.SetDebitCardsID(*id)
	}
	return dcduo
}

// SetDebitCards sets the "debit_cards" edge to the DebitCards entity.
func (dcduo *DebitCardDesignUpdateOne) SetDebitCards(d *DebitCards) *DebitCardDesignUpdateOne {
	return dcduo.SetDebitCardsID(d.ID)
}

// Mutation returns the DebitCardDesignMutation object of the builder.
func (dcduo *DebitCardDesignUpdateOne) Mutation() *DebitCardDesignMutation {
	return dcduo.mutation
}

// ClearUsers clears the "users" edge to the Users entity.
func (dcduo *DebitCardDesignUpdateOne) ClearUsers() *DebitCardDesignUpdateOne {
	dcduo.mutation.ClearUsers()
	return dcduo
}

// ClearDebitCards clears the "debit_cards" edge to the DebitCards entity.
func (dcduo *DebitCardDesignUpdateOne) ClearDebitCards() *DebitCardDesignUpdateOne {
	dcduo.mutation.ClearDebitCards()
	return dcduo
}

// Where appends a list predicates to the DebitCardDesignUpdate builder.
func (dcduo *DebitCardDesignUpdateOne) Where(ps ...predicate.DebitCardDesign) *DebitCardDesignUpdateOne {
	dcduo.mutation.Where(ps...)
	return dcduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcduo *DebitCardDesignUpdateOne) Select(field string, fields ...string) *DebitCardDesignUpdateOne {
	dcduo.fields = append([]string{field}, fields...)
	return dcduo
}

// Save executes the query and returns the updated DebitCardDesign entity.
func (dcduo *DebitCardDesignUpdateOne) Save(ctx context.Context) (*DebitCardDesign, error) {
	return withHooks(ctx, dcduo.sqlSave, dcduo.mutation, dcduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcduo *DebitCardDesignUpdateOne) SaveX(ctx context.Context) *DebitCardDesign {
	node, err := dcduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcduo *DebitCardDesignUpdateOne) Exec(ctx context.Context) error {
	_, err := dcduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcduo *DebitCardDesignUpdateOne) ExecX(ctx context.Context) {
	if err := dcduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dcduo *DebitCardDesignUpdateOne) sqlSave(ctx context.Context) (_node *DebitCardDesign, err error) {
	_spec := sqlgraph.NewUpdateSpec(debitcarddesign.Table, debitcarddesign.Columns, sqlgraph.NewFieldSpec(debitcarddesign.FieldID, field.TypeInt))
	id, ok := dcduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DebitCardDesign.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dcduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, debitcarddesign.FieldID)
		for _, f := range fields {
			if !debitcarddesign.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != debitcarddesign.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcduo.mutation.Color(); ok {
		_spec.SetField(debitcarddesign.FieldColor, field.TypeString, value)
	}
	if value, ok := dcduo.mutation.BorderColor(); ok {
		_spec.SetField(debitcarddesign.FieldBorderColor, field.TypeString, value)
	}
	if dcduo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcarddesign.UsersTable,
			Columns: []string{debitcarddesign.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcduo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcarddesign.UsersTable,
			Columns: []string{debitcarddesign.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcduo.mutation.DebitCardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcarddesign.DebitCardsTable,
			Columns: []string{debitcarddesign.DebitCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcards.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcduo.mutation.DebitCardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcarddesign.DebitCardsTable,
			Columns: []string{debitcarddesign.DebitCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcards.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DebitCardDesign{config: dcduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{debitcarddesign.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dcduo.mutation.done = true
	return _node, nil
}
