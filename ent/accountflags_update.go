// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountflags"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accounts"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// AccountFlagsUpdate is the builder for updating AccountFlags entities.
type AccountFlagsUpdate struct {
	config
	hooks    []Hook
	mutation *AccountFlagsMutation
}

// Where appends a list predicates to the AccountFlagsUpdate builder.
func (afu *AccountFlagsUpdate) Where(ps ...predicate.AccountFlags) *AccountFlagsUpdate {
	afu.mutation.Where(ps...)
	return afu
}

// SetAccountID sets the "account_id" field.
func (afu *AccountFlagsUpdate) SetAccountID(i int) *AccountFlagsUpdate {
	afu.mutation.SetAccountID(i)
	return afu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (afu *AccountFlagsUpdate) SetNillableAccountID(i *int) *AccountFlagsUpdate {
	if i != nil {
		afu.SetAccountID(*i)
	}
	return afu
}

// ClearAccountID clears the value of the "account_id" field.
func (afu *AccountFlagsUpdate) ClearAccountID() *AccountFlagsUpdate {
	afu.mutation.ClearAccountID()
	return afu
}

// SetUserID sets the "user_id" field.
func (afu *AccountFlagsUpdate) SetUserID(i int) *AccountFlagsUpdate {
	afu.mutation.SetUserID(i)
	return afu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (afu *AccountFlagsUpdate) SetNillableUserID(i *int) *AccountFlagsUpdate {
	if i != nil {
		afu.SetUserID(*i)
	}
	return afu
}

// ClearUserID clears the value of the "user_id" field.
func (afu *AccountFlagsUpdate) ClearUserID() *AccountFlagsUpdate {
	afu.mutation.ClearUserID()
	return afu
}

// SetFlagType sets the "flag_type" field.
func (afu *AccountFlagsUpdate) SetFlagType(s string) *AccountFlagsUpdate {
	afu.mutation.SetFlagType(s)
	return afu
}

// SetNillableFlagType sets the "flag_type" field if the given value is not nil.
func (afu *AccountFlagsUpdate) SetNillableFlagType(s *string) *AccountFlagsUpdate {
	if s != nil {
		afu.SetFlagType(*s)
	}
	return afu
}

// SetFlagValue sets the "flag_value" field.
func (afu *AccountFlagsUpdate) SetFlagValue(s string) *AccountFlagsUpdate {
	afu.mutation.SetFlagValue(s)
	return afu
}

// SetNillableFlagValue sets the "flag_value" field if the given value is not nil.
func (afu *AccountFlagsUpdate) SetNillableFlagValue(s *string) *AccountFlagsUpdate {
	if s != nil {
		afu.SetFlagValue(*s)
	}
	return afu
}

// SetCreatedAt sets the "created_at" field.
func (afu *AccountFlagsUpdate) SetCreatedAt(t time.Time) *AccountFlagsUpdate {
	afu.mutation.SetCreatedAt(t)
	return afu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (afu *AccountFlagsUpdate) SetNillableCreatedAt(t *time.Time) *AccountFlagsUpdate {
	if t != nil {
		afu.SetCreatedAt(*t)
	}
	return afu
}

// SetUpdatedAt sets the "updated_at" field.
func (afu *AccountFlagsUpdate) SetUpdatedAt(t time.Time) *AccountFlagsUpdate {
	afu.mutation.SetUpdatedAt(t)
	return afu
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (afu *AccountFlagsUpdate) SetUsersID(id int) *AccountFlagsUpdate {
	afu.mutation.SetUsersID(id)
	return afu
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (afu *AccountFlagsUpdate) SetNillableUsersID(id *int) *AccountFlagsUpdate {
	if id != nil {
		afu = afu.SetUsersID(*id)
	}
	return afu
}

// SetUsers sets the "users" edge to the Users entity.
func (afu *AccountFlagsUpdate) SetUsers(u *Users) *AccountFlagsUpdate {
	return afu.SetUsersID(u.ID)
}

// SetAccountsID sets the "accounts" edge to the Accounts entity by ID.
func (afu *AccountFlagsUpdate) SetAccountsID(id int) *AccountFlagsUpdate {
	afu.mutation.SetAccountsID(id)
	return afu
}

// SetNillableAccountsID sets the "accounts" edge to the Accounts entity by ID if the given value is not nil.
func (afu *AccountFlagsUpdate) SetNillableAccountsID(id *int) *AccountFlagsUpdate {
	if id != nil {
		afu = afu.SetAccountsID(*id)
	}
	return afu
}

// SetAccounts sets the "accounts" edge to the Accounts entity.
func (afu *AccountFlagsUpdate) SetAccounts(a *Accounts) *AccountFlagsUpdate {
	return afu.SetAccountsID(a.ID)
}

// Mutation returns the AccountFlagsMutation object of the builder.
func (afu *AccountFlagsUpdate) Mutation() *AccountFlagsMutation {
	return afu.mutation
}

// ClearUsers clears the "users" edge to the Users entity.
func (afu *AccountFlagsUpdate) ClearUsers() *AccountFlagsUpdate {
	afu.mutation.ClearUsers()
	return afu
}

// ClearAccounts clears the "accounts" edge to the Accounts entity.
func (afu *AccountFlagsUpdate) ClearAccounts() *AccountFlagsUpdate {
	afu.mutation.ClearAccounts()
	return afu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (afu *AccountFlagsUpdate) Save(ctx context.Context) (int, error) {
	afu.defaults()
	return withHooks(ctx, afu.sqlSave, afu.mutation, afu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (afu *AccountFlagsUpdate) SaveX(ctx context.Context) int {
	affected, err := afu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (afu *AccountFlagsUpdate) Exec(ctx context.Context) error {
	_, err := afu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (afu *AccountFlagsUpdate) ExecX(ctx context.Context) {
	if err := afu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (afu *AccountFlagsUpdate) defaults() {
	if _, ok := afu.mutation.UpdatedAt(); !ok {
		v := accountflags.UpdateDefaultUpdatedAt()
		afu.mutation.SetUpdatedAt(v)
	}
}

func (afu *AccountFlagsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(accountflags.Table, accountflags.Columns, sqlgraph.NewFieldSpec(accountflags.FieldID, field.TypeInt))
	if ps := afu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := afu.mutation.FlagType(); ok {
		_spec.SetField(accountflags.FieldFlagType, field.TypeString, value)
	}
	if value, ok := afu.mutation.FlagValue(); ok {
		_spec.SetField(accountflags.FieldFlagValue, field.TypeString, value)
	}
	if value, ok := afu.mutation.CreatedAt(); ok {
		_spec.SetField(accountflags.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := afu.mutation.UpdatedAt(); ok {
		_spec.SetField(accountflags.FieldUpdatedAt, field.TypeTime, value)
	}
	if afu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountflags.UsersTable,
			Columns: []string{accountflags.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := afu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountflags.UsersTable,
			Columns: []string{accountflags.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if afu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountflags.AccountsTable,
			Columns: []string{accountflags.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := afu.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountflags.AccountsTable,
			Columns: []string{accountflags.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, afu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountflags.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	afu.mutation.done = true
	return n, nil
}

// AccountFlagsUpdateOne is the builder for updating a single AccountFlags entity.
type AccountFlagsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountFlagsMutation
}

// SetAccountID sets the "account_id" field.
func (afuo *AccountFlagsUpdateOne) SetAccountID(i int) *AccountFlagsUpdateOne {
	afuo.mutation.SetAccountID(i)
	return afuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (afuo *AccountFlagsUpdateOne) SetNillableAccountID(i *int) *AccountFlagsUpdateOne {
	if i != nil {
		afuo.SetAccountID(*i)
	}
	return afuo
}

// ClearAccountID clears the value of the "account_id" field.
func (afuo *AccountFlagsUpdateOne) ClearAccountID() *AccountFlagsUpdateOne {
	afuo.mutation.ClearAccountID()
	return afuo
}

// SetUserID sets the "user_id" field.
func (afuo *AccountFlagsUpdateOne) SetUserID(i int) *AccountFlagsUpdateOne {
	afuo.mutation.SetUserID(i)
	return afuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (afuo *AccountFlagsUpdateOne) SetNillableUserID(i *int) *AccountFlagsUpdateOne {
	if i != nil {
		afuo.SetUserID(*i)
	}
	return afuo
}

// ClearUserID clears the value of the "user_id" field.
func (afuo *AccountFlagsUpdateOne) ClearUserID() *AccountFlagsUpdateOne {
	afuo.mutation.ClearUserID()
	return afuo
}

// SetFlagType sets the "flag_type" field.
func (afuo *AccountFlagsUpdateOne) SetFlagType(s string) *AccountFlagsUpdateOne {
	afuo.mutation.SetFlagType(s)
	return afuo
}

// SetNillableFlagType sets the "flag_type" field if the given value is not nil.
func (afuo *AccountFlagsUpdateOne) SetNillableFlagType(s *string) *AccountFlagsUpdateOne {
	if s != nil {
		afuo.SetFlagType(*s)
	}
	return afuo
}

// SetFlagValue sets the "flag_value" field.
func (afuo *AccountFlagsUpdateOne) SetFlagValue(s string) *AccountFlagsUpdateOne {
	afuo.mutation.SetFlagValue(s)
	return afuo
}

// SetNillableFlagValue sets the "flag_value" field if the given value is not nil.
func (afuo *AccountFlagsUpdateOne) SetNillableFlagValue(s *string) *AccountFlagsUpdateOne {
	if s != nil {
		afuo.SetFlagValue(*s)
	}
	return afuo
}

// SetCreatedAt sets the "created_at" field.
func (afuo *AccountFlagsUpdateOne) SetCreatedAt(t time.Time) *AccountFlagsUpdateOne {
	afuo.mutation.SetCreatedAt(t)
	return afuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (afuo *AccountFlagsUpdateOne) SetNillableCreatedAt(t *time.Time) *AccountFlagsUpdateOne {
	if t != nil {
		afuo.SetCreatedAt(*t)
	}
	return afuo
}

// SetUpdatedAt sets the "updated_at" field.
func (afuo *AccountFlagsUpdateOne) SetUpdatedAt(t time.Time) *AccountFlagsUpdateOne {
	afuo.mutation.SetUpdatedAt(t)
	return afuo
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (afuo *AccountFlagsUpdateOne) SetUsersID(id int) *AccountFlagsUpdateOne {
	afuo.mutation.SetUsersID(id)
	return afuo
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (afuo *AccountFlagsUpdateOne) SetNillableUsersID(id *int) *AccountFlagsUpdateOne {
	if id != nil {
		afuo = afuo.SetUsersID(*id)
	}
	return afuo
}

// SetUsers sets the "users" edge to the Users entity.
func (afuo *AccountFlagsUpdateOne) SetUsers(u *Users) *AccountFlagsUpdateOne {
	return afuo.SetUsersID(u.ID)
}

// SetAccountsID sets the "accounts" edge to the Accounts entity by ID.
func (afuo *AccountFlagsUpdateOne) SetAccountsID(id int) *AccountFlagsUpdateOne {
	afuo.mutation.SetAccountsID(id)
	return afuo
}

// SetNillableAccountsID sets the "accounts" edge to the Accounts entity by ID if the given value is not nil.
func (afuo *AccountFlagsUpdateOne) SetNillableAccountsID(id *int) *AccountFlagsUpdateOne {
	if id != nil {
		afuo = afuo.SetAccountsID(*id)
	}
	return afuo
}

// SetAccounts sets the "accounts" edge to the Accounts entity.
func (afuo *AccountFlagsUpdateOne) SetAccounts(a *Accounts) *AccountFlagsUpdateOne {
	return afuo.SetAccountsID(a.ID)
}

// Mutation returns the AccountFlagsMutation object of the builder.
func (afuo *AccountFlagsUpdateOne) Mutation() *AccountFlagsMutation {
	return afuo.mutation
}

// ClearUsers clears the "users" edge to the Users entity.
func (afuo *AccountFlagsUpdateOne) ClearUsers() *AccountFlagsUpdateOne {
	afuo.mutation.ClearUsers()
	return afuo
}

// ClearAccounts clears the "accounts" edge to the Accounts entity.
func (afuo *AccountFlagsUpdateOne) ClearAccounts() *AccountFlagsUpdateOne {
	afuo.mutation.ClearAccounts()
	return afuo
}

// Where appends a list predicates to the AccountFlagsUpdate builder.
func (afuo *AccountFlagsUpdateOne) Where(ps ...predicate.AccountFlags) *AccountFlagsUpdateOne {
	afuo.mutation.Where(ps...)
	return afuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (afuo *AccountFlagsUpdateOne) Select(field string, fields ...string) *AccountFlagsUpdateOne {
	afuo.fields = append([]string{field}, fields...)
	return afuo
}

// Save executes the query and returns the updated AccountFlags entity.
func (afuo *AccountFlagsUpdateOne) Save(ctx context.Context) (*AccountFlags, error) {
	afuo.defaults()
	return withHooks(ctx, afuo.sqlSave, afuo.mutation, afuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (afuo *AccountFlagsUpdateOne) SaveX(ctx context.Context) *AccountFlags {
	node, err := afuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (afuo *AccountFlagsUpdateOne) Exec(ctx context.Context) error {
	_, err := afuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (afuo *AccountFlagsUpdateOne) ExecX(ctx context.Context) {
	if err := afuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (afuo *AccountFlagsUpdateOne) defaults() {
	if _, ok := afuo.mutation.UpdatedAt(); !ok {
		v := accountflags.UpdateDefaultUpdatedAt()
		afuo.mutation.SetUpdatedAt(v)
	}
}

func (afuo *AccountFlagsUpdateOne) sqlSave(ctx context.Context) (_node *AccountFlags, err error) {
	_spec := sqlgraph.NewUpdateSpec(accountflags.Table, accountflags.Columns, sqlgraph.NewFieldSpec(accountflags.FieldID, field.TypeInt))
	id, ok := afuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccountFlags.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := afuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountflags.FieldID)
		for _, f := range fields {
			if !accountflags.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accountflags.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := afuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := afuo.mutation.FlagType(); ok {
		_spec.SetField(accountflags.FieldFlagType, field.TypeString, value)
	}
	if value, ok := afuo.mutation.FlagValue(); ok {
		_spec.SetField(accountflags.FieldFlagValue, field.TypeString, value)
	}
	if value, ok := afuo.mutation.CreatedAt(); ok {
		_spec.SetField(accountflags.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := afuo.mutation.UpdatedAt(); ok {
		_spec.SetField(accountflags.FieldUpdatedAt, field.TypeTime, value)
	}
	if afuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountflags.UsersTable,
			Columns: []string{accountflags.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := afuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountflags.UsersTable,
			Columns: []string{accountflags.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if afuo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountflags.AccountsTable,
			Columns: []string{accountflags.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := afuo.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountflags.AccountsTable,
			Columns: []string{accountflags.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AccountFlags{config: afuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, afuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountflags.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	afuo.mutation.done = true
	return _node, nil
}
