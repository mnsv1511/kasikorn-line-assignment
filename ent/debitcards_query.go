// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcarddesign"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcarddetails"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcards"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcardstatus"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// DebitCardsQuery is the builder for querying DebitCards entities.
type DebitCardsQuery struct {
	config
	ctx                  *QueryContext
	order                []debitcards.OrderOption
	inters               []Interceptor
	predicates           []predicate.DebitCards
	withDebitCardDesign  *DebitCardDesignQuery
	withDebitCardDetails *DebitCardDetailsQuery
	withDebitCardStatus  *DebitCardStatusQuery
	withUsers            *UsersQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DebitCardsQuery builder.
func (dcq *DebitCardsQuery) Where(ps ...predicate.DebitCards) *DebitCardsQuery {
	dcq.predicates = append(dcq.predicates, ps...)
	return dcq
}

// Limit the number of records to be returned by this query.
func (dcq *DebitCardsQuery) Limit(limit int) *DebitCardsQuery {
	dcq.ctx.Limit = &limit
	return dcq
}

// Offset to start from.
func (dcq *DebitCardsQuery) Offset(offset int) *DebitCardsQuery {
	dcq.ctx.Offset = &offset
	return dcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dcq *DebitCardsQuery) Unique(unique bool) *DebitCardsQuery {
	dcq.ctx.Unique = &unique
	return dcq
}

// Order specifies how the records should be ordered.
func (dcq *DebitCardsQuery) Order(o ...debitcards.OrderOption) *DebitCardsQuery {
	dcq.order = append(dcq.order, o...)
	return dcq
}

// QueryDebitCardDesign chains the current query on the "debit_card_design" edge.
func (dcq *DebitCardsQuery) QueryDebitCardDesign() *DebitCardDesignQuery {
	query := (&DebitCardDesignClient{config: dcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(debitcards.Table, debitcards.FieldID, selector),
			sqlgraph.To(debitcarddesign.Table, debitcarddesign.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, debitcards.DebitCardDesignTable, debitcards.DebitCardDesignColumn),
		)
		fromU = sqlgraph.SetNeighbors(dcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDebitCardDetails chains the current query on the "debit_card_details" edge.
func (dcq *DebitCardsQuery) QueryDebitCardDetails() *DebitCardDetailsQuery {
	query := (&DebitCardDetailsClient{config: dcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(debitcards.Table, debitcards.FieldID, selector),
			sqlgraph.To(debitcarddetails.Table, debitcarddetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, debitcards.DebitCardDetailsTable, debitcards.DebitCardDetailsColumn),
		)
		fromU = sqlgraph.SetNeighbors(dcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDebitCardStatus chains the current query on the "debit_card_status" edge.
func (dcq *DebitCardsQuery) QueryDebitCardStatus() *DebitCardStatusQuery {
	query := (&DebitCardStatusClient{config: dcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(debitcards.Table, debitcards.FieldID, selector),
			sqlgraph.To(debitcardstatus.Table, debitcardstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, debitcards.DebitCardStatusTable, debitcards.DebitCardStatusColumn),
		)
		fromU = sqlgraph.SetNeighbors(dcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsers chains the current query on the "users" edge.
func (dcq *DebitCardsQuery) QueryUsers() *UsersQuery {
	query := (&UsersClient{config: dcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(debitcards.Table, debitcards.FieldID, selector),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, debitcards.UsersTable, debitcards.UsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(dcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DebitCards entity from the query.
// Returns a *NotFoundError when no DebitCards was found.
func (dcq *DebitCardsQuery) First(ctx context.Context) (*DebitCards, error) {
	nodes, err := dcq.Limit(1).All(setContextOp(ctx, dcq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{debitcards.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dcq *DebitCardsQuery) FirstX(ctx context.Context) *DebitCards {
	node, err := dcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DebitCards ID from the query.
// Returns a *NotFoundError when no DebitCards ID was found.
func (dcq *DebitCardsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = dcq.Limit(1).IDs(setContextOp(ctx, dcq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{debitcards.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dcq *DebitCardsQuery) FirstIDX(ctx context.Context) int {
	id, err := dcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DebitCards entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DebitCards entity is found.
// Returns a *NotFoundError when no DebitCards entities are found.
func (dcq *DebitCardsQuery) Only(ctx context.Context) (*DebitCards, error) {
	nodes, err := dcq.Limit(2).All(setContextOp(ctx, dcq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{debitcards.Label}
	default:
		return nil, &NotSingularError{debitcards.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dcq *DebitCardsQuery) OnlyX(ctx context.Context) *DebitCards {
	node, err := dcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DebitCards ID in the query.
// Returns a *NotSingularError when more than one DebitCards ID is found.
// Returns a *NotFoundError when no entities are found.
func (dcq *DebitCardsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = dcq.Limit(2).IDs(setContextOp(ctx, dcq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{debitcards.Label}
	default:
		err = &NotSingularError{debitcards.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dcq *DebitCardsQuery) OnlyIDX(ctx context.Context) int {
	id, err := dcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DebitCardsSlice.
func (dcq *DebitCardsQuery) All(ctx context.Context) ([]*DebitCards, error) {
	ctx = setContextOp(ctx, dcq.ctx, ent.OpQueryAll)
	if err := dcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DebitCards, *DebitCardsQuery]()
	return withInterceptors[[]*DebitCards](ctx, dcq, qr, dcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dcq *DebitCardsQuery) AllX(ctx context.Context) []*DebitCards {
	nodes, err := dcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DebitCards IDs.
func (dcq *DebitCardsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if dcq.ctx.Unique == nil && dcq.path != nil {
		dcq.Unique(true)
	}
	ctx = setContextOp(ctx, dcq.ctx, ent.OpQueryIDs)
	if err = dcq.Select(debitcards.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dcq *DebitCardsQuery) IDsX(ctx context.Context) []int {
	ids, err := dcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dcq *DebitCardsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dcq.ctx, ent.OpQueryCount)
	if err := dcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dcq, querierCount[*DebitCardsQuery](), dcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dcq *DebitCardsQuery) CountX(ctx context.Context) int {
	count, err := dcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dcq *DebitCardsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dcq.ctx, ent.OpQueryExist)
	switch _, err := dcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dcq *DebitCardsQuery) ExistX(ctx context.Context) bool {
	exist, err := dcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DebitCardsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dcq *DebitCardsQuery) Clone() *DebitCardsQuery {
	if dcq == nil {
		return nil
	}
	return &DebitCardsQuery{
		config:               dcq.config,
		ctx:                  dcq.ctx.Clone(),
		order:                append([]debitcards.OrderOption{}, dcq.order...),
		inters:               append([]Interceptor{}, dcq.inters...),
		predicates:           append([]predicate.DebitCards{}, dcq.predicates...),
		withDebitCardDesign:  dcq.withDebitCardDesign.Clone(),
		withDebitCardDetails: dcq.withDebitCardDetails.Clone(),
		withDebitCardStatus:  dcq.withDebitCardStatus.Clone(),
		withUsers:            dcq.withUsers.Clone(),
		// clone intermediate query.
		sql:  dcq.sql.Clone(),
		path: dcq.path,
	}
}

// WithDebitCardDesign tells the query-builder to eager-load the nodes that are connected to
// the "debit_card_design" edge. The optional arguments are used to configure the query builder of the edge.
func (dcq *DebitCardsQuery) WithDebitCardDesign(opts ...func(*DebitCardDesignQuery)) *DebitCardsQuery {
	query := (&DebitCardDesignClient{config: dcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dcq.withDebitCardDesign = query
	return dcq
}

// WithDebitCardDetails tells the query-builder to eager-load the nodes that are connected to
// the "debit_card_details" edge. The optional arguments are used to configure the query builder of the edge.
func (dcq *DebitCardsQuery) WithDebitCardDetails(opts ...func(*DebitCardDetailsQuery)) *DebitCardsQuery {
	query := (&DebitCardDetailsClient{config: dcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dcq.withDebitCardDetails = query
	return dcq
}

// WithDebitCardStatus tells the query-builder to eager-load the nodes that are connected to
// the "debit_card_status" edge. The optional arguments are used to configure the query builder of the edge.
func (dcq *DebitCardsQuery) WithDebitCardStatus(opts ...func(*DebitCardStatusQuery)) *DebitCardsQuery {
	query := (&DebitCardStatusClient{config: dcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dcq.withDebitCardStatus = query
	return dcq
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (dcq *DebitCardsQuery) WithUsers(opts ...func(*UsersQuery)) *DebitCardsQuery {
	query := (&UsersClient{config: dcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dcq.withUsers = query
	return dcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID int `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DebitCards.Query().
//		GroupBy(debitcards.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (dcq *DebitCardsQuery) GroupBy(field string, fields ...string) *DebitCardsGroupBy {
	dcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DebitCardsGroupBy{build: dcq}
	grbuild.flds = &dcq.ctx.Fields
	grbuild.label = debitcards.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID int `json:"user_id,omitempty"`
//	}
//
//	client.DebitCards.Query().
//		Select(debitcards.FieldUserID).
//		Scan(ctx, &v)
func (dcq *DebitCardsQuery) Select(fields ...string) *DebitCardsSelect {
	dcq.ctx.Fields = append(dcq.ctx.Fields, fields...)
	sbuild := &DebitCardsSelect{DebitCardsQuery: dcq}
	sbuild.label = debitcards.Label
	sbuild.flds, sbuild.scan = &dcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DebitCardsSelect configured with the given aggregations.
func (dcq *DebitCardsQuery) Aggregate(fns ...AggregateFunc) *DebitCardsSelect {
	return dcq.Select().Aggregate(fns...)
}

func (dcq *DebitCardsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dcq); err != nil {
				return err
			}
		}
	}
	for _, f := range dcq.ctx.Fields {
		if !debitcards.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dcq.path != nil {
		prev, err := dcq.path(ctx)
		if err != nil {
			return err
		}
		dcq.sql = prev
	}
	return nil
}

func (dcq *DebitCardsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DebitCards, error) {
	var (
		nodes       = []*DebitCards{}
		_spec       = dcq.querySpec()
		loadedTypes = [4]bool{
			dcq.withDebitCardDesign != nil,
			dcq.withDebitCardDetails != nil,
			dcq.withDebitCardStatus != nil,
			dcq.withUsers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DebitCards).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DebitCards{config: dcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dcq.withDebitCardDesign; query != nil {
		if err := dcq.loadDebitCardDesign(ctx, query, nodes,
			func(n *DebitCards) { n.Edges.DebitCardDesign = []*DebitCardDesign{} },
			func(n *DebitCards, e *DebitCardDesign) { n.Edges.DebitCardDesign = append(n.Edges.DebitCardDesign, e) }); err != nil {
			return nil, err
		}
	}
	if query := dcq.withDebitCardDetails; query != nil {
		if err := dcq.loadDebitCardDetails(ctx, query, nodes,
			func(n *DebitCards) { n.Edges.DebitCardDetails = []*DebitCardDetails{} },
			func(n *DebitCards, e *DebitCardDetails) {
				n.Edges.DebitCardDetails = append(n.Edges.DebitCardDetails, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := dcq.withDebitCardStatus; query != nil {
		if err := dcq.loadDebitCardStatus(ctx, query, nodes,
			func(n *DebitCards) { n.Edges.DebitCardStatus = []*DebitCardStatus{} },
			func(n *DebitCards, e *DebitCardStatus) { n.Edges.DebitCardStatus = append(n.Edges.DebitCardStatus, e) }); err != nil {
			return nil, err
		}
	}
	if query := dcq.withUsers; query != nil {
		if err := dcq.loadUsers(ctx, query, nodes, nil,
			func(n *DebitCards, e *Users) { n.Edges.Users = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dcq *DebitCardsQuery) loadDebitCardDesign(ctx context.Context, query *DebitCardDesignQuery, nodes []*DebitCards, init func(*DebitCards), assign func(*DebitCards, *DebitCardDesign)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*DebitCards)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(debitcarddesign.FieldCardID)
	}
	query.Where(predicate.DebitCardDesign(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(debitcards.DebitCardDesignColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CardID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "card_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (dcq *DebitCardsQuery) loadDebitCardDetails(ctx context.Context, query *DebitCardDetailsQuery, nodes []*DebitCards, init func(*DebitCards), assign func(*DebitCards, *DebitCardDetails)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*DebitCards)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(debitcarddetails.FieldCardID)
	}
	query.Where(predicate.DebitCardDetails(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(debitcards.DebitCardDetailsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CardID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "card_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (dcq *DebitCardsQuery) loadDebitCardStatus(ctx context.Context, query *DebitCardStatusQuery, nodes []*DebitCards, init func(*DebitCards), assign func(*DebitCards, *DebitCardStatus)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*DebitCards)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(debitcardstatus.FieldCardID)
	}
	query.Where(predicate.DebitCardStatus(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(debitcards.DebitCardStatusColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CardID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "card_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (dcq *DebitCardsQuery) loadUsers(ctx context.Context, query *UsersQuery, nodes []*DebitCards, init func(*DebitCards), assign func(*DebitCards, *Users)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*DebitCards)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(users.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (dcq *DebitCardsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dcq.querySpec()
	_spec.Node.Columns = dcq.ctx.Fields
	if len(dcq.ctx.Fields) > 0 {
		_spec.Unique = dcq.ctx.Unique != nil && *dcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, dcq.driver, _spec)
}

func (dcq *DebitCardsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(debitcards.Table, debitcards.Columns, sqlgraph.NewFieldSpec(debitcards.FieldID, field.TypeInt))
	_spec.From = dcq.sql
	if unique := dcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if dcq.path != nil {
		_spec.Unique = true
	}
	if fields := dcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, debitcards.FieldID)
		for i := range fields {
			if fields[i] != debitcards.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if dcq.withUsers != nil {
			_spec.Node.AddColumnOnce(debitcards.FieldUserID)
		}
	}
	if ps := dcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dcq *DebitCardsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dcq.driver.Dialect())
	t1 := builder.Table(debitcards.Table)
	columns := dcq.ctx.Fields
	if len(columns) == 0 {
		columns = debitcards.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dcq.sql != nil {
		selector = dcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dcq.ctx.Unique != nil && *dcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range dcq.predicates {
		p(selector)
	}
	for _, p := range dcq.order {
		p(selector)
	}
	if offset := dcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DebitCardsGroupBy is the group-by builder for DebitCards entities.
type DebitCardsGroupBy struct {
	selector
	build *DebitCardsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dcgb *DebitCardsGroupBy) Aggregate(fns ...AggregateFunc) *DebitCardsGroupBy {
	dcgb.fns = append(dcgb.fns, fns...)
	return dcgb
}

// Scan applies the selector query and scans the result into the given value.
func (dcgb *DebitCardsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dcgb.build.ctx, ent.OpQueryGroupBy)
	if err := dcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DebitCardsQuery, *DebitCardsGroupBy](ctx, dcgb.build, dcgb, dcgb.build.inters, v)
}

func (dcgb *DebitCardsGroupBy) sqlScan(ctx context.Context, root *DebitCardsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dcgb.fns))
	for _, fn := range dcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dcgb.flds)+len(dcgb.fns))
		for _, f := range *dcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DebitCardsSelect is the builder for selecting fields of DebitCards entities.
type DebitCardsSelect struct {
	*DebitCardsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dcs *DebitCardsSelect) Aggregate(fns ...AggregateFunc) *DebitCardsSelect {
	dcs.fns = append(dcs.fns, fns...)
	return dcs
}

// Scan applies the selector query and scans the result into the given value.
func (dcs *DebitCardsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dcs.ctx, ent.OpQuerySelect)
	if err := dcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DebitCardsQuery, *DebitCardsSelect](ctx, dcs.DebitCardsQuery, dcs, dcs.inters, v)
}

func (dcs *DebitCardsSelect) sqlScan(ctx context.Context, root *DebitCardsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dcs.fns))
	for _, fn := range dcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
