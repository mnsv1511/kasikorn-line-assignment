// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/usergreetings"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// UserGreetingsCreate is the builder for creating a UserGreetings entity.
type UserGreetingsCreate struct {
	config
	mutation *UserGreetingsMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (ugc *UserGreetingsCreate) SetUserID(i int) *UserGreetingsCreate {
	ugc.mutation.SetUserID(i)
	return ugc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ugc *UserGreetingsCreate) SetNillableUserID(i *int) *UserGreetingsCreate {
	if i != nil {
		ugc.SetUserID(*i)
	}
	return ugc
}

// SetGreeting sets the "greeting" field.
func (ugc *UserGreetingsCreate) SetGreeting(s string) *UserGreetingsCreate {
	ugc.mutation.SetGreeting(s)
	return ugc
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (ugc *UserGreetingsCreate) SetUsersID(id int) *UserGreetingsCreate {
	ugc.mutation.SetUsersID(id)
	return ugc
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (ugc *UserGreetingsCreate) SetNillableUsersID(id *int) *UserGreetingsCreate {
	if id != nil {
		ugc = ugc.SetUsersID(*id)
	}
	return ugc
}

// SetUsers sets the "users" edge to the Users entity.
func (ugc *UserGreetingsCreate) SetUsers(u *Users) *UserGreetingsCreate {
	return ugc.SetUsersID(u.ID)
}

// Mutation returns the UserGreetingsMutation object of the builder.
func (ugc *UserGreetingsCreate) Mutation() *UserGreetingsMutation {
	return ugc.mutation
}

// Save creates the UserGreetings in the database.
func (ugc *UserGreetingsCreate) Save(ctx context.Context) (*UserGreetings, error) {
	return withHooks(ctx, ugc.sqlSave, ugc.mutation, ugc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ugc *UserGreetingsCreate) SaveX(ctx context.Context) *UserGreetings {
	v, err := ugc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ugc *UserGreetingsCreate) Exec(ctx context.Context) error {
	_, err := ugc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ugc *UserGreetingsCreate) ExecX(ctx context.Context) {
	if err := ugc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ugc *UserGreetingsCreate) check() error {
	if _, ok := ugc.mutation.Greeting(); !ok {
		return &ValidationError{Name: "greeting", err: errors.New(`ent: missing required field "UserGreetings.greeting"`)}
	}
	return nil
}

func (ugc *UserGreetingsCreate) sqlSave(ctx context.Context) (*UserGreetings, error) {
	if err := ugc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ugc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ugc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ugc.mutation.id = &_node.ID
	ugc.mutation.done = true
	return _node, nil
}

func (ugc *UserGreetingsCreate) createSpec() (*UserGreetings, *sqlgraph.CreateSpec) {
	var (
		_node = &UserGreetings{config: ugc.config}
		_spec = sqlgraph.NewCreateSpec(usergreetings.Table, sqlgraph.NewFieldSpec(usergreetings.FieldID, field.TypeInt))
	)
	if value, ok := ugc.mutation.Greeting(); ok {
		_spec.SetField(usergreetings.FieldGreeting, field.TypeString, value)
		_node.Greeting = value
	}
	if nodes := ugc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usergreetings.UsersTable,
			Columns: []string{usergreetings.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserGreetingsCreateBulk is the builder for creating many UserGreetings entities in bulk.
type UserGreetingsCreateBulk struct {
	config
	err      error
	builders []*UserGreetingsCreate
}

// Save creates the UserGreetings entities in the database.
func (ugcb *UserGreetingsCreateBulk) Save(ctx context.Context) ([]*UserGreetings, error) {
	if ugcb.err != nil {
		return nil, ugcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ugcb.builders))
	nodes := make([]*UserGreetings, len(ugcb.builders))
	mutators := make([]Mutator, len(ugcb.builders))
	for i := range ugcb.builders {
		func(i int, root context.Context) {
			builder := ugcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserGreetingsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ugcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ugcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ugcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ugcb *UserGreetingsCreateBulk) SaveX(ctx context.Context) []*UserGreetings {
	v, err := ugcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ugcb *UserGreetingsCreateBulk) Exec(ctx context.Context) error {
	_, err := ugcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ugcb *UserGreetingsCreateBulk) ExecX(ctx context.Context) {
	if err := ugcb.Exec(ctx); err != nil {
		panic(err)
	}
}
