// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountdetails"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accounts"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// AccountDetailsQuery is the builder for querying AccountDetails entities.
type AccountDetailsQuery struct {
	config
	ctx          *QueryContext
	order        []accountdetails.OrderOption
	inters       []Interceptor
	predicates   []predicate.AccountDetails
	withUsers    *UsersQuery
	withAccounts *AccountsQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AccountDetailsQuery builder.
func (adq *AccountDetailsQuery) Where(ps ...predicate.AccountDetails) *AccountDetailsQuery {
	adq.predicates = append(adq.predicates, ps...)
	return adq
}

// Limit the number of records to be returned by this query.
func (adq *AccountDetailsQuery) Limit(limit int) *AccountDetailsQuery {
	adq.ctx.Limit = &limit
	return adq
}

// Offset to start from.
func (adq *AccountDetailsQuery) Offset(offset int) *AccountDetailsQuery {
	adq.ctx.Offset = &offset
	return adq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (adq *AccountDetailsQuery) Unique(unique bool) *AccountDetailsQuery {
	adq.ctx.Unique = &unique
	return adq
}

// Order specifies how the records should be ordered.
func (adq *AccountDetailsQuery) Order(o ...accountdetails.OrderOption) *AccountDetailsQuery {
	adq.order = append(adq.order, o...)
	return adq
}

// QueryUsers chains the current query on the "users" edge.
func (adq *AccountDetailsQuery) QueryUsers() *UsersQuery {
	query := (&UsersClient{config: adq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := adq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := adq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(accountdetails.Table, accountdetails.FieldID, selector),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, accountdetails.UsersTable, accountdetails.UsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(adq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAccounts chains the current query on the "accounts" edge.
func (adq *AccountDetailsQuery) QueryAccounts() *AccountsQuery {
	query := (&AccountsClient{config: adq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := adq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := adq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(accountdetails.Table, accountdetails.FieldID, selector),
			sqlgraph.To(accounts.Table, accounts.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, accountdetails.AccountsTable, accountdetails.AccountsColumn),
		)
		fromU = sqlgraph.SetNeighbors(adq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AccountDetails entity from the query.
// Returns a *NotFoundError when no AccountDetails was found.
func (adq *AccountDetailsQuery) First(ctx context.Context) (*AccountDetails, error) {
	nodes, err := adq.Limit(1).All(setContextOp(ctx, adq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{accountdetails.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (adq *AccountDetailsQuery) FirstX(ctx context.Context) *AccountDetails {
	node, err := adq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AccountDetails ID from the query.
// Returns a *NotFoundError when no AccountDetails ID was found.
func (adq *AccountDetailsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = adq.Limit(1).IDs(setContextOp(ctx, adq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{accountdetails.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (adq *AccountDetailsQuery) FirstIDX(ctx context.Context) int {
	id, err := adq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AccountDetails entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AccountDetails entity is found.
// Returns a *NotFoundError when no AccountDetails entities are found.
func (adq *AccountDetailsQuery) Only(ctx context.Context) (*AccountDetails, error) {
	nodes, err := adq.Limit(2).All(setContextOp(ctx, adq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{accountdetails.Label}
	default:
		return nil, &NotSingularError{accountdetails.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (adq *AccountDetailsQuery) OnlyX(ctx context.Context) *AccountDetails {
	node, err := adq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AccountDetails ID in the query.
// Returns a *NotSingularError when more than one AccountDetails ID is found.
// Returns a *NotFoundError when no entities are found.
func (adq *AccountDetailsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = adq.Limit(2).IDs(setContextOp(ctx, adq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{accountdetails.Label}
	default:
		err = &NotSingularError{accountdetails.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (adq *AccountDetailsQuery) OnlyIDX(ctx context.Context) int {
	id, err := adq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AccountDetailsSlice.
func (adq *AccountDetailsQuery) All(ctx context.Context) ([]*AccountDetails, error) {
	ctx = setContextOp(ctx, adq.ctx, ent.OpQueryAll)
	if err := adq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AccountDetails, *AccountDetailsQuery]()
	return withInterceptors[[]*AccountDetails](ctx, adq, qr, adq.inters)
}

// AllX is like All, but panics if an error occurs.
func (adq *AccountDetailsQuery) AllX(ctx context.Context) []*AccountDetails {
	nodes, err := adq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AccountDetails IDs.
func (adq *AccountDetailsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if adq.ctx.Unique == nil && adq.path != nil {
		adq.Unique(true)
	}
	ctx = setContextOp(ctx, adq.ctx, ent.OpQueryIDs)
	if err = adq.Select(accountdetails.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (adq *AccountDetailsQuery) IDsX(ctx context.Context) []int {
	ids, err := adq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (adq *AccountDetailsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, adq.ctx, ent.OpQueryCount)
	if err := adq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, adq, querierCount[*AccountDetailsQuery](), adq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (adq *AccountDetailsQuery) CountX(ctx context.Context) int {
	count, err := adq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (adq *AccountDetailsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, adq.ctx, ent.OpQueryExist)
	switch _, err := adq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (adq *AccountDetailsQuery) ExistX(ctx context.Context) bool {
	exist, err := adq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AccountDetailsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (adq *AccountDetailsQuery) Clone() *AccountDetailsQuery {
	if adq == nil {
		return nil
	}
	return &AccountDetailsQuery{
		config:       adq.config,
		ctx:          adq.ctx.Clone(),
		order:        append([]accountdetails.OrderOption{}, adq.order...),
		inters:       append([]Interceptor{}, adq.inters...),
		predicates:   append([]predicate.AccountDetails{}, adq.predicates...),
		withUsers:    adq.withUsers.Clone(),
		withAccounts: adq.withAccounts.Clone(),
		// clone intermediate query.
		sql:  adq.sql.Clone(),
		path: adq.path,
	}
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (adq *AccountDetailsQuery) WithUsers(opts ...func(*UsersQuery)) *AccountDetailsQuery {
	query := (&UsersClient{config: adq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	adq.withUsers = query
	return adq
}

// WithAccounts tells the query-builder to eager-load the nodes that are connected to
// the "accounts" edge. The optional arguments are used to configure the query builder of the edge.
func (adq *AccountDetailsQuery) WithAccounts(opts ...func(*AccountsQuery)) *AccountDetailsQuery {
	query := (&AccountsClient{config: adq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	adq.withAccounts = query
	return adq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AccountID int `json:"account_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AccountDetails.Query().
//		GroupBy(accountdetails.FieldAccountID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (adq *AccountDetailsQuery) GroupBy(field string, fields ...string) *AccountDetailsGroupBy {
	adq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AccountDetailsGroupBy{build: adq}
	grbuild.flds = &adq.ctx.Fields
	grbuild.label = accountdetails.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AccountID int `json:"account_id,omitempty"`
//	}
//
//	client.AccountDetails.Query().
//		Select(accountdetails.FieldAccountID).
//		Scan(ctx, &v)
func (adq *AccountDetailsQuery) Select(fields ...string) *AccountDetailsSelect {
	adq.ctx.Fields = append(adq.ctx.Fields, fields...)
	sbuild := &AccountDetailsSelect{AccountDetailsQuery: adq}
	sbuild.label = accountdetails.Label
	sbuild.flds, sbuild.scan = &adq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AccountDetailsSelect configured with the given aggregations.
func (adq *AccountDetailsQuery) Aggregate(fns ...AggregateFunc) *AccountDetailsSelect {
	return adq.Select().Aggregate(fns...)
}

func (adq *AccountDetailsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range adq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, adq); err != nil {
				return err
			}
		}
	}
	for _, f := range adq.ctx.Fields {
		if !accountdetails.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if adq.path != nil {
		prev, err := adq.path(ctx)
		if err != nil {
			return err
		}
		adq.sql = prev
	}
	return nil
}

func (adq *AccountDetailsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AccountDetails, error) {
	var (
		nodes       = []*AccountDetails{}
		_spec       = adq.querySpec()
		loadedTypes = [2]bool{
			adq.withUsers != nil,
			adq.withAccounts != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AccountDetails).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AccountDetails{config: adq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, adq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := adq.withUsers; query != nil {
		if err := adq.loadUsers(ctx, query, nodes, nil,
			func(n *AccountDetails, e *Users) { n.Edges.Users = e }); err != nil {
			return nil, err
		}
	}
	if query := adq.withAccounts; query != nil {
		if err := adq.loadAccounts(ctx, query, nodes, nil,
			func(n *AccountDetails, e *Accounts) { n.Edges.Accounts = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (adq *AccountDetailsQuery) loadUsers(ctx context.Context, query *UsersQuery, nodes []*AccountDetails, init func(*AccountDetails), assign func(*AccountDetails, *Users)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*AccountDetails)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(users.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (adq *AccountDetailsQuery) loadAccounts(ctx context.Context, query *AccountsQuery, nodes []*AccountDetails, init func(*AccountDetails), assign func(*AccountDetails, *Accounts)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*AccountDetails)
	for i := range nodes {
		fk := nodes[i].AccountID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(accounts.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "account_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (adq *AccountDetailsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := adq.querySpec()
	_spec.Node.Columns = adq.ctx.Fields
	if len(adq.ctx.Fields) > 0 {
		_spec.Unique = adq.ctx.Unique != nil && *adq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, adq.driver, _spec)
}

func (adq *AccountDetailsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(accountdetails.Table, accountdetails.Columns, sqlgraph.NewFieldSpec(accountdetails.FieldID, field.TypeInt))
	_spec.From = adq.sql
	if unique := adq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if adq.path != nil {
		_spec.Unique = true
	}
	if fields := adq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountdetails.FieldID)
		for i := range fields {
			if fields[i] != accountdetails.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if adq.withUsers != nil {
			_spec.Node.AddColumnOnce(accountdetails.FieldUserID)
		}
		if adq.withAccounts != nil {
			_spec.Node.AddColumnOnce(accountdetails.FieldAccountID)
		}
	}
	if ps := adq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := adq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := adq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := adq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (adq *AccountDetailsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(adq.driver.Dialect())
	t1 := builder.Table(accountdetails.Table)
	columns := adq.ctx.Fields
	if len(columns) == 0 {
		columns = accountdetails.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if adq.sql != nil {
		selector = adq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if adq.ctx.Unique != nil && *adq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range adq.predicates {
		p(selector)
	}
	for _, p := range adq.order {
		p(selector)
	}
	if offset := adq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := adq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AccountDetailsGroupBy is the group-by builder for AccountDetails entities.
type AccountDetailsGroupBy struct {
	selector
	build *AccountDetailsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (adgb *AccountDetailsGroupBy) Aggregate(fns ...AggregateFunc) *AccountDetailsGroupBy {
	adgb.fns = append(adgb.fns, fns...)
	return adgb
}

// Scan applies the selector query and scans the result into the given value.
func (adgb *AccountDetailsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, adgb.build.ctx, ent.OpQueryGroupBy)
	if err := adgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AccountDetailsQuery, *AccountDetailsGroupBy](ctx, adgb.build, adgb, adgb.build.inters, v)
}

func (adgb *AccountDetailsGroupBy) sqlScan(ctx context.Context, root *AccountDetailsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(adgb.fns))
	for _, fn := range adgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*adgb.flds)+len(adgb.fns))
		for _, f := range *adgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*adgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := adgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AccountDetailsSelect is the builder for selecting fields of AccountDetails entities.
type AccountDetailsSelect struct {
	*AccountDetailsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ads *AccountDetailsSelect) Aggregate(fns ...AggregateFunc) *AccountDetailsSelect {
	ads.fns = append(ads.fns, fns...)
	return ads
}

// Scan applies the selector query and scans the result into the given value.
func (ads *AccountDetailsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ads.ctx, ent.OpQuerySelect)
	if err := ads.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AccountDetailsQuery, *AccountDetailsSelect](ctx, ads.AccountDetailsQuery, ads, ads.inters, v)
}

func (ads *AccountDetailsSelect) sqlScan(ctx context.Context, root *AccountDetailsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ads.fns))
	for _, fn := range ads.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ads.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ads.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
