// Code generated by ent, DO NOT EDIT.

package debitcardstatus

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldLTE(FieldID, id))
}

// CardID applies equality check predicate on the "card_id" field. It's identical to CardIDEQ.
func CardID(v int) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldEQ(FieldCardID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldEQ(FieldUserID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldEQ(FieldStatus, v))
}

// CardIDEQ applies the EQ predicate on the "card_id" field.
func CardIDEQ(v int) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldEQ(FieldCardID, v))
}

// CardIDNEQ applies the NEQ predicate on the "card_id" field.
func CardIDNEQ(v int) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldNEQ(FieldCardID, v))
}

// CardIDIn applies the In predicate on the "card_id" field.
func CardIDIn(vs ...int) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldIn(FieldCardID, vs...))
}

// CardIDNotIn applies the NotIn predicate on the "card_id" field.
func CardIDNotIn(vs ...int) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldNotIn(FieldCardID, vs...))
}

// CardIDIsNil applies the IsNil predicate on the "card_id" field.
func CardIDIsNil() predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldIsNull(FieldCardID))
}

// CardIDNotNil applies the NotNil predicate on the "card_id" field.
func CardIDNotNil() predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldNotNull(FieldCardID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldNotNull(FieldUserID))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.FieldContainsFold(FieldStatus, v))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.DebitCardStatus {
	return predicate.DebitCardStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.Users) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDebitCards applies the HasEdge predicate on the "debit_cards" edge.
func HasDebitCards() predicate.DebitCardStatus {
	return predicate.DebitCardStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DebitCardsTable, DebitCardsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDebitCardsWith applies the HasEdge predicate on the "debit_cards" edge with a given conditions (other predicates).
func HasDebitCardsWith(preds ...predicate.DebitCards) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(func(s *sql.Selector) {
		step := newDebitCardsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DebitCardStatus) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DebitCardStatus) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DebitCardStatus) predicate.DebitCardStatus {
	return predicate.DebitCardStatus(sql.NotPredicates(p))
}
