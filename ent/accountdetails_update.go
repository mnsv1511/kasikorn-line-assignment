// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountdetails"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accounts"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// AccountDetailsUpdate is the builder for updating AccountDetails entities.
type AccountDetailsUpdate struct {
	config
	hooks    []Hook
	mutation *AccountDetailsMutation
}

// Where appends a list predicates to the AccountDetailsUpdate builder.
func (adu *AccountDetailsUpdate) Where(ps ...predicate.AccountDetails) *AccountDetailsUpdate {
	adu.mutation.Where(ps...)
	return adu
}

// SetAccountID sets the "account_id" field.
func (adu *AccountDetailsUpdate) SetAccountID(i int) *AccountDetailsUpdate {
	adu.mutation.SetAccountID(i)
	return adu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (adu *AccountDetailsUpdate) SetNillableAccountID(i *int) *AccountDetailsUpdate {
	if i != nil {
		adu.SetAccountID(*i)
	}
	return adu
}

// ClearAccountID clears the value of the "account_id" field.
func (adu *AccountDetailsUpdate) ClearAccountID() *AccountDetailsUpdate {
	adu.mutation.ClearAccountID()
	return adu
}

// SetUserID sets the "user_id" field.
func (adu *AccountDetailsUpdate) SetUserID(i int) *AccountDetailsUpdate {
	adu.mutation.SetUserID(i)
	return adu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (adu *AccountDetailsUpdate) SetNillableUserID(i *int) *AccountDetailsUpdate {
	if i != nil {
		adu.SetUserID(*i)
	}
	return adu
}

// ClearUserID clears the value of the "user_id" field.
func (adu *AccountDetailsUpdate) ClearUserID() *AccountDetailsUpdate {
	adu.mutation.ClearUserID()
	return adu
}

// SetColor sets the "color" field.
func (adu *AccountDetailsUpdate) SetColor(s string) *AccountDetailsUpdate {
	adu.mutation.SetColor(s)
	return adu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (adu *AccountDetailsUpdate) SetNillableColor(s *string) *AccountDetailsUpdate {
	if s != nil {
		adu.SetColor(*s)
	}
	return adu
}

// SetIsMainAccount sets the "is_main_account" field.
func (adu *AccountDetailsUpdate) SetIsMainAccount(b bool) *AccountDetailsUpdate {
	adu.mutation.SetIsMainAccount(b)
	return adu
}

// SetNillableIsMainAccount sets the "is_main_account" field if the given value is not nil.
func (adu *AccountDetailsUpdate) SetNillableIsMainAccount(b *bool) *AccountDetailsUpdate {
	if b != nil {
		adu.SetIsMainAccount(*b)
	}
	return adu
}

// SetProgress sets the "progress" field.
func (adu *AccountDetailsUpdate) SetProgress(i int) *AccountDetailsUpdate {
	adu.mutation.ResetProgress()
	adu.mutation.SetProgress(i)
	return adu
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (adu *AccountDetailsUpdate) SetNillableProgress(i *int) *AccountDetailsUpdate {
	if i != nil {
		adu.SetProgress(*i)
	}
	return adu
}

// AddProgress adds i to the "progress" field.
func (adu *AccountDetailsUpdate) AddProgress(i int) *AccountDetailsUpdate {
	adu.mutation.AddProgress(i)
	return adu
}

// SetName sets the "name" field.
func (adu *AccountDetailsUpdate) SetName(s string) *AccountDetailsUpdate {
	adu.mutation.SetName(s)
	return adu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (adu *AccountDetailsUpdate) SetNillableName(s *string) *AccountDetailsUpdate {
	if s != nil {
		adu.SetName(*s)
	}
	return adu
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (adu *AccountDetailsUpdate) SetUsersID(id int) *AccountDetailsUpdate {
	adu.mutation.SetUsersID(id)
	return adu
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (adu *AccountDetailsUpdate) SetNillableUsersID(id *int) *AccountDetailsUpdate {
	if id != nil {
		adu = adu.SetUsersID(*id)
	}
	return adu
}

// SetUsers sets the "users" edge to the Users entity.
func (adu *AccountDetailsUpdate) SetUsers(u *Users) *AccountDetailsUpdate {
	return adu.SetUsersID(u.ID)
}

// SetAccountsID sets the "accounts" edge to the Accounts entity by ID.
func (adu *AccountDetailsUpdate) SetAccountsID(id int) *AccountDetailsUpdate {
	adu.mutation.SetAccountsID(id)
	return adu
}

// SetNillableAccountsID sets the "accounts" edge to the Accounts entity by ID if the given value is not nil.
func (adu *AccountDetailsUpdate) SetNillableAccountsID(id *int) *AccountDetailsUpdate {
	if id != nil {
		adu = adu.SetAccountsID(*id)
	}
	return adu
}

// SetAccounts sets the "accounts" edge to the Accounts entity.
func (adu *AccountDetailsUpdate) SetAccounts(a *Accounts) *AccountDetailsUpdate {
	return adu.SetAccountsID(a.ID)
}

// Mutation returns the AccountDetailsMutation object of the builder.
func (adu *AccountDetailsUpdate) Mutation() *AccountDetailsMutation {
	return adu.mutation
}

// ClearUsers clears the "users" edge to the Users entity.
func (adu *AccountDetailsUpdate) ClearUsers() *AccountDetailsUpdate {
	adu.mutation.ClearUsers()
	return adu
}

// ClearAccounts clears the "accounts" edge to the Accounts entity.
func (adu *AccountDetailsUpdate) ClearAccounts() *AccountDetailsUpdate {
	adu.mutation.ClearAccounts()
	return adu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (adu *AccountDetailsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, adu.sqlSave, adu.mutation, adu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (adu *AccountDetailsUpdate) SaveX(ctx context.Context) int {
	affected, err := adu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (adu *AccountDetailsUpdate) Exec(ctx context.Context) error {
	_, err := adu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adu *AccountDetailsUpdate) ExecX(ctx context.Context) {
	if err := adu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (adu *AccountDetailsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(accountdetails.Table, accountdetails.Columns, sqlgraph.NewFieldSpec(accountdetails.FieldID, field.TypeInt))
	if ps := adu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := adu.mutation.Color(); ok {
		_spec.SetField(accountdetails.FieldColor, field.TypeString, value)
	}
	if value, ok := adu.mutation.IsMainAccount(); ok {
		_spec.SetField(accountdetails.FieldIsMainAccount, field.TypeBool, value)
	}
	if value, ok := adu.mutation.Progress(); ok {
		_spec.SetField(accountdetails.FieldProgress, field.TypeInt, value)
	}
	if value, ok := adu.mutation.AddedProgress(); ok {
		_spec.AddField(accountdetails.FieldProgress, field.TypeInt, value)
	}
	if value, ok := adu.mutation.Name(); ok {
		_spec.SetField(accountdetails.FieldName, field.TypeString, value)
	}
	if adu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountdetails.UsersTable,
			Columns: []string{accountdetails.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := adu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountdetails.UsersTable,
			Columns: []string{accountdetails.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if adu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountdetails.AccountsTable,
			Columns: []string{accountdetails.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := adu.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountdetails.AccountsTable,
			Columns: []string{accountdetails.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, adu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountdetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	adu.mutation.done = true
	return n, nil
}

// AccountDetailsUpdateOne is the builder for updating a single AccountDetails entity.
type AccountDetailsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountDetailsMutation
}

// SetAccountID sets the "account_id" field.
func (aduo *AccountDetailsUpdateOne) SetAccountID(i int) *AccountDetailsUpdateOne {
	aduo.mutation.SetAccountID(i)
	return aduo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (aduo *AccountDetailsUpdateOne) SetNillableAccountID(i *int) *AccountDetailsUpdateOne {
	if i != nil {
		aduo.SetAccountID(*i)
	}
	return aduo
}

// ClearAccountID clears the value of the "account_id" field.
func (aduo *AccountDetailsUpdateOne) ClearAccountID() *AccountDetailsUpdateOne {
	aduo.mutation.ClearAccountID()
	return aduo
}

// SetUserID sets the "user_id" field.
func (aduo *AccountDetailsUpdateOne) SetUserID(i int) *AccountDetailsUpdateOne {
	aduo.mutation.SetUserID(i)
	return aduo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aduo *AccountDetailsUpdateOne) SetNillableUserID(i *int) *AccountDetailsUpdateOne {
	if i != nil {
		aduo.SetUserID(*i)
	}
	return aduo
}

// ClearUserID clears the value of the "user_id" field.
func (aduo *AccountDetailsUpdateOne) ClearUserID() *AccountDetailsUpdateOne {
	aduo.mutation.ClearUserID()
	return aduo
}

// SetColor sets the "color" field.
func (aduo *AccountDetailsUpdateOne) SetColor(s string) *AccountDetailsUpdateOne {
	aduo.mutation.SetColor(s)
	return aduo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (aduo *AccountDetailsUpdateOne) SetNillableColor(s *string) *AccountDetailsUpdateOne {
	if s != nil {
		aduo.SetColor(*s)
	}
	return aduo
}

// SetIsMainAccount sets the "is_main_account" field.
func (aduo *AccountDetailsUpdateOne) SetIsMainAccount(b bool) *AccountDetailsUpdateOne {
	aduo.mutation.SetIsMainAccount(b)
	return aduo
}

// SetNillableIsMainAccount sets the "is_main_account" field if the given value is not nil.
func (aduo *AccountDetailsUpdateOne) SetNillableIsMainAccount(b *bool) *AccountDetailsUpdateOne {
	if b != nil {
		aduo.SetIsMainAccount(*b)
	}
	return aduo
}

// SetProgress sets the "progress" field.
func (aduo *AccountDetailsUpdateOne) SetProgress(i int) *AccountDetailsUpdateOne {
	aduo.mutation.ResetProgress()
	aduo.mutation.SetProgress(i)
	return aduo
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (aduo *AccountDetailsUpdateOne) SetNillableProgress(i *int) *AccountDetailsUpdateOne {
	if i != nil {
		aduo.SetProgress(*i)
	}
	return aduo
}

// AddProgress adds i to the "progress" field.
func (aduo *AccountDetailsUpdateOne) AddProgress(i int) *AccountDetailsUpdateOne {
	aduo.mutation.AddProgress(i)
	return aduo
}

// SetName sets the "name" field.
func (aduo *AccountDetailsUpdateOne) SetName(s string) *AccountDetailsUpdateOne {
	aduo.mutation.SetName(s)
	return aduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aduo *AccountDetailsUpdateOne) SetNillableName(s *string) *AccountDetailsUpdateOne {
	if s != nil {
		aduo.SetName(*s)
	}
	return aduo
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (aduo *AccountDetailsUpdateOne) SetUsersID(id int) *AccountDetailsUpdateOne {
	aduo.mutation.SetUsersID(id)
	return aduo
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (aduo *AccountDetailsUpdateOne) SetNillableUsersID(id *int) *AccountDetailsUpdateOne {
	if id != nil {
		aduo = aduo.SetUsersID(*id)
	}
	return aduo
}

// SetUsers sets the "users" edge to the Users entity.
func (aduo *AccountDetailsUpdateOne) SetUsers(u *Users) *AccountDetailsUpdateOne {
	return aduo.SetUsersID(u.ID)
}

// SetAccountsID sets the "accounts" edge to the Accounts entity by ID.
func (aduo *AccountDetailsUpdateOne) SetAccountsID(id int) *AccountDetailsUpdateOne {
	aduo.mutation.SetAccountsID(id)
	return aduo
}

// SetNillableAccountsID sets the "accounts" edge to the Accounts entity by ID if the given value is not nil.
func (aduo *AccountDetailsUpdateOne) SetNillableAccountsID(id *int) *AccountDetailsUpdateOne {
	if id != nil {
		aduo = aduo.SetAccountsID(*id)
	}
	return aduo
}

// SetAccounts sets the "accounts" edge to the Accounts entity.
func (aduo *AccountDetailsUpdateOne) SetAccounts(a *Accounts) *AccountDetailsUpdateOne {
	return aduo.SetAccountsID(a.ID)
}

// Mutation returns the AccountDetailsMutation object of the builder.
func (aduo *AccountDetailsUpdateOne) Mutation() *AccountDetailsMutation {
	return aduo.mutation
}

// ClearUsers clears the "users" edge to the Users entity.
func (aduo *AccountDetailsUpdateOne) ClearUsers() *AccountDetailsUpdateOne {
	aduo.mutation.ClearUsers()
	return aduo
}

// ClearAccounts clears the "accounts" edge to the Accounts entity.
func (aduo *AccountDetailsUpdateOne) ClearAccounts() *AccountDetailsUpdateOne {
	aduo.mutation.ClearAccounts()
	return aduo
}

// Where appends a list predicates to the AccountDetailsUpdate builder.
func (aduo *AccountDetailsUpdateOne) Where(ps ...predicate.AccountDetails) *AccountDetailsUpdateOne {
	aduo.mutation.Where(ps...)
	return aduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aduo *AccountDetailsUpdateOne) Select(field string, fields ...string) *AccountDetailsUpdateOne {
	aduo.fields = append([]string{field}, fields...)
	return aduo
}

// Save executes the query and returns the updated AccountDetails entity.
func (aduo *AccountDetailsUpdateOne) Save(ctx context.Context) (*AccountDetails, error) {
	return withHooks(ctx, aduo.sqlSave, aduo.mutation, aduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aduo *AccountDetailsUpdateOne) SaveX(ctx context.Context) *AccountDetails {
	node, err := aduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aduo *AccountDetailsUpdateOne) Exec(ctx context.Context) error {
	_, err := aduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aduo *AccountDetailsUpdateOne) ExecX(ctx context.Context) {
	if err := aduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aduo *AccountDetailsUpdateOne) sqlSave(ctx context.Context) (_node *AccountDetails, err error) {
	_spec := sqlgraph.NewUpdateSpec(accountdetails.Table, accountdetails.Columns, sqlgraph.NewFieldSpec(accountdetails.FieldID, field.TypeInt))
	id, ok := aduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccountDetails.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountdetails.FieldID)
		for _, f := range fields {
			if !accountdetails.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accountdetails.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aduo.mutation.Color(); ok {
		_spec.SetField(accountdetails.FieldColor, field.TypeString, value)
	}
	if value, ok := aduo.mutation.IsMainAccount(); ok {
		_spec.SetField(accountdetails.FieldIsMainAccount, field.TypeBool, value)
	}
	if value, ok := aduo.mutation.Progress(); ok {
		_spec.SetField(accountdetails.FieldProgress, field.TypeInt, value)
	}
	if value, ok := aduo.mutation.AddedProgress(); ok {
		_spec.AddField(accountdetails.FieldProgress, field.TypeInt, value)
	}
	if value, ok := aduo.mutation.Name(); ok {
		_spec.SetField(accountdetails.FieldName, field.TypeString, value)
	}
	if aduo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountdetails.UsersTable,
			Columns: []string{accountdetails.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aduo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountdetails.UsersTable,
			Columns: []string{accountdetails.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aduo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountdetails.AccountsTable,
			Columns: []string{accountdetails.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aduo.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountdetails.AccountsTable,
			Columns: []string{accountdetails.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AccountDetails{config: aduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountdetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aduo.mutation.done = true
	return _node, nil
}
