// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/usergreetings"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// UserGreetingsUpdate is the builder for updating UserGreetings entities.
type UserGreetingsUpdate struct {
	config
	hooks    []Hook
	mutation *UserGreetingsMutation
}

// Where appends a list predicates to the UserGreetingsUpdate builder.
func (ugu *UserGreetingsUpdate) Where(ps ...predicate.UserGreetings) *UserGreetingsUpdate {
	ugu.mutation.Where(ps...)
	return ugu
}

// SetUserID sets the "user_id" field.
func (ugu *UserGreetingsUpdate) SetUserID(i int) *UserGreetingsUpdate {
	ugu.mutation.SetUserID(i)
	return ugu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ugu *UserGreetingsUpdate) SetNillableUserID(i *int) *UserGreetingsUpdate {
	if i != nil {
		ugu.SetUserID(*i)
	}
	return ugu
}

// ClearUserID clears the value of the "user_id" field.
func (ugu *UserGreetingsUpdate) ClearUserID() *UserGreetingsUpdate {
	ugu.mutation.ClearUserID()
	return ugu
}

// SetGreeting sets the "greeting" field.
func (ugu *UserGreetingsUpdate) SetGreeting(s string) *UserGreetingsUpdate {
	ugu.mutation.SetGreeting(s)
	return ugu
}

// SetNillableGreeting sets the "greeting" field if the given value is not nil.
func (ugu *UserGreetingsUpdate) SetNillableGreeting(s *string) *UserGreetingsUpdate {
	if s != nil {
		ugu.SetGreeting(*s)
	}
	return ugu
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (ugu *UserGreetingsUpdate) SetUsersID(id int) *UserGreetingsUpdate {
	ugu.mutation.SetUsersID(id)
	return ugu
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (ugu *UserGreetingsUpdate) SetNillableUsersID(id *int) *UserGreetingsUpdate {
	if id != nil {
		ugu = ugu.SetUsersID(*id)
	}
	return ugu
}

// SetUsers sets the "users" edge to the Users entity.
func (ugu *UserGreetingsUpdate) SetUsers(u *Users) *UserGreetingsUpdate {
	return ugu.SetUsersID(u.ID)
}

// Mutation returns the UserGreetingsMutation object of the builder.
func (ugu *UserGreetingsUpdate) Mutation() *UserGreetingsMutation {
	return ugu.mutation
}

// ClearUsers clears the "users" edge to the Users entity.
func (ugu *UserGreetingsUpdate) ClearUsers() *UserGreetingsUpdate {
	ugu.mutation.ClearUsers()
	return ugu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ugu *UserGreetingsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ugu.sqlSave, ugu.mutation, ugu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ugu *UserGreetingsUpdate) SaveX(ctx context.Context) int {
	affected, err := ugu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ugu *UserGreetingsUpdate) Exec(ctx context.Context) error {
	_, err := ugu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ugu *UserGreetingsUpdate) ExecX(ctx context.Context) {
	if err := ugu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ugu *UserGreetingsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(usergreetings.Table, usergreetings.Columns, sqlgraph.NewFieldSpec(usergreetings.FieldID, field.TypeInt))
	if ps := ugu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ugu.mutation.Greeting(); ok {
		_spec.SetField(usergreetings.FieldGreeting, field.TypeString, value)
	}
	if ugu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usergreetings.UsersTable,
			Columns: []string{usergreetings.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ugu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usergreetings.UsersTable,
			Columns: []string{usergreetings.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ugu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usergreetings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ugu.mutation.done = true
	return n, nil
}

// UserGreetingsUpdateOne is the builder for updating a single UserGreetings entity.
type UserGreetingsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserGreetingsMutation
}

// SetUserID sets the "user_id" field.
func (uguo *UserGreetingsUpdateOne) SetUserID(i int) *UserGreetingsUpdateOne {
	uguo.mutation.SetUserID(i)
	return uguo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uguo *UserGreetingsUpdateOne) SetNillableUserID(i *int) *UserGreetingsUpdateOne {
	if i != nil {
		uguo.SetUserID(*i)
	}
	return uguo
}

// ClearUserID clears the value of the "user_id" field.
func (uguo *UserGreetingsUpdateOne) ClearUserID() *UserGreetingsUpdateOne {
	uguo.mutation.ClearUserID()
	return uguo
}

// SetGreeting sets the "greeting" field.
func (uguo *UserGreetingsUpdateOne) SetGreeting(s string) *UserGreetingsUpdateOne {
	uguo.mutation.SetGreeting(s)
	return uguo
}

// SetNillableGreeting sets the "greeting" field if the given value is not nil.
func (uguo *UserGreetingsUpdateOne) SetNillableGreeting(s *string) *UserGreetingsUpdateOne {
	if s != nil {
		uguo.SetGreeting(*s)
	}
	return uguo
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (uguo *UserGreetingsUpdateOne) SetUsersID(id int) *UserGreetingsUpdateOne {
	uguo.mutation.SetUsersID(id)
	return uguo
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (uguo *UserGreetingsUpdateOne) SetNillableUsersID(id *int) *UserGreetingsUpdateOne {
	if id != nil {
		uguo = uguo.SetUsersID(*id)
	}
	return uguo
}

// SetUsers sets the "users" edge to the Users entity.
func (uguo *UserGreetingsUpdateOne) SetUsers(u *Users) *UserGreetingsUpdateOne {
	return uguo.SetUsersID(u.ID)
}

// Mutation returns the UserGreetingsMutation object of the builder.
func (uguo *UserGreetingsUpdateOne) Mutation() *UserGreetingsMutation {
	return uguo.mutation
}

// ClearUsers clears the "users" edge to the Users entity.
func (uguo *UserGreetingsUpdateOne) ClearUsers() *UserGreetingsUpdateOne {
	uguo.mutation.ClearUsers()
	return uguo
}

// Where appends a list predicates to the UserGreetingsUpdate builder.
func (uguo *UserGreetingsUpdateOne) Where(ps ...predicate.UserGreetings) *UserGreetingsUpdateOne {
	uguo.mutation.Where(ps...)
	return uguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uguo *UserGreetingsUpdateOne) Select(field string, fields ...string) *UserGreetingsUpdateOne {
	uguo.fields = append([]string{field}, fields...)
	return uguo
}

// Save executes the query and returns the updated UserGreetings entity.
func (uguo *UserGreetingsUpdateOne) Save(ctx context.Context) (*UserGreetings, error) {
	return withHooks(ctx, uguo.sqlSave, uguo.mutation, uguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uguo *UserGreetingsUpdateOne) SaveX(ctx context.Context) *UserGreetings {
	node, err := uguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uguo *UserGreetingsUpdateOne) Exec(ctx context.Context) error {
	_, err := uguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uguo *UserGreetingsUpdateOne) ExecX(ctx context.Context) {
	if err := uguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uguo *UserGreetingsUpdateOne) sqlSave(ctx context.Context) (_node *UserGreetings, err error) {
	_spec := sqlgraph.NewUpdateSpec(usergreetings.Table, usergreetings.Columns, sqlgraph.NewFieldSpec(usergreetings.FieldID, field.TypeInt))
	id, ok := uguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserGreetings.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usergreetings.FieldID)
		for _, f := range fields {
			if !usergreetings.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usergreetings.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uguo.mutation.Greeting(); ok {
		_spec.SetField(usergreetings.FieldGreeting, field.TypeString, value)
	}
	if uguo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usergreetings.UsersTable,
			Columns: []string{usergreetings.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uguo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usergreetings.UsersTable,
			Columns: []string{usergreetings.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserGreetings{config: uguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usergreetings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uguo.mutation.done = true
	return _node, nil
}
