// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/banners"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// BannersUpdate is the builder for updating Banners entities.
type BannersUpdate struct {
	config
	hooks    []Hook
	mutation *BannersMutation
}

// Where appends a list predicates to the BannersUpdate builder.
func (bu *BannersUpdate) Where(ps ...predicate.Banners) *BannersUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUserID sets the "user_id" field.
func (bu *BannersUpdate) SetUserID(i int) *BannersUpdate {
	bu.mutation.SetUserID(i)
	return bu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bu *BannersUpdate) SetNillableUserID(i *int) *BannersUpdate {
	if i != nil {
		bu.SetUserID(*i)
	}
	return bu
}

// ClearUserID clears the value of the "user_id" field.
func (bu *BannersUpdate) ClearUserID() *BannersUpdate {
	bu.mutation.ClearUserID()
	return bu
}

// SetTitle sets the "title" field.
func (bu *BannersUpdate) SetTitle(s string) *BannersUpdate {
	bu.mutation.SetTitle(s)
	return bu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bu *BannersUpdate) SetNillableTitle(s *string) *BannersUpdate {
	if s != nil {
		bu.SetTitle(*s)
	}
	return bu
}

// SetDescription sets the "description" field.
func (bu *BannersUpdate) SetDescription(s string) *BannersUpdate {
	bu.mutation.SetDescription(s)
	return bu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bu *BannersUpdate) SetNillableDescription(s *string) *BannersUpdate {
	if s != nil {
		bu.SetDescription(*s)
	}
	return bu
}

// SetImage sets the "image" field.
func (bu *BannersUpdate) SetImage(s string) *BannersUpdate {
	bu.mutation.SetImage(s)
	return bu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (bu *BannersUpdate) SetNillableImage(s *string) *BannersUpdate {
	if s != nil {
		bu.SetImage(*s)
	}
	return bu
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (bu *BannersUpdate) SetUsersID(id int) *BannersUpdate {
	bu.mutation.SetUsersID(id)
	return bu
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (bu *BannersUpdate) SetNillableUsersID(id *int) *BannersUpdate {
	if id != nil {
		bu = bu.SetUsersID(*id)
	}
	return bu
}

// SetUsers sets the "users" edge to the Users entity.
func (bu *BannersUpdate) SetUsers(u *Users) *BannersUpdate {
	return bu.SetUsersID(u.ID)
}

// Mutation returns the BannersMutation object of the builder.
func (bu *BannersUpdate) Mutation() *BannersMutation {
	return bu.mutation
}

// ClearUsers clears the "users" edge to the Users entity.
func (bu *BannersUpdate) ClearUsers() *BannersUpdate {
	bu.mutation.ClearUsers()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BannersUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BannersUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BannersUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BannersUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BannersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(banners.Table, banners.Columns, sqlgraph.NewFieldSpec(banners.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Title(); ok {
		_spec.SetField(banners.FieldTitle, field.TypeString, value)
	}
	if value, ok := bu.mutation.Description(); ok {
		_spec.SetField(banners.FieldDescription, field.TypeString, value)
	}
	if value, ok := bu.mutation.Image(); ok {
		_spec.SetField(banners.FieldImage, field.TypeString, value)
	}
	if bu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   banners.UsersTable,
			Columns: []string{banners.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   banners.UsersTable,
			Columns: []string{banners.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{banners.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BannersUpdateOne is the builder for updating a single Banners entity.
type BannersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BannersMutation
}

// SetUserID sets the "user_id" field.
func (buo *BannersUpdateOne) SetUserID(i int) *BannersUpdateOne {
	buo.mutation.SetUserID(i)
	return buo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (buo *BannersUpdateOne) SetNillableUserID(i *int) *BannersUpdateOne {
	if i != nil {
		buo.SetUserID(*i)
	}
	return buo
}

// ClearUserID clears the value of the "user_id" field.
func (buo *BannersUpdateOne) ClearUserID() *BannersUpdateOne {
	buo.mutation.ClearUserID()
	return buo
}

// SetTitle sets the "title" field.
func (buo *BannersUpdateOne) SetTitle(s string) *BannersUpdateOne {
	buo.mutation.SetTitle(s)
	return buo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (buo *BannersUpdateOne) SetNillableTitle(s *string) *BannersUpdateOne {
	if s != nil {
		buo.SetTitle(*s)
	}
	return buo
}

// SetDescription sets the "description" field.
func (buo *BannersUpdateOne) SetDescription(s string) *BannersUpdateOne {
	buo.mutation.SetDescription(s)
	return buo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (buo *BannersUpdateOne) SetNillableDescription(s *string) *BannersUpdateOne {
	if s != nil {
		buo.SetDescription(*s)
	}
	return buo
}

// SetImage sets the "image" field.
func (buo *BannersUpdateOne) SetImage(s string) *BannersUpdateOne {
	buo.mutation.SetImage(s)
	return buo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (buo *BannersUpdateOne) SetNillableImage(s *string) *BannersUpdateOne {
	if s != nil {
		buo.SetImage(*s)
	}
	return buo
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (buo *BannersUpdateOne) SetUsersID(id int) *BannersUpdateOne {
	buo.mutation.SetUsersID(id)
	return buo
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (buo *BannersUpdateOne) SetNillableUsersID(id *int) *BannersUpdateOne {
	if id != nil {
		buo = buo.SetUsersID(*id)
	}
	return buo
}

// SetUsers sets the "users" edge to the Users entity.
func (buo *BannersUpdateOne) SetUsers(u *Users) *BannersUpdateOne {
	return buo.SetUsersID(u.ID)
}

// Mutation returns the BannersMutation object of the builder.
func (buo *BannersUpdateOne) Mutation() *BannersMutation {
	return buo.mutation
}

// ClearUsers clears the "users" edge to the Users entity.
func (buo *BannersUpdateOne) ClearUsers() *BannersUpdateOne {
	buo.mutation.ClearUsers()
	return buo
}

// Where appends a list predicates to the BannersUpdate builder.
func (buo *BannersUpdateOne) Where(ps ...predicate.Banners) *BannersUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BannersUpdateOne) Select(field string, fields ...string) *BannersUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Banners entity.
func (buo *BannersUpdateOne) Save(ctx context.Context) (*Banners, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BannersUpdateOne) SaveX(ctx context.Context) *Banners {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BannersUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BannersUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BannersUpdateOne) sqlSave(ctx context.Context) (_node *Banners, err error) {
	_spec := sqlgraph.NewUpdateSpec(banners.Table, banners.Columns, sqlgraph.NewFieldSpec(banners.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Banners.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, banners.FieldID)
		for _, f := range fields {
			if !banners.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != banners.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Title(); ok {
		_spec.SetField(banners.FieldTitle, field.TypeString, value)
	}
	if value, ok := buo.mutation.Description(); ok {
		_spec.SetField(banners.FieldDescription, field.TypeString, value)
	}
	if value, ok := buo.mutation.Image(); ok {
		_spec.SetField(banners.FieldImage, field.TypeString, value)
	}
	if buo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   banners.UsersTable,
			Columns: []string{banners.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   banners.UsersTable,
			Columns: []string{banners.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Banners{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{banners.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
