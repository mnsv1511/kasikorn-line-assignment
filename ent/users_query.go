// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountbalances"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountdetails"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountflags"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accounts"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/banners"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcarddesign"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcarddetails"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcards"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcardstatus"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/transactions"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/usergreetings"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// UsersQuery is the builder for querying Users entities.
type UsersQuery struct {
	config
	ctx                  *QueryContext
	order                []users.OrderOption
	inters               []Interceptor
	predicates           []predicate.Users
	withAccounts         *AccountsQuery
	withBanners          *BannersQuery
	withDebitCards       *DebitCardsQuery
	withTransactions     *TransactionsQuery
	withUserGreetings    *UserGreetingsQuery
	withAccountBalances  *AccountBalancesQuery
	withAccountDetails   *AccountDetailsQuery
	withAccountFlags     *AccountFlagsQuery
	withDebitCardDesign  *DebitCardDesignQuery
	withDebitCardDetails *DebitCardDetailsQuery
	withDebitCardStatus  *DebitCardStatusQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UsersQuery builder.
func (uq *UsersQuery) Where(ps ...predicate.Users) *UsersQuery {
	uq.predicates = append(uq.predicates, ps...)
	return uq
}

// Limit the number of records to be returned by this query.
func (uq *UsersQuery) Limit(limit int) *UsersQuery {
	uq.ctx.Limit = &limit
	return uq
}

// Offset to start from.
func (uq *UsersQuery) Offset(offset int) *UsersQuery {
	uq.ctx.Offset = &offset
	return uq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uq *UsersQuery) Unique(unique bool) *UsersQuery {
	uq.ctx.Unique = &unique
	return uq
}

// Order specifies how the records should be ordered.
func (uq *UsersQuery) Order(o ...users.OrderOption) *UsersQuery {
	uq.order = append(uq.order, o...)
	return uq
}

// QueryAccounts chains the current query on the "accounts" edge.
func (uq *UsersQuery) QueryAccounts() *AccountsQuery {
	query := (&AccountsClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, selector),
			sqlgraph.To(accounts.Table, accounts.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.AccountsTable, users.AccountsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBanners chains the current query on the "banners" edge.
func (uq *UsersQuery) QueryBanners() *BannersQuery {
	query := (&BannersClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, selector),
			sqlgraph.To(banners.Table, banners.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.BannersTable, users.BannersColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDebitCards chains the current query on the "debit_cards" edge.
func (uq *UsersQuery) QueryDebitCards() *DebitCardsQuery {
	query := (&DebitCardsClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, selector),
			sqlgraph.To(debitcards.Table, debitcards.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.DebitCardsTable, users.DebitCardsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTransactions chains the current query on the "transactions" edge.
func (uq *UsersQuery) QueryTransactions() *TransactionsQuery {
	query := (&TransactionsClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, selector),
			sqlgraph.To(transactions.Table, transactions.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.TransactionsTable, users.TransactionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserGreetings chains the current query on the "user_greetings" edge.
func (uq *UsersQuery) QueryUserGreetings() *UserGreetingsQuery {
	query := (&UserGreetingsClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, selector),
			sqlgraph.To(usergreetings.Table, usergreetings.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.UserGreetingsTable, users.UserGreetingsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAccountBalances chains the current query on the "account_balances" edge.
func (uq *UsersQuery) QueryAccountBalances() *AccountBalancesQuery {
	query := (&AccountBalancesClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, selector),
			sqlgraph.To(accountbalances.Table, accountbalances.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.AccountBalancesTable, users.AccountBalancesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAccountDetails chains the current query on the "account_details" edge.
func (uq *UsersQuery) QueryAccountDetails() *AccountDetailsQuery {
	query := (&AccountDetailsClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, selector),
			sqlgraph.To(accountdetails.Table, accountdetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.AccountDetailsTable, users.AccountDetailsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAccountFlags chains the current query on the "account_flags" edge.
func (uq *UsersQuery) QueryAccountFlags() *AccountFlagsQuery {
	query := (&AccountFlagsClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, selector),
			sqlgraph.To(accountflags.Table, accountflags.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.AccountFlagsTable, users.AccountFlagsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDebitCardDesign chains the current query on the "debit_card_design" edge.
func (uq *UsersQuery) QueryDebitCardDesign() *DebitCardDesignQuery {
	query := (&DebitCardDesignClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, selector),
			sqlgraph.To(debitcarddesign.Table, debitcarddesign.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.DebitCardDesignTable, users.DebitCardDesignColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDebitCardDetails chains the current query on the "debit_card_details" edge.
func (uq *UsersQuery) QueryDebitCardDetails() *DebitCardDetailsQuery {
	query := (&DebitCardDetailsClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, selector),
			sqlgraph.To(debitcarddetails.Table, debitcarddetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.DebitCardDetailsTable, users.DebitCardDetailsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDebitCardStatus chains the current query on the "debit_card_status" edge.
func (uq *UsersQuery) QueryDebitCardStatus() *DebitCardStatusQuery {
	query := (&DebitCardStatusClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, selector),
			sqlgraph.To(debitcardstatus.Table, debitcardstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.DebitCardStatusTable, users.DebitCardStatusColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Users entity from the query.
// Returns a *NotFoundError when no Users was found.
func (uq *UsersQuery) First(ctx context.Context) (*Users, error) {
	nodes, err := uq.Limit(1).All(setContextOp(ctx, uq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{users.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uq *UsersQuery) FirstX(ctx context.Context) *Users {
	node, err := uq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Users ID from the query.
// Returns a *NotFoundError when no Users ID was found.
func (uq *UsersQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uq.Limit(1).IDs(setContextOp(ctx, uq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{users.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uq *UsersQuery) FirstIDX(ctx context.Context) int {
	id, err := uq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Users entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Users entity is found.
// Returns a *NotFoundError when no Users entities are found.
func (uq *UsersQuery) Only(ctx context.Context) (*Users, error) {
	nodes, err := uq.Limit(2).All(setContextOp(ctx, uq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{users.Label}
	default:
		return nil, &NotSingularError{users.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uq *UsersQuery) OnlyX(ctx context.Context) *Users {
	node, err := uq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Users ID in the query.
// Returns a *NotSingularError when more than one Users ID is found.
// Returns a *NotFoundError when no entities are found.
func (uq *UsersQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uq.Limit(2).IDs(setContextOp(ctx, uq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{users.Label}
	default:
		err = &NotSingularError{users.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uq *UsersQuery) OnlyIDX(ctx context.Context) int {
	id, err := uq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UsersSlice.
func (uq *UsersQuery) All(ctx context.Context) ([]*Users, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryAll)
	if err := uq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Users, *UsersQuery]()
	return withInterceptors[[]*Users](ctx, uq, qr, uq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uq *UsersQuery) AllX(ctx context.Context) []*Users {
	nodes, err := uq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Users IDs.
func (uq *UsersQuery) IDs(ctx context.Context) (ids []int, err error) {
	if uq.ctx.Unique == nil && uq.path != nil {
		uq.Unique(true)
	}
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryIDs)
	if err = uq.Select(users.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uq *UsersQuery) IDsX(ctx context.Context) []int {
	ids, err := uq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uq *UsersQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryCount)
	if err := uq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uq, querierCount[*UsersQuery](), uq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uq *UsersQuery) CountX(ctx context.Context) int {
	count, err := uq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uq *UsersQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryExist)
	switch _, err := uq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uq *UsersQuery) ExistX(ctx context.Context) bool {
	exist, err := uq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UsersQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uq *UsersQuery) Clone() *UsersQuery {
	if uq == nil {
		return nil
	}
	return &UsersQuery{
		config:               uq.config,
		ctx:                  uq.ctx.Clone(),
		order:                append([]users.OrderOption{}, uq.order...),
		inters:               append([]Interceptor{}, uq.inters...),
		predicates:           append([]predicate.Users{}, uq.predicates...),
		withAccounts:         uq.withAccounts.Clone(),
		withBanners:          uq.withBanners.Clone(),
		withDebitCards:       uq.withDebitCards.Clone(),
		withTransactions:     uq.withTransactions.Clone(),
		withUserGreetings:    uq.withUserGreetings.Clone(),
		withAccountBalances:  uq.withAccountBalances.Clone(),
		withAccountDetails:   uq.withAccountDetails.Clone(),
		withAccountFlags:     uq.withAccountFlags.Clone(),
		withDebitCardDesign:  uq.withDebitCardDesign.Clone(),
		withDebitCardDetails: uq.withDebitCardDetails.Clone(),
		withDebitCardStatus:  uq.withDebitCardStatus.Clone(),
		// clone intermediate query.
		sql:  uq.sql.Clone(),
		path: uq.path,
	}
}

// WithAccounts tells the query-builder to eager-load the nodes that are connected to
// the "accounts" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UsersQuery) WithAccounts(opts ...func(*AccountsQuery)) *UsersQuery {
	query := (&AccountsClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withAccounts = query
	return uq
}

// WithBanners tells the query-builder to eager-load the nodes that are connected to
// the "banners" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UsersQuery) WithBanners(opts ...func(*BannersQuery)) *UsersQuery {
	query := (&BannersClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withBanners = query
	return uq
}

// WithDebitCards tells the query-builder to eager-load the nodes that are connected to
// the "debit_cards" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UsersQuery) WithDebitCards(opts ...func(*DebitCardsQuery)) *UsersQuery {
	query := (&DebitCardsClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withDebitCards = query
	return uq
}

// WithTransactions tells the query-builder to eager-load the nodes that are connected to
// the "transactions" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UsersQuery) WithTransactions(opts ...func(*TransactionsQuery)) *UsersQuery {
	query := (&TransactionsClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withTransactions = query
	return uq
}

// WithUserGreetings tells the query-builder to eager-load the nodes that are connected to
// the "user_greetings" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UsersQuery) WithUserGreetings(opts ...func(*UserGreetingsQuery)) *UsersQuery {
	query := (&UserGreetingsClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withUserGreetings = query
	return uq
}

// WithAccountBalances tells the query-builder to eager-load the nodes that are connected to
// the "account_balances" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UsersQuery) WithAccountBalances(opts ...func(*AccountBalancesQuery)) *UsersQuery {
	query := (&AccountBalancesClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withAccountBalances = query
	return uq
}

// WithAccountDetails tells the query-builder to eager-load the nodes that are connected to
// the "account_details" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UsersQuery) WithAccountDetails(opts ...func(*AccountDetailsQuery)) *UsersQuery {
	query := (&AccountDetailsClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withAccountDetails = query
	return uq
}

// WithAccountFlags tells the query-builder to eager-load the nodes that are connected to
// the "account_flags" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UsersQuery) WithAccountFlags(opts ...func(*AccountFlagsQuery)) *UsersQuery {
	query := (&AccountFlagsClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withAccountFlags = query
	return uq
}

// WithDebitCardDesign tells the query-builder to eager-load the nodes that are connected to
// the "debit_card_design" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UsersQuery) WithDebitCardDesign(opts ...func(*DebitCardDesignQuery)) *UsersQuery {
	query := (&DebitCardDesignClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withDebitCardDesign = query
	return uq
}

// WithDebitCardDetails tells the query-builder to eager-load the nodes that are connected to
// the "debit_card_details" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UsersQuery) WithDebitCardDetails(opts ...func(*DebitCardDetailsQuery)) *UsersQuery {
	query := (&DebitCardDetailsClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withDebitCardDetails = query
	return uq
}

// WithDebitCardStatus tells the query-builder to eager-load the nodes that are connected to
// the "debit_card_status" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UsersQuery) WithDebitCardStatus(opts ...func(*DebitCardStatusQuery)) *UsersQuery {
	query := (&DebitCardStatusClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withDebitCardStatus = query
	return uq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Users.Query().
//		GroupBy(users.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uq *UsersQuery) GroupBy(field string, fields ...string) *UsersGroupBy {
	uq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UsersGroupBy{build: uq}
	grbuild.flds = &uq.ctx.Fields
	grbuild.label = users.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Users.Query().
//		Select(users.FieldName).
//		Scan(ctx, &v)
func (uq *UsersQuery) Select(fields ...string) *UsersSelect {
	uq.ctx.Fields = append(uq.ctx.Fields, fields...)
	sbuild := &UsersSelect{UsersQuery: uq}
	sbuild.label = users.Label
	sbuild.flds, sbuild.scan = &uq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UsersSelect configured with the given aggregations.
func (uq *UsersQuery) Aggregate(fns ...AggregateFunc) *UsersSelect {
	return uq.Select().Aggregate(fns...)
}

func (uq *UsersQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uq); err != nil {
				return err
			}
		}
	}
	for _, f := range uq.ctx.Fields {
		if !users.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uq.path != nil {
		prev, err := uq.path(ctx)
		if err != nil {
			return err
		}
		uq.sql = prev
	}
	return nil
}

func (uq *UsersQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Users, error) {
	var (
		nodes       = []*Users{}
		_spec       = uq.querySpec()
		loadedTypes = [11]bool{
			uq.withAccounts != nil,
			uq.withBanners != nil,
			uq.withDebitCards != nil,
			uq.withTransactions != nil,
			uq.withUserGreetings != nil,
			uq.withAccountBalances != nil,
			uq.withAccountDetails != nil,
			uq.withAccountFlags != nil,
			uq.withDebitCardDesign != nil,
			uq.withDebitCardDetails != nil,
			uq.withDebitCardStatus != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Users).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Users{config: uq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uq.withAccounts; query != nil {
		if err := uq.loadAccounts(ctx, query, nodes,
			func(n *Users) { n.Edges.Accounts = []*Accounts{} },
			func(n *Users, e *Accounts) { n.Edges.Accounts = append(n.Edges.Accounts, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withBanners; query != nil {
		if err := uq.loadBanners(ctx, query, nodes,
			func(n *Users) { n.Edges.Banners = []*Banners{} },
			func(n *Users, e *Banners) { n.Edges.Banners = append(n.Edges.Banners, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withDebitCards; query != nil {
		if err := uq.loadDebitCards(ctx, query, nodes,
			func(n *Users) { n.Edges.DebitCards = []*DebitCards{} },
			func(n *Users, e *DebitCards) { n.Edges.DebitCards = append(n.Edges.DebitCards, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withTransactions; query != nil {
		if err := uq.loadTransactions(ctx, query, nodes,
			func(n *Users) { n.Edges.Transactions = []*Transactions{} },
			func(n *Users, e *Transactions) { n.Edges.Transactions = append(n.Edges.Transactions, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withUserGreetings; query != nil {
		if err := uq.loadUserGreetings(ctx, query, nodes,
			func(n *Users) { n.Edges.UserGreetings = []*UserGreetings{} },
			func(n *Users, e *UserGreetings) { n.Edges.UserGreetings = append(n.Edges.UserGreetings, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withAccountBalances; query != nil {
		if err := uq.loadAccountBalances(ctx, query, nodes,
			func(n *Users) { n.Edges.AccountBalances = []*AccountBalances{} },
			func(n *Users, e *AccountBalances) { n.Edges.AccountBalances = append(n.Edges.AccountBalances, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withAccountDetails; query != nil {
		if err := uq.loadAccountDetails(ctx, query, nodes,
			func(n *Users) { n.Edges.AccountDetails = []*AccountDetails{} },
			func(n *Users, e *AccountDetails) { n.Edges.AccountDetails = append(n.Edges.AccountDetails, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withAccountFlags; query != nil {
		if err := uq.loadAccountFlags(ctx, query, nodes,
			func(n *Users) { n.Edges.AccountFlags = []*AccountFlags{} },
			func(n *Users, e *AccountFlags) { n.Edges.AccountFlags = append(n.Edges.AccountFlags, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withDebitCardDesign; query != nil {
		if err := uq.loadDebitCardDesign(ctx, query, nodes,
			func(n *Users) { n.Edges.DebitCardDesign = []*DebitCardDesign{} },
			func(n *Users, e *DebitCardDesign) { n.Edges.DebitCardDesign = append(n.Edges.DebitCardDesign, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withDebitCardDetails; query != nil {
		if err := uq.loadDebitCardDetails(ctx, query, nodes,
			func(n *Users) { n.Edges.DebitCardDetails = []*DebitCardDetails{} },
			func(n *Users, e *DebitCardDetails) { n.Edges.DebitCardDetails = append(n.Edges.DebitCardDetails, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withDebitCardStatus; query != nil {
		if err := uq.loadDebitCardStatus(ctx, query, nodes,
			func(n *Users) { n.Edges.DebitCardStatus = []*DebitCardStatus{} },
			func(n *Users, e *DebitCardStatus) { n.Edges.DebitCardStatus = append(n.Edges.DebitCardStatus, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uq *UsersQuery) loadAccounts(ctx context.Context, query *AccountsQuery, nodes []*Users, init func(*Users), assign func(*Users, *Accounts)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Users)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(accounts.FieldUserID)
	}
	query.Where(predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(users.AccountsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UsersQuery) loadBanners(ctx context.Context, query *BannersQuery, nodes []*Users, init func(*Users), assign func(*Users, *Banners)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Users)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(banners.FieldUserID)
	}
	query.Where(predicate.Banners(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(users.BannersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UsersQuery) loadDebitCards(ctx context.Context, query *DebitCardsQuery, nodes []*Users, init func(*Users), assign func(*Users, *DebitCards)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Users)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(debitcards.FieldUserID)
	}
	query.Where(predicate.DebitCards(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(users.DebitCardsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UsersQuery) loadTransactions(ctx context.Context, query *TransactionsQuery, nodes []*Users, init func(*Users), assign func(*Users, *Transactions)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Users)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(transactions.FieldUserID)
	}
	query.Where(predicate.Transactions(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(users.TransactionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UsersQuery) loadUserGreetings(ctx context.Context, query *UserGreetingsQuery, nodes []*Users, init func(*Users), assign func(*Users, *UserGreetings)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Users)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(usergreetings.FieldUserID)
	}
	query.Where(predicate.UserGreetings(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(users.UserGreetingsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UsersQuery) loadAccountBalances(ctx context.Context, query *AccountBalancesQuery, nodes []*Users, init func(*Users), assign func(*Users, *AccountBalances)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Users)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(accountbalances.FieldUserID)
	}
	query.Where(predicate.AccountBalances(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(users.AccountBalancesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UsersQuery) loadAccountDetails(ctx context.Context, query *AccountDetailsQuery, nodes []*Users, init func(*Users), assign func(*Users, *AccountDetails)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Users)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(accountdetails.FieldUserID)
	}
	query.Where(predicate.AccountDetails(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(users.AccountDetailsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UsersQuery) loadAccountFlags(ctx context.Context, query *AccountFlagsQuery, nodes []*Users, init func(*Users), assign func(*Users, *AccountFlags)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Users)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(accountflags.FieldUserID)
	}
	query.Where(predicate.AccountFlags(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(users.AccountFlagsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UsersQuery) loadDebitCardDesign(ctx context.Context, query *DebitCardDesignQuery, nodes []*Users, init func(*Users), assign func(*Users, *DebitCardDesign)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Users)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(debitcarddesign.FieldUserID)
	}
	query.Where(predicate.DebitCardDesign(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(users.DebitCardDesignColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UsersQuery) loadDebitCardDetails(ctx context.Context, query *DebitCardDetailsQuery, nodes []*Users, init func(*Users), assign func(*Users, *DebitCardDetails)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Users)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(debitcarddetails.FieldUserID)
	}
	query.Where(predicate.DebitCardDetails(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(users.DebitCardDetailsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UsersQuery) loadDebitCardStatus(ctx context.Context, query *DebitCardStatusQuery, nodes []*Users, init func(*Users), assign func(*Users, *DebitCardStatus)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Users)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(debitcardstatus.FieldUserID)
	}
	query.Where(predicate.DebitCardStatus(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(users.DebitCardStatusColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (uq *UsersQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uq.querySpec()
	_spec.Node.Columns = uq.ctx.Fields
	if len(uq.ctx.Fields) > 0 {
		_spec.Unique = uq.ctx.Unique != nil && *uq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uq.driver, _spec)
}

func (uq *UsersQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(users.Table, users.Columns, sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt))
	_spec.From = uq.sql
	if unique := uq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uq.path != nil {
		_spec.Unique = true
	}
	if fields := uq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, users.FieldID)
		for i := range fields {
			if fields[i] != users.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uq *UsersQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uq.driver.Dialect())
	t1 := builder.Table(users.Table)
	columns := uq.ctx.Fields
	if len(columns) == 0 {
		columns = users.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uq.sql != nil {
		selector = uq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uq.ctx.Unique != nil && *uq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range uq.predicates {
		p(selector)
	}
	for _, p := range uq.order {
		p(selector)
	}
	if offset := uq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UsersGroupBy is the group-by builder for Users entities.
type UsersGroupBy struct {
	selector
	build *UsersQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ugb *UsersGroupBy) Aggregate(fns ...AggregateFunc) *UsersGroupBy {
	ugb.fns = append(ugb.fns, fns...)
	return ugb
}

// Scan applies the selector query and scans the result into the given value.
func (ugb *UsersGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ugb.build.ctx, ent.OpQueryGroupBy)
	if err := ugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UsersQuery, *UsersGroupBy](ctx, ugb.build, ugb, ugb.build.inters, v)
}

func (ugb *UsersGroupBy) sqlScan(ctx context.Context, root *UsersQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ugb.fns))
	for _, fn := range ugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ugb.flds)+len(ugb.fns))
		for _, f := range *ugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UsersSelect is the builder for selecting fields of Users entities.
type UsersSelect struct {
	*UsersQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (us *UsersSelect) Aggregate(fns ...AggregateFunc) *UsersSelect {
	us.fns = append(us.fns, fns...)
	return us
}

// Scan applies the selector query and scans the result into the given value.
func (us *UsersSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, us.ctx, ent.OpQuerySelect)
	if err := us.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UsersQuery, *UsersSelect](ctx, us.UsersQuery, us, us.inters, v)
}

func (us *UsersSelect) sqlScan(ctx context.Context, root *UsersQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(us.fns))
	for _, fn := range us.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*us.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := us.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
