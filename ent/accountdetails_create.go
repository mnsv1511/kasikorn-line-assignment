// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountdetails"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accounts"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// AccountDetailsCreate is the builder for creating a AccountDetails entity.
type AccountDetailsCreate struct {
	config
	mutation *AccountDetailsMutation
	hooks    []Hook
}

// SetAccountID sets the "account_id" field.
func (adc *AccountDetailsCreate) SetAccountID(i int) *AccountDetailsCreate {
	adc.mutation.SetAccountID(i)
	return adc
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (adc *AccountDetailsCreate) SetNillableAccountID(i *int) *AccountDetailsCreate {
	if i != nil {
		adc.SetAccountID(*i)
	}
	return adc
}

// SetUserID sets the "user_id" field.
func (adc *AccountDetailsCreate) SetUserID(i int) *AccountDetailsCreate {
	adc.mutation.SetUserID(i)
	return adc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (adc *AccountDetailsCreate) SetNillableUserID(i *int) *AccountDetailsCreate {
	if i != nil {
		adc.SetUserID(*i)
	}
	return adc
}

// SetColor sets the "color" field.
func (adc *AccountDetailsCreate) SetColor(s string) *AccountDetailsCreate {
	adc.mutation.SetColor(s)
	return adc
}

// SetIsMainAccount sets the "is_main_account" field.
func (adc *AccountDetailsCreate) SetIsMainAccount(b bool) *AccountDetailsCreate {
	adc.mutation.SetIsMainAccount(b)
	return adc
}

// SetProgress sets the "progress" field.
func (adc *AccountDetailsCreate) SetProgress(i int) *AccountDetailsCreate {
	adc.mutation.SetProgress(i)
	return adc
}

// SetName sets the "name" field.
func (adc *AccountDetailsCreate) SetName(s string) *AccountDetailsCreate {
	adc.mutation.SetName(s)
	return adc
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (adc *AccountDetailsCreate) SetUsersID(id int) *AccountDetailsCreate {
	adc.mutation.SetUsersID(id)
	return adc
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (adc *AccountDetailsCreate) SetNillableUsersID(id *int) *AccountDetailsCreate {
	if id != nil {
		adc = adc.SetUsersID(*id)
	}
	return adc
}

// SetUsers sets the "users" edge to the Users entity.
func (adc *AccountDetailsCreate) SetUsers(u *Users) *AccountDetailsCreate {
	return adc.SetUsersID(u.ID)
}

// SetAccountsID sets the "accounts" edge to the Accounts entity by ID.
func (adc *AccountDetailsCreate) SetAccountsID(id int) *AccountDetailsCreate {
	adc.mutation.SetAccountsID(id)
	return adc
}

// SetNillableAccountsID sets the "accounts" edge to the Accounts entity by ID if the given value is not nil.
func (adc *AccountDetailsCreate) SetNillableAccountsID(id *int) *AccountDetailsCreate {
	if id != nil {
		adc = adc.SetAccountsID(*id)
	}
	return adc
}

// SetAccounts sets the "accounts" edge to the Accounts entity.
func (adc *AccountDetailsCreate) SetAccounts(a *Accounts) *AccountDetailsCreate {
	return adc.SetAccountsID(a.ID)
}

// Mutation returns the AccountDetailsMutation object of the builder.
func (adc *AccountDetailsCreate) Mutation() *AccountDetailsMutation {
	return adc.mutation
}

// Save creates the AccountDetails in the database.
func (adc *AccountDetailsCreate) Save(ctx context.Context) (*AccountDetails, error) {
	return withHooks(ctx, adc.sqlSave, adc.mutation, adc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (adc *AccountDetailsCreate) SaveX(ctx context.Context) *AccountDetails {
	v, err := adc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (adc *AccountDetailsCreate) Exec(ctx context.Context) error {
	_, err := adc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adc *AccountDetailsCreate) ExecX(ctx context.Context) {
	if err := adc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (adc *AccountDetailsCreate) check() error {
	if _, ok := adc.mutation.Color(); !ok {
		return &ValidationError{Name: "color", err: errors.New(`ent: missing required field "AccountDetails.color"`)}
	}
	if _, ok := adc.mutation.IsMainAccount(); !ok {
		return &ValidationError{Name: "is_main_account", err: errors.New(`ent: missing required field "AccountDetails.is_main_account"`)}
	}
	if _, ok := adc.mutation.Progress(); !ok {
		return &ValidationError{Name: "progress", err: errors.New(`ent: missing required field "AccountDetails.progress"`)}
	}
	if _, ok := adc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AccountDetails.name"`)}
	}
	return nil
}

func (adc *AccountDetailsCreate) sqlSave(ctx context.Context) (*AccountDetails, error) {
	if err := adc.check(); err != nil {
		return nil, err
	}
	_node, _spec := adc.createSpec()
	if err := sqlgraph.CreateNode(ctx, adc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	adc.mutation.id = &_node.ID
	adc.mutation.done = true
	return _node, nil
}

func (adc *AccountDetailsCreate) createSpec() (*AccountDetails, *sqlgraph.CreateSpec) {
	var (
		_node = &AccountDetails{config: adc.config}
		_spec = sqlgraph.NewCreateSpec(accountdetails.Table, sqlgraph.NewFieldSpec(accountdetails.FieldID, field.TypeInt))
	)
	if value, ok := adc.mutation.Color(); ok {
		_spec.SetField(accountdetails.FieldColor, field.TypeString, value)
		_node.Color = value
	}
	if value, ok := adc.mutation.IsMainAccount(); ok {
		_spec.SetField(accountdetails.FieldIsMainAccount, field.TypeBool, value)
		_node.IsMainAccount = value
	}
	if value, ok := adc.mutation.Progress(); ok {
		_spec.SetField(accountdetails.FieldProgress, field.TypeInt, value)
		_node.Progress = value
	}
	if value, ok := adc.mutation.Name(); ok {
		_spec.SetField(accountdetails.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := adc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountdetails.UsersTable,
			Columns: []string{accountdetails.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := adc.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountdetails.AccountsTable,
			Columns: []string{accountdetails.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AccountID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AccountDetailsCreateBulk is the builder for creating many AccountDetails entities in bulk.
type AccountDetailsCreateBulk struct {
	config
	err      error
	builders []*AccountDetailsCreate
}

// Save creates the AccountDetails entities in the database.
func (adcb *AccountDetailsCreateBulk) Save(ctx context.Context) ([]*AccountDetails, error) {
	if adcb.err != nil {
		return nil, adcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(adcb.builders))
	nodes := make([]*AccountDetails, len(adcb.builders))
	mutators := make([]Mutator, len(adcb.builders))
	for i := range adcb.builders {
		func(i int, root context.Context) {
			builder := adcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountDetailsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, adcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, adcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, adcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (adcb *AccountDetailsCreateBulk) SaveX(ctx context.Context) []*AccountDetails {
	v, err := adcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (adcb *AccountDetailsCreateBulk) Exec(ctx context.Context) error {
	_, err := adcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adcb *AccountDetailsCreateBulk) ExecX(ctx context.Context) {
	if err := adcb.Exec(ctx); err != nil {
		panic(err)
	}
}
