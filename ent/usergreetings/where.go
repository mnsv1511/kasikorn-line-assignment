// Code generated by ent, DO NOT EDIT.

package usergreetings

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldEQ(FieldUserID, v))
}

// Greeting applies equality check predicate on the "greeting" field. It's identical to GreetingEQ.
func Greeting(v string) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldEQ(FieldGreeting, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldNotNull(FieldUserID))
}

// GreetingEQ applies the EQ predicate on the "greeting" field.
func GreetingEQ(v string) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldEQ(FieldGreeting, v))
}

// GreetingNEQ applies the NEQ predicate on the "greeting" field.
func GreetingNEQ(v string) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldNEQ(FieldGreeting, v))
}

// GreetingIn applies the In predicate on the "greeting" field.
func GreetingIn(vs ...string) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldIn(FieldGreeting, vs...))
}

// GreetingNotIn applies the NotIn predicate on the "greeting" field.
func GreetingNotIn(vs ...string) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldNotIn(FieldGreeting, vs...))
}

// GreetingGT applies the GT predicate on the "greeting" field.
func GreetingGT(v string) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldGT(FieldGreeting, v))
}

// GreetingGTE applies the GTE predicate on the "greeting" field.
func GreetingGTE(v string) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldGTE(FieldGreeting, v))
}

// GreetingLT applies the LT predicate on the "greeting" field.
func GreetingLT(v string) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldLT(FieldGreeting, v))
}

// GreetingLTE applies the LTE predicate on the "greeting" field.
func GreetingLTE(v string) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldLTE(FieldGreeting, v))
}

// GreetingContains applies the Contains predicate on the "greeting" field.
func GreetingContains(v string) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldContains(FieldGreeting, v))
}

// GreetingHasPrefix applies the HasPrefix predicate on the "greeting" field.
func GreetingHasPrefix(v string) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldHasPrefix(FieldGreeting, v))
}

// GreetingHasSuffix applies the HasSuffix predicate on the "greeting" field.
func GreetingHasSuffix(v string) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldHasSuffix(FieldGreeting, v))
}

// GreetingEqualFold applies the EqualFold predicate on the "greeting" field.
func GreetingEqualFold(v string) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldEqualFold(FieldGreeting, v))
}

// GreetingContainsFold applies the ContainsFold predicate on the "greeting" field.
func GreetingContainsFold(v string) predicate.UserGreetings {
	return predicate.UserGreetings(sql.FieldContainsFold(FieldGreeting, v))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.UserGreetings {
	return predicate.UserGreetings(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.Users) predicate.UserGreetings {
	return predicate.UserGreetings(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserGreetings) predicate.UserGreetings {
	return predicate.UserGreetings(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserGreetings) predicate.UserGreetings {
	return predicate.UserGreetings(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserGreetings) predicate.UserGreetings {
	return predicate.UserGreetings(sql.NotPredicates(p))
}
