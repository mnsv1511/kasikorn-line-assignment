// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcarddesign"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcarddetails"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcards"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcardstatus"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// DebitCardsUpdate is the builder for updating DebitCards entities.
type DebitCardsUpdate struct {
	config
	hooks    []Hook
	mutation *DebitCardsMutation
}

// Where appends a list predicates to the DebitCardsUpdate builder.
func (dcu *DebitCardsUpdate) Where(ps ...predicate.DebitCards) *DebitCardsUpdate {
	dcu.mutation.Where(ps...)
	return dcu
}

// SetUserID sets the "user_id" field.
func (dcu *DebitCardsUpdate) SetUserID(i int) *DebitCardsUpdate {
	dcu.mutation.SetUserID(i)
	return dcu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (dcu *DebitCardsUpdate) SetNillableUserID(i *int) *DebitCardsUpdate {
	if i != nil {
		dcu.SetUserID(*i)
	}
	return dcu
}

// ClearUserID clears the value of the "user_id" field.
func (dcu *DebitCardsUpdate) ClearUserID() *DebitCardsUpdate {
	dcu.mutation.ClearUserID()
	return dcu
}

// SetName sets the "name" field.
func (dcu *DebitCardsUpdate) SetName(s string) *DebitCardsUpdate {
	dcu.mutation.SetName(s)
	return dcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dcu *DebitCardsUpdate) SetNillableName(s *string) *DebitCardsUpdate {
	if s != nil {
		dcu.SetName(*s)
	}
	return dcu
}

// AddDebitCardDesignIDs adds the "debit_card_design" edge to the DebitCardDesign entity by IDs.
func (dcu *DebitCardsUpdate) AddDebitCardDesignIDs(ids ...int) *DebitCardsUpdate {
	dcu.mutation.AddDebitCardDesignIDs(ids...)
	return dcu
}

// AddDebitCardDesign adds the "debit_card_design" edges to the DebitCardDesign entity.
func (dcu *DebitCardsUpdate) AddDebitCardDesign(d ...*DebitCardDesign) *DebitCardsUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcu.AddDebitCardDesignIDs(ids...)
}

// AddDebitCardDetailIDs adds the "debit_card_details" edge to the DebitCardDetails entity by IDs.
func (dcu *DebitCardsUpdate) AddDebitCardDetailIDs(ids ...int) *DebitCardsUpdate {
	dcu.mutation.AddDebitCardDetailIDs(ids...)
	return dcu
}

// AddDebitCardDetails adds the "debit_card_details" edges to the DebitCardDetails entity.
func (dcu *DebitCardsUpdate) AddDebitCardDetails(d ...*DebitCardDetails) *DebitCardsUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcu.AddDebitCardDetailIDs(ids...)
}

// AddDebitCardStatuIDs adds the "debit_card_status" edge to the DebitCardStatus entity by IDs.
func (dcu *DebitCardsUpdate) AddDebitCardStatuIDs(ids ...int) *DebitCardsUpdate {
	dcu.mutation.AddDebitCardStatuIDs(ids...)
	return dcu
}

// AddDebitCardStatus adds the "debit_card_status" edges to the DebitCardStatus entity.
func (dcu *DebitCardsUpdate) AddDebitCardStatus(d ...*DebitCardStatus) *DebitCardsUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcu.AddDebitCardStatuIDs(ids...)
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (dcu *DebitCardsUpdate) SetUsersID(id int) *DebitCardsUpdate {
	dcu.mutation.SetUsersID(id)
	return dcu
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (dcu *DebitCardsUpdate) SetNillableUsersID(id *int) *DebitCardsUpdate {
	if id != nil {
		dcu = dcu.SetUsersID(*id)
	}
	return dcu
}

// SetUsers sets the "users" edge to the Users entity.
func (dcu *DebitCardsUpdate) SetUsers(u *Users) *DebitCardsUpdate {
	return dcu.SetUsersID(u.ID)
}

// Mutation returns the DebitCardsMutation object of the builder.
func (dcu *DebitCardsUpdate) Mutation() *DebitCardsMutation {
	return dcu.mutation
}

// ClearDebitCardDesign clears all "debit_card_design" edges to the DebitCardDesign entity.
func (dcu *DebitCardsUpdate) ClearDebitCardDesign() *DebitCardsUpdate {
	dcu.mutation.ClearDebitCardDesign()
	return dcu
}

// RemoveDebitCardDesignIDs removes the "debit_card_design" edge to DebitCardDesign entities by IDs.
func (dcu *DebitCardsUpdate) RemoveDebitCardDesignIDs(ids ...int) *DebitCardsUpdate {
	dcu.mutation.RemoveDebitCardDesignIDs(ids...)
	return dcu
}

// RemoveDebitCardDesign removes "debit_card_design" edges to DebitCardDesign entities.
func (dcu *DebitCardsUpdate) RemoveDebitCardDesign(d ...*DebitCardDesign) *DebitCardsUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcu.RemoveDebitCardDesignIDs(ids...)
}

// ClearDebitCardDetails clears all "debit_card_details" edges to the DebitCardDetails entity.
func (dcu *DebitCardsUpdate) ClearDebitCardDetails() *DebitCardsUpdate {
	dcu.mutation.ClearDebitCardDetails()
	return dcu
}

// RemoveDebitCardDetailIDs removes the "debit_card_details" edge to DebitCardDetails entities by IDs.
func (dcu *DebitCardsUpdate) RemoveDebitCardDetailIDs(ids ...int) *DebitCardsUpdate {
	dcu.mutation.RemoveDebitCardDetailIDs(ids...)
	return dcu
}

// RemoveDebitCardDetails removes "debit_card_details" edges to DebitCardDetails entities.
func (dcu *DebitCardsUpdate) RemoveDebitCardDetails(d ...*DebitCardDetails) *DebitCardsUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcu.RemoveDebitCardDetailIDs(ids...)
}

// ClearDebitCardStatus clears all "debit_card_status" edges to the DebitCardStatus entity.
func (dcu *DebitCardsUpdate) ClearDebitCardStatus() *DebitCardsUpdate {
	dcu.mutation.ClearDebitCardStatus()
	return dcu
}

// RemoveDebitCardStatuIDs removes the "debit_card_status" edge to DebitCardStatus entities by IDs.
func (dcu *DebitCardsUpdate) RemoveDebitCardStatuIDs(ids ...int) *DebitCardsUpdate {
	dcu.mutation.RemoveDebitCardStatuIDs(ids...)
	return dcu
}

// RemoveDebitCardStatus removes "debit_card_status" edges to DebitCardStatus entities.
func (dcu *DebitCardsUpdate) RemoveDebitCardStatus(d ...*DebitCardStatus) *DebitCardsUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcu.RemoveDebitCardStatuIDs(ids...)
}

// ClearUsers clears the "users" edge to the Users entity.
func (dcu *DebitCardsUpdate) ClearUsers() *DebitCardsUpdate {
	dcu.mutation.ClearUsers()
	return dcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcu *DebitCardsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dcu.sqlSave, dcu.mutation, dcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcu *DebitCardsUpdate) SaveX(ctx context.Context) int {
	affected, err := dcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcu *DebitCardsUpdate) Exec(ctx context.Context) error {
	_, err := dcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcu *DebitCardsUpdate) ExecX(ctx context.Context) {
	if err := dcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dcu *DebitCardsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(debitcards.Table, debitcards.Columns, sqlgraph.NewFieldSpec(debitcards.FieldID, field.TypeInt))
	if ps := dcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcu.mutation.Name(); ok {
		_spec.SetField(debitcards.FieldName, field.TypeString, value)
	}
	if dcu.mutation.DebitCardDesignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   debitcards.DebitCardDesignTable,
			Columns: []string{debitcards.DebitCardDesignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddesign.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.RemovedDebitCardDesignIDs(); len(nodes) > 0 && !dcu.mutation.DebitCardDesignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   debitcards.DebitCardDesignTable,
			Columns: []string{debitcards.DebitCardDesignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddesign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.DebitCardDesignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   debitcards.DebitCardDesignTable,
			Columns: []string{debitcards.DebitCardDesignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddesign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.DebitCardDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   debitcards.DebitCardDetailsTable,
			Columns: []string{debitcards.DebitCardDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddetails.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.RemovedDebitCardDetailsIDs(); len(nodes) > 0 && !dcu.mutation.DebitCardDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   debitcards.DebitCardDetailsTable,
			Columns: []string{debitcards.DebitCardDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.DebitCardDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   debitcards.DebitCardDetailsTable,
			Columns: []string{debitcards.DebitCardDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.DebitCardStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   debitcards.DebitCardStatusTable,
			Columns: []string{debitcards.DebitCardStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcardstatus.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.RemovedDebitCardStatusIDs(); len(nodes) > 0 && !dcu.mutation.DebitCardStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   debitcards.DebitCardStatusTable,
			Columns: []string{debitcards.DebitCardStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcardstatus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.DebitCardStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   debitcards.DebitCardStatusTable,
			Columns: []string{debitcards.DebitCardStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcardstatus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcards.UsersTable,
			Columns: []string{debitcards.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcards.UsersTable,
			Columns: []string{debitcards.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{debitcards.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dcu.mutation.done = true
	return n, nil
}

// DebitCardsUpdateOne is the builder for updating a single DebitCards entity.
type DebitCardsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DebitCardsMutation
}

// SetUserID sets the "user_id" field.
func (dcuo *DebitCardsUpdateOne) SetUserID(i int) *DebitCardsUpdateOne {
	dcuo.mutation.SetUserID(i)
	return dcuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (dcuo *DebitCardsUpdateOne) SetNillableUserID(i *int) *DebitCardsUpdateOne {
	if i != nil {
		dcuo.SetUserID(*i)
	}
	return dcuo
}

// ClearUserID clears the value of the "user_id" field.
func (dcuo *DebitCardsUpdateOne) ClearUserID() *DebitCardsUpdateOne {
	dcuo.mutation.ClearUserID()
	return dcuo
}

// SetName sets the "name" field.
func (dcuo *DebitCardsUpdateOne) SetName(s string) *DebitCardsUpdateOne {
	dcuo.mutation.SetName(s)
	return dcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dcuo *DebitCardsUpdateOne) SetNillableName(s *string) *DebitCardsUpdateOne {
	if s != nil {
		dcuo.SetName(*s)
	}
	return dcuo
}

// AddDebitCardDesignIDs adds the "debit_card_design" edge to the DebitCardDesign entity by IDs.
func (dcuo *DebitCardsUpdateOne) AddDebitCardDesignIDs(ids ...int) *DebitCardsUpdateOne {
	dcuo.mutation.AddDebitCardDesignIDs(ids...)
	return dcuo
}

// AddDebitCardDesign adds the "debit_card_design" edges to the DebitCardDesign entity.
func (dcuo *DebitCardsUpdateOne) AddDebitCardDesign(d ...*DebitCardDesign) *DebitCardsUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcuo.AddDebitCardDesignIDs(ids...)
}

// AddDebitCardDetailIDs adds the "debit_card_details" edge to the DebitCardDetails entity by IDs.
func (dcuo *DebitCardsUpdateOne) AddDebitCardDetailIDs(ids ...int) *DebitCardsUpdateOne {
	dcuo.mutation.AddDebitCardDetailIDs(ids...)
	return dcuo
}

// AddDebitCardDetails adds the "debit_card_details" edges to the DebitCardDetails entity.
func (dcuo *DebitCardsUpdateOne) AddDebitCardDetails(d ...*DebitCardDetails) *DebitCardsUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcuo.AddDebitCardDetailIDs(ids...)
}

// AddDebitCardStatuIDs adds the "debit_card_status" edge to the DebitCardStatus entity by IDs.
func (dcuo *DebitCardsUpdateOne) AddDebitCardStatuIDs(ids ...int) *DebitCardsUpdateOne {
	dcuo.mutation.AddDebitCardStatuIDs(ids...)
	return dcuo
}

// AddDebitCardStatus adds the "debit_card_status" edges to the DebitCardStatus entity.
func (dcuo *DebitCardsUpdateOne) AddDebitCardStatus(d ...*DebitCardStatus) *DebitCardsUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcuo.AddDebitCardStatuIDs(ids...)
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (dcuo *DebitCardsUpdateOne) SetUsersID(id int) *DebitCardsUpdateOne {
	dcuo.mutation.SetUsersID(id)
	return dcuo
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (dcuo *DebitCardsUpdateOne) SetNillableUsersID(id *int) *DebitCardsUpdateOne {
	if id != nil {
		dcuo = dcuo.SetUsersID(*id)
	}
	return dcuo
}

// SetUsers sets the "users" edge to the Users entity.
func (dcuo *DebitCardsUpdateOne) SetUsers(u *Users) *DebitCardsUpdateOne {
	return dcuo.SetUsersID(u.ID)
}

// Mutation returns the DebitCardsMutation object of the builder.
func (dcuo *DebitCardsUpdateOne) Mutation() *DebitCardsMutation {
	return dcuo.mutation
}

// ClearDebitCardDesign clears all "debit_card_design" edges to the DebitCardDesign entity.
func (dcuo *DebitCardsUpdateOne) ClearDebitCardDesign() *DebitCardsUpdateOne {
	dcuo.mutation.ClearDebitCardDesign()
	return dcuo
}

// RemoveDebitCardDesignIDs removes the "debit_card_design" edge to DebitCardDesign entities by IDs.
func (dcuo *DebitCardsUpdateOne) RemoveDebitCardDesignIDs(ids ...int) *DebitCardsUpdateOne {
	dcuo.mutation.RemoveDebitCardDesignIDs(ids...)
	return dcuo
}

// RemoveDebitCardDesign removes "debit_card_design" edges to DebitCardDesign entities.
func (dcuo *DebitCardsUpdateOne) RemoveDebitCardDesign(d ...*DebitCardDesign) *DebitCardsUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcuo.RemoveDebitCardDesignIDs(ids...)
}

// ClearDebitCardDetails clears all "debit_card_details" edges to the DebitCardDetails entity.
func (dcuo *DebitCardsUpdateOne) ClearDebitCardDetails() *DebitCardsUpdateOne {
	dcuo.mutation.ClearDebitCardDetails()
	return dcuo
}

// RemoveDebitCardDetailIDs removes the "debit_card_details" edge to DebitCardDetails entities by IDs.
func (dcuo *DebitCardsUpdateOne) RemoveDebitCardDetailIDs(ids ...int) *DebitCardsUpdateOne {
	dcuo.mutation.RemoveDebitCardDetailIDs(ids...)
	return dcuo
}

// RemoveDebitCardDetails removes "debit_card_details" edges to DebitCardDetails entities.
func (dcuo *DebitCardsUpdateOne) RemoveDebitCardDetails(d ...*DebitCardDetails) *DebitCardsUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcuo.RemoveDebitCardDetailIDs(ids...)
}

// ClearDebitCardStatus clears all "debit_card_status" edges to the DebitCardStatus entity.
func (dcuo *DebitCardsUpdateOne) ClearDebitCardStatus() *DebitCardsUpdateOne {
	dcuo.mutation.ClearDebitCardStatus()
	return dcuo
}

// RemoveDebitCardStatuIDs removes the "debit_card_status" edge to DebitCardStatus entities by IDs.
func (dcuo *DebitCardsUpdateOne) RemoveDebitCardStatuIDs(ids ...int) *DebitCardsUpdateOne {
	dcuo.mutation.RemoveDebitCardStatuIDs(ids...)
	return dcuo
}

// RemoveDebitCardStatus removes "debit_card_status" edges to DebitCardStatus entities.
func (dcuo *DebitCardsUpdateOne) RemoveDebitCardStatus(d ...*DebitCardStatus) *DebitCardsUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcuo.RemoveDebitCardStatuIDs(ids...)
}

// ClearUsers clears the "users" edge to the Users entity.
func (dcuo *DebitCardsUpdateOne) ClearUsers() *DebitCardsUpdateOne {
	dcuo.mutation.ClearUsers()
	return dcuo
}

// Where appends a list predicates to the DebitCardsUpdate builder.
func (dcuo *DebitCardsUpdateOne) Where(ps ...predicate.DebitCards) *DebitCardsUpdateOne {
	dcuo.mutation.Where(ps...)
	return dcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcuo *DebitCardsUpdateOne) Select(field string, fields ...string) *DebitCardsUpdateOne {
	dcuo.fields = append([]string{field}, fields...)
	return dcuo
}

// Save executes the query and returns the updated DebitCards entity.
func (dcuo *DebitCardsUpdateOne) Save(ctx context.Context) (*DebitCards, error) {
	return withHooks(ctx, dcuo.sqlSave, dcuo.mutation, dcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcuo *DebitCardsUpdateOne) SaveX(ctx context.Context) *DebitCards {
	node, err := dcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcuo *DebitCardsUpdateOne) Exec(ctx context.Context) error {
	_, err := dcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcuo *DebitCardsUpdateOne) ExecX(ctx context.Context) {
	if err := dcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dcuo *DebitCardsUpdateOne) sqlSave(ctx context.Context) (_node *DebitCards, err error) {
	_spec := sqlgraph.NewUpdateSpec(debitcards.Table, debitcards.Columns, sqlgraph.NewFieldSpec(debitcards.FieldID, field.TypeInt))
	id, ok := dcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DebitCards.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, debitcards.FieldID)
		for _, f := range fields {
			if !debitcards.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != debitcards.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcuo.mutation.Name(); ok {
		_spec.SetField(debitcards.FieldName, field.TypeString, value)
	}
	if dcuo.mutation.DebitCardDesignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   debitcards.DebitCardDesignTable,
			Columns: []string{debitcards.DebitCardDesignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddesign.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.RemovedDebitCardDesignIDs(); len(nodes) > 0 && !dcuo.mutation.DebitCardDesignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   debitcards.DebitCardDesignTable,
			Columns: []string{debitcards.DebitCardDesignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddesign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.DebitCardDesignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   debitcards.DebitCardDesignTable,
			Columns: []string{debitcards.DebitCardDesignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddesign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.DebitCardDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   debitcards.DebitCardDetailsTable,
			Columns: []string{debitcards.DebitCardDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddetails.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.RemovedDebitCardDetailsIDs(); len(nodes) > 0 && !dcuo.mutation.DebitCardDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   debitcards.DebitCardDetailsTable,
			Columns: []string{debitcards.DebitCardDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.DebitCardDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   debitcards.DebitCardDetailsTable,
			Columns: []string{debitcards.DebitCardDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcarddetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.DebitCardStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   debitcards.DebitCardStatusTable,
			Columns: []string{debitcards.DebitCardStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcardstatus.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.RemovedDebitCardStatusIDs(); len(nodes) > 0 && !dcuo.mutation.DebitCardStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   debitcards.DebitCardStatusTable,
			Columns: []string{debitcards.DebitCardStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcardstatus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.DebitCardStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   debitcards.DebitCardStatusTable,
			Columns: []string{debitcards.DebitCardStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(debitcardstatus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcards.UsersTable,
			Columns: []string{debitcards.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   debitcards.UsersTable,
			Columns: []string{debitcards.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DebitCards{config: dcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{debitcards.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dcuo.mutation.done = true
	return _node, nil
}
