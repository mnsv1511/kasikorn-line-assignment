// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/usergreetings"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// UserGreetingsQuery is the builder for querying UserGreetings entities.
type UserGreetingsQuery struct {
	config
	ctx        *QueryContext
	order      []usergreetings.OrderOption
	inters     []Interceptor
	predicates []predicate.UserGreetings
	withUsers  *UsersQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserGreetingsQuery builder.
func (ugq *UserGreetingsQuery) Where(ps ...predicate.UserGreetings) *UserGreetingsQuery {
	ugq.predicates = append(ugq.predicates, ps...)
	return ugq
}

// Limit the number of records to be returned by this query.
func (ugq *UserGreetingsQuery) Limit(limit int) *UserGreetingsQuery {
	ugq.ctx.Limit = &limit
	return ugq
}

// Offset to start from.
func (ugq *UserGreetingsQuery) Offset(offset int) *UserGreetingsQuery {
	ugq.ctx.Offset = &offset
	return ugq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ugq *UserGreetingsQuery) Unique(unique bool) *UserGreetingsQuery {
	ugq.ctx.Unique = &unique
	return ugq
}

// Order specifies how the records should be ordered.
func (ugq *UserGreetingsQuery) Order(o ...usergreetings.OrderOption) *UserGreetingsQuery {
	ugq.order = append(ugq.order, o...)
	return ugq
}

// QueryUsers chains the current query on the "users" edge.
func (ugq *UserGreetingsQuery) QueryUsers() *UsersQuery {
	query := (&UsersClient{config: ugq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ugq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ugq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usergreetings.Table, usergreetings.FieldID, selector),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usergreetings.UsersTable, usergreetings.UsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(ugq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserGreetings entity from the query.
// Returns a *NotFoundError when no UserGreetings was found.
func (ugq *UserGreetingsQuery) First(ctx context.Context) (*UserGreetings, error) {
	nodes, err := ugq.Limit(1).All(setContextOp(ctx, ugq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{usergreetings.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ugq *UserGreetingsQuery) FirstX(ctx context.Context) *UserGreetings {
	node, err := ugq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserGreetings ID from the query.
// Returns a *NotFoundError when no UserGreetings ID was found.
func (ugq *UserGreetingsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ugq.Limit(1).IDs(setContextOp(ctx, ugq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{usergreetings.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ugq *UserGreetingsQuery) FirstIDX(ctx context.Context) int {
	id, err := ugq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserGreetings entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserGreetings entity is found.
// Returns a *NotFoundError when no UserGreetings entities are found.
func (ugq *UserGreetingsQuery) Only(ctx context.Context) (*UserGreetings, error) {
	nodes, err := ugq.Limit(2).All(setContextOp(ctx, ugq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{usergreetings.Label}
	default:
		return nil, &NotSingularError{usergreetings.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ugq *UserGreetingsQuery) OnlyX(ctx context.Context) *UserGreetings {
	node, err := ugq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserGreetings ID in the query.
// Returns a *NotSingularError when more than one UserGreetings ID is found.
// Returns a *NotFoundError when no entities are found.
func (ugq *UserGreetingsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ugq.Limit(2).IDs(setContextOp(ctx, ugq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{usergreetings.Label}
	default:
		err = &NotSingularError{usergreetings.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ugq *UserGreetingsQuery) OnlyIDX(ctx context.Context) int {
	id, err := ugq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserGreetingsSlice.
func (ugq *UserGreetingsQuery) All(ctx context.Context) ([]*UserGreetings, error) {
	ctx = setContextOp(ctx, ugq.ctx, ent.OpQueryAll)
	if err := ugq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserGreetings, *UserGreetingsQuery]()
	return withInterceptors[[]*UserGreetings](ctx, ugq, qr, ugq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ugq *UserGreetingsQuery) AllX(ctx context.Context) []*UserGreetings {
	nodes, err := ugq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserGreetings IDs.
func (ugq *UserGreetingsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ugq.ctx.Unique == nil && ugq.path != nil {
		ugq.Unique(true)
	}
	ctx = setContextOp(ctx, ugq.ctx, ent.OpQueryIDs)
	if err = ugq.Select(usergreetings.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ugq *UserGreetingsQuery) IDsX(ctx context.Context) []int {
	ids, err := ugq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ugq *UserGreetingsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ugq.ctx, ent.OpQueryCount)
	if err := ugq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ugq, querierCount[*UserGreetingsQuery](), ugq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ugq *UserGreetingsQuery) CountX(ctx context.Context) int {
	count, err := ugq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ugq *UserGreetingsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ugq.ctx, ent.OpQueryExist)
	switch _, err := ugq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ugq *UserGreetingsQuery) ExistX(ctx context.Context) bool {
	exist, err := ugq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserGreetingsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ugq *UserGreetingsQuery) Clone() *UserGreetingsQuery {
	if ugq == nil {
		return nil
	}
	return &UserGreetingsQuery{
		config:     ugq.config,
		ctx:        ugq.ctx.Clone(),
		order:      append([]usergreetings.OrderOption{}, ugq.order...),
		inters:     append([]Interceptor{}, ugq.inters...),
		predicates: append([]predicate.UserGreetings{}, ugq.predicates...),
		withUsers:  ugq.withUsers.Clone(),
		// clone intermediate query.
		sql:  ugq.sql.Clone(),
		path: ugq.path,
	}
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (ugq *UserGreetingsQuery) WithUsers(opts ...func(*UsersQuery)) *UserGreetingsQuery {
	query := (&UsersClient{config: ugq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ugq.withUsers = query
	return ugq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID int `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserGreetings.Query().
//		GroupBy(usergreetings.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ugq *UserGreetingsQuery) GroupBy(field string, fields ...string) *UserGreetingsGroupBy {
	ugq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserGreetingsGroupBy{build: ugq}
	grbuild.flds = &ugq.ctx.Fields
	grbuild.label = usergreetings.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID int `json:"user_id,omitempty"`
//	}
//
//	client.UserGreetings.Query().
//		Select(usergreetings.FieldUserID).
//		Scan(ctx, &v)
func (ugq *UserGreetingsQuery) Select(fields ...string) *UserGreetingsSelect {
	ugq.ctx.Fields = append(ugq.ctx.Fields, fields...)
	sbuild := &UserGreetingsSelect{UserGreetingsQuery: ugq}
	sbuild.label = usergreetings.Label
	sbuild.flds, sbuild.scan = &ugq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserGreetingsSelect configured with the given aggregations.
func (ugq *UserGreetingsQuery) Aggregate(fns ...AggregateFunc) *UserGreetingsSelect {
	return ugq.Select().Aggregate(fns...)
}

func (ugq *UserGreetingsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ugq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ugq); err != nil {
				return err
			}
		}
	}
	for _, f := range ugq.ctx.Fields {
		if !usergreetings.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ugq.path != nil {
		prev, err := ugq.path(ctx)
		if err != nil {
			return err
		}
		ugq.sql = prev
	}
	return nil
}

func (ugq *UserGreetingsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserGreetings, error) {
	var (
		nodes       = []*UserGreetings{}
		_spec       = ugq.querySpec()
		loadedTypes = [1]bool{
			ugq.withUsers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserGreetings).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserGreetings{config: ugq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ugq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ugq.withUsers; query != nil {
		if err := ugq.loadUsers(ctx, query, nodes, nil,
			func(n *UserGreetings, e *Users) { n.Edges.Users = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ugq *UserGreetingsQuery) loadUsers(ctx context.Context, query *UsersQuery, nodes []*UserGreetings, init func(*UserGreetings), assign func(*UserGreetings, *Users)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UserGreetings)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(users.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ugq *UserGreetingsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ugq.querySpec()
	_spec.Node.Columns = ugq.ctx.Fields
	if len(ugq.ctx.Fields) > 0 {
		_spec.Unique = ugq.ctx.Unique != nil && *ugq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ugq.driver, _spec)
}

func (ugq *UserGreetingsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(usergreetings.Table, usergreetings.Columns, sqlgraph.NewFieldSpec(usergreetings.FieldID, field.TypeInt))
	_spec.From = ugq.sql
	if unique := ugq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ugq.path != nil {
		_spec.Unique = true
	}
	if fields := ugq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usergreetings.FieldID)
		for i := range fields {
			if fields[i] != usergreetings.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ugq.withUsers != nil {
			_spec.Node.AddColumnOnce(usergreetings.FieldUserID)
		}
	}
	if ps := ugq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ugq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ugq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ugq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ugq *UserGreetingsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ugq.driver.Dialect())
	t1 := builder.Table(usergreetings.Table)
	columns := ugq.ctx.Fields
	if len(columns) == 0 {
		columns = usergreetings.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ugq.sql != nil {
		selector = ugq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ugq.ctx.Unique != nil && *ugq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ugq.predicates {
		p(selector)
	}
	for _, p := range ugq.order {
		p(selector)
	}
	if offset := ugq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ugq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserGreetingsGroupBy is the group-by builder for UserGreetings entities.
type UserGreetingsGroupBy struct {
	selector
	build *UserGreetingsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (uggb *UserGreetingsGroupBy) Aggregate(fns ...AggregateFunc) *UserGreetingsGroupBy {
	uggb.fns = append(uggb.fns, fns...)
	return uggb
}

// Scan applies the selector query and scans the result into the given value.
func (uggb *UserGreetingsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uggb.build.ctx, ent.OpQueryGroupBy)
	if err := uggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserGreetingsQuery, *UserGreetingsGroupBy](ctx, uggb.build, uggb, uggb.build.inters, v)
}

func (uggb *UserGreetingsGroupBy) sqlScan(ctx context.Context, root *UserGreetingsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(uggb.fns))
	for _, fn := range uggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*uggb.flds)+len(uggb.fns))
		for _, f := range *uggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*uggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserGreetingsSelect is the builder for selecting fields of UserGreetings entities.
type UserGreetingsSelect struct {
	*UserGreetingsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ugs *UserGreetingsSelect) Aggregate(fns ...AggregateFunc) *UserGreetingsSelect {
	ugs.fns = append(ugs.fns, fns...)
	return ugs
}

// Scan applies the selector query and scans the result into the given value.
func (ugs *UserGreetingsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ugs.ctx, ent.OpQuerySelect)
	if err := ugs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserGreetingsQuery, *UserGreetingsSelect](ctx, ugs.UserGreetingsQuery, ugs, ugs.inters, v)
}

func (ugs *UserGreetingsSelect) sqlScan(ctx context.Context, root *UserGreetingsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ugs.fns))
	for _, fn := range ugs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ugs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
