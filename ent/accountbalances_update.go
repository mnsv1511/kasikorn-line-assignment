// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountbalances"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accounts"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// AccountBalancesUpdate is the builder for updating AccountBalances entities.
type AccountBalancesUpdate struct {
	config
	hooks    []Hook
	mutation *AccountBalancesMutation
}

// Where appends a list predicates to the AccountBalancesUpdate builder.
func (abu *AccountBalancesUpdate) Where(ps ...predicate.AccountBalances) *AccountBalancesUpdate {
	abu.mutation.Where(ps...)
	return abu
}

// SetAccountID sets the "account_id" field.
func (abu *AccountBalancesUpdate) SetAccountID(i int) *AccountBalancesUpdate {
	abu.mutation.SetAccountID(i)
	return abu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (abu *AccountBalancesUpdate) SetNillableAccountID(i *int) *AccountBalancesUpdate {
	if i != nil {
		abu.SetAccountID(*i)
	}
	return abu
}

// ClearAccountID clears the value of the "account_id" field.
func (abu *AccountBalancesUpdate) ClearAccountID() *AccountBalancesUpdate {
	abu.mutation.ClearAccountID()
	return abu
}

// SetUserID sets the "user_id" field.
func (abu *AccountBalancesUpdate) SetUserID(i int) *AccountBalancesUpdate {
	abu.mutation.SetUserID(i)
	return abu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (abu *AccountBalancesUpdate) SetNillableUserID(i *int) *AccountBalancesUpdate {
	if i != nil {
		abu.SetUserID(*i)
	}
	return abu
}

// ClearUserID clears the value of the "user_id" field.
func (abu *AccountBalancesUpdate) ClearUserID() *AccountBalancesUpdate {
	abu.mutation.ClearUserID()
	return abu
}

// SetAmount sets the "amount" field.
func (abu *AccountBalancesUpdate) SetAmount(f float64) *AccountBalancesUpdate {
	abu.mutation.ResetAmount()
	abu.mutation.SetAmount(f)
	return abu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (abu *AccountBalancesUpdate) SetNillableAmount(f *float64) *AccountBalancesUpdate {
	if f != nil {
		abu.SetAmount(*f)
	}
	return abu
}

// AddAmount adds f to the "amount" field.
func (abu *AccountBalancesUpdate) AddAmount(f float64) *AccountBalancesUpdate {
	abu.mutation.AddAmount(f)
	return abu
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (abu *AccountBalancesUpdate) SetUsersID(id int) *AccountBalancesUpdate {
	abu.mutation.SetUsersID(id)
	return abu
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (abu *AccountBalancesUpdate) SetNillableUsersID(id *int) *AccountBalancesUpdate {
	if id != nil {
		abu = abu.SetUsersID(*id)
	}
	return abu
}

// SetUsers sets the "users" edge to the Users entity.
func (abu *AccountBalancesUpdate) SetUsers(u *Users) *AccountBalancesUpdate {
	return abu.SetUsersID(u.ID)
}

// SetAccountsID sets the "accounts" edge to the Accounts entity by ID.
func (abu *AccountBalancesUpdate) SetAccountsID(id int) *AccountBalancesUpdate {
	abu.mutation.SetAccountsID(id)
	return abu
}

// SetNillableAccountsID sets the "accounts" edge to the Accounts entity by ID if the given value is not nil.
func (abu *AccountBalancesUpdate) SetNillableAccountsID(id *int) *AccountBalancesUpdate {
	if id != nil {
		abu = abu.SetAccountsID(*id)
	}
	return abu
}

// SetAccounts sets the "accounts" edge to the Accounts entity.
func (abu *AccountBalancesUpdate) SetAccounts(a *Accounts) *AccountBalancesUpdate {
	return abu.SetAccountsID(a.ID)
}

// Mutation returns the AccountBalancesMutation object of the builder.
func (abu *AccountBalancesUpdate) Mutation() *AccountBalancesMutation {
	return abu.mutation
}

// ClearUsers clears the "users" edge to the Users entity.
func (abu *AccountBalancesUpdate) ClearUsers() *AccountBalancesUpdate {
	abu.mutation.ClearUsers()
	return abu
}

// ClearAccounts clears the "accounts" edge to the Accounts entity.
func (abu *AccountBalancesUpdate) ClearAccounts() *AccountBalancesUpdate {
	abu.mutation.ClearAccounts()
	return abu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (abu *AccountBalancesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, abu.sqlSave, abu.mutation, abu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (abu *AccountBalancesUpdate) SaveX(ctx context.Context) int {
	affected, err := abu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (abu *AccountBalancesUpdate) Exec(ctx context.Context) error {
	_, err := abu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (abu *AccountBalancesUpdate) ExecX(ctx context.Context) {
	if err := abu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (abu *AccountBalancesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(accountbalances.Table, accountbalances.Columns, sqlgraph.NewFieldSpec(accountbalances.FieldID, field.TypeInt))
	if ps := abu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := abu.mutation.Amount(); ok {
		_spec.SetField(accountbalances.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := abu.mutation.AddedAmount(); ok {
		_spec.AddField(accountbalances.FieldAmount, field.TypeFloat64, value)
	}
	if abu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountbalances.UsersTable,
			Columns: []string{accountbalances.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := abu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountbalances.UsersTable,
			Columns: []string{accountbalances.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if abu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountbalances.AccountsTable,
			Columns: []string{accountbalances.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := abu.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountbalances.AccountsTable,
			Columns: []string{accountbalances.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, abu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountbalances.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	abu.mutation.done = true
	return n, nil
}

// AccountBalancesUpdateOne is the builder for updating a single AccountBalances entity.
type AccountBalancesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountBalancesMutation
}

// SetAccountID sets the "account_id" field.
func (abuo *AccountBalancesUpdateOne) SetAccountID(i int) *AccountBalancesUpdateOne {
	abuo.mutation.SetAccountID(i)
	return abuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (abuo *AccountBalancesUpdateOne) SetNillableAccountID(i *int) *AccountBalancesUpdateOne {
	if i != nil {
		abuo.SetAccountID(*i)
	}
	return abuo
}

// ClearAccountID clears the value of the "account_id" field.
func (abuo *AccountBalancesUpdateOne) ClearAccountID() *AccountBalancesUpdateOne {
	abuo.mutation.ClearAccountID()
	return abuo
}

// SetUserID sets the "user_id" field.
func (abuo *AccountBalancesUpdateOne) SetUserID(i int) *AccountBalancesUpdateOne {
	abuo.mutation.SetUserID(i)
	return abuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (abuo *AccountBalancesUpdateOne) SetNillableUserID(i *int) *AccountBalancesUpdateOne {
	if i != nil {
		abuo.SetUserID(*i)
	}
	return abuo
}

// ClearUserID clears the value of the "user_id" field.
func (abuo *AccountBalancesUpdateOne) ClearUserID() *AccountBalancesUpdateOne {
	abuo.mutation.ClearUserID()
	return abuo
}

// SetAmount sets the "amount" field.
func (abuo *AccountBalancesUpdateOne) SetAmount(f float64) *AccountBalancesUpdateOne {
	abuo.mutation.ResetAmount()
	abuo.mutation.SetAmount(f)
	return abuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (abuo *AccountBalancesUpdateOne) SetNillableAmount(f *float64) *AccountBalancesUpdateOne {
	if f != nil {
		abuo.SetAmount(*f)
	}
	return abuo
}

// AddAmount adds f to the "amount" field.
func (abuo *AccountBalancesUpdateOne) AddAmount(f float64) *AccountBalancesUpdateOne {
	abuo.mutation.AddAmount(f)
	return abuo
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (abuo *AccountBalancesUpdateOne) SetUsersID(id int) *AccountBalancesUpdateOne {
	abuo.mutation.SetUsersID(id)
	return abuo
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (abuo *AccountBalancesUpdateOne) SetNillableUsersID(id *int) *AccountBalancesUpdateOne {
	if id != nil {
		abuo = abuo.SetUsersID(*id)
	}
	return abuo
}

// SetUsers sets the "users" edge to the Users entity.
func (abuo *AccountBalancesUpdateOne) SetUsers(u *Users) *AccountBalancesUpdateOne {
	return abuo.SetUsersID(u.ID)
}

// SetAccountsID sets the "accounts" edge to the Accounts entity by ID.
func (abuo *AccountBalancesUpdateOne) SetAccountsID(id int) *AccountBalancesUpdateOne {
	abuo.mutation.SetAccountsID(id)
	return abuo
}

// SetNillableAccountsID sets the "accounts" edge to the Accounts entity by ID if the given value is not nil.
func (abuo *AccountBalancesUpdateOne) SetNillableAccountsID(id *int) *AccountBalancesUpdateOne {
	if id != nil {
		abuo = abuo.SetAccountsID(*id)
	}
	return abuo
}

// SetAccounts sets the "accounts" edge to the Accounts entity.
func (abuo *AccountBalancesUpdateOne) SetAccounts(a *Accounts) *AccountBalancesUpdateOne {
	return abuo.SetAccountsID(a.ID)
}

// Mutation returns the AccountBalancesMutation object of the builder.
func (abuo *AccountBalancesUpdateOne) Mutation() *AccountBalancesMutation {
	return abuo.mutation
}

// ClearUsers clears the "users" edge to the Users entity.
func (abuo *AccountBalancesUpdateOne) ClearUsers() *AccountBalancesUpdateOne {
	abuo.mutation.ClearUsers()
	return abuo
}

// ClearAccounts clears the "accounts" edge to the Accounts entity.
func (abuo *AccountBalancesUpdateOne) ClearAccounts() *AccountBalancesUpdateOne {
	abuo.mutation.ClearAccounts()
	return abuo
}

// Where appends a list predicates to the AccountBalancesUpdate builder.
func (abuo *AccountBalancesUpdateOne) Where(ps ...predicate.AccountBalances) *AccountBalancesUpdateOne {
	abuo.mutation.Where(ps...)
	return abuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (abuo *AccountBalancesUpdateOne) Select(field string, fields ...string) *AccountBalancesUpdateOne {
	abuo.fields = append([]string{field}, fields...)
	return abuo
}

// Save executes the query and returns the updated AccountBalances entity.
func (abuo *AccountBalancesUpdateOne) Save(ctx context.Context) (*AccountBalances, error) {
	return withHooks(ctx, abuo.sqlSave, abuo.mutation, abuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (abuo *AccountBalancesUpdateOne) SaveX(ctx context.Context) *AccountBalances {
	node, err := abuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (abuo *AccountBalancesUpdateOne) Exec(ctx context.Context) error {
	_, err := abuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (abuo *AccountBalancesUpdateOne) ExecX(ctx context.Context) {
	if err := abuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (abuo *AccountBalancesUpdateOne) sqlSave(ctx context.Context) (_node *AccountBalances, err error) {
	_spec := sqlgraph.NewUpdateSpec(accountbalances.Table, accountbalances.Columns, sqlgraph.NewFieldSpec(accountbalances.FieldID, field.TypeInt))
	id, ok := abuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccountBalances.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := abuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountbalances.FieldID)
		for _, f := range fields {
			if !accountbalances.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accountbalances.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := abuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := abuo.mutation.Amount(); ok {
		_spec.SetField(accountbalances.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := abuo.mutation.AddedAmount(); ok {
		_spec.AddField(accountbalances.FieldAmount, field.TypeFloat64, value)
	}
	if abuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountbalances.UsersTable,
			Columns: []string{accountbalances.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := abuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountbalances.UsersTable,
			Columns: []string{accountbalances.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if abuo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountbalances.AccountsTable,
			Columns: []string{accountbalances.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := abuo.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountbalances.AccountsTable,
			Columns: []string{accountbalances.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AccountBalances{config: abuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, abuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountbalances.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	abuo.mutation.done = true
	return _node, nil
}
