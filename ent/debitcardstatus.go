// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcards"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/debitcardstatus"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// DebitCardStatus is the model entity for the DebitCardStatus schema.
type DebitCardStatus struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CardID holds the value of the "card_id" field.
	CardID int `json:"card_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DebitCardStatusQuery when eager-loading is set.
	Edges        DebitCardStatusEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DebitCardStatusEdges holds the relations/edges for other nodes in the graph.
type DebitCardStatusEdges struct {
	// Users holds the value of the users edge.
	Users *Users `json:"users,omitempty"`
	// DebitCards holds the value of the debit_cards edge.
	DebitCards *DebitCards `json:"debit_cards,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DebitCardStatusEdges) UsersOrErr() (*Users, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: users.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// DebitCardsOrErr returns the DebitCards value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DebitCardStatusEdges) DebitCardsOrErr() (*DebitCards, error) {
	if e.DebitCards != nil {
		return e.DebitCards, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: debitcards.Label}
	}
	return nil, &NotLoadedError{edge: "debit_cards"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DebitCardStatus) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case debitcardstatus.FieldID, debitcardstatus.FieldCardID, debitcardstatus.FieldUserID:
			values[i] = new(sql.NullInt64)
		case debitcardstatus.FieldStatus:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DebitCardStatus fields.
func (dcs *DebitCardStatus) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case debitcardstatus.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dcs.ID = int(value.Int64)
		case debitcardstatus.FieldCardID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field card_id", values[i])
			} else if value.Valid {
				dcs.CardID = int(value.Int64)
			}
		case debitcardstatus.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				dcs.UserID = int(value.Int64)
			}
		case debitcardstatus.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				dcs.Status = value.String
			}
		default:
			dcs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DebitCardStatus.
// This includes values selected through modifiers, order, etc.
func (dcs *DebitCardStatus) Value(name string) (ent.Value, error) {
	return dcs.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the DebitCardStatus entity.
func (dcs *DebitCardStatus) QueryUsers() *UsersQuery {
	return NewDebitCardStatusClient(dcs.config).QueryUsers(dcs)
}

// QueryDebitCards queries the "debit_cards" edge of the DebitCardStatus entity.
func (dcs *DebitCardStatus) QueryDebitCards() *DebitCardsQuery {
	return NewDebitCardStatusClient(dcs.config).QueryDebitCards(dcs)
}

// Update returns a builder for updating this DebitCardStatus.
// Note that you need to call DebitCardStatus.Unwrap() before calling this method if this DebitCardStatus
// was returned from a transaction, and the transaction was committed or rolled back.
func (dcs *DebitCardStatus) Update() *DebitCardStatusUpdateOne {
	return NewDebitCardStatusClient(dcs.config).UpdateOne(dcs)
}

// Unwrap unwraps the DebitCardStatus entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dcs *DebitCardStatus) Unwrap() *DebitCardStatus {
	_tx, ok := dcs.config.driver.(*txDriver)
	if !ok {
		panic("ent: DebitCardStatus is not a transactional entity")
	}
	dcs.config.driver = _tx.drv
	return dcs
}

// String implements the fmt.Stringer.
func (dcs *DebitCardStatus) String() string {
	var builder strings.Builder
	builder.WriteString("DebitCardStatus(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dcs.ID))
	builder.WriteString("card_id=")
	builder.WriteString(fmt.Sprintf("%v", dcs.CardID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", dcs.UserID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(dcs.Status)
	builder.WriteByte(')')
	return builder.String()
}

// DebitCardStatusSlice is a parsable slice of DebitCardStatus.
type DebitCardStatusSlice []*DebitCardStatus
