// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/banners"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// BannersCreate is the builder for creating a Banners entity.
type BannersCreate struct {
	config
	mutation *BannersMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (bc *BannersCreate) SetUserID(i int) *BannersCreate {
	bc.mutation.SetUserID(i)
	return bc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bc *BannersCreate) SetNillableUserID(i *int) *BannersCreate {
	if i != nil {
		bc.SetUserID(*i)
	}
	return bc
}

// SetTitle sets the "title" field.
func (bc *BannersCreate) SetTitle(s string) *BannersCreate {
	bc.mutation.SetTitle(s)
	return bc
}

// SetDescription sets the "description" field.
func (bc *BannersCreate) SetDescription(s string) *BannersCreate {
	bc.mutation.SetDescription(s)
	return bc
}

// SetImage sets the "image" field.
func (bc *BannersCreate) SetImage(s string) *BannersCreate {
	bc.mutation.SetImage(s)
	return bc
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (bc *BannersCreate) SetUsersID(id int) *BannersCreate {
	bc.mutation.SetUsersID(id)
	return bc
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (bc *BannersCreate) SetNillableUsersID(id *int) *BannersCreate {
	if id != nil {
		bc = bc.SetUsersID(*id)
	}
	return bc
}

// SetUsers sets the "users" edge to the Users entity.
func (bc *BannersCreate) SetUsers(u *Users) *BannersCreate {
	return bc.SetUsersID(u.ID)
}

// Mutation returns the BannersMutation object of the builder.
func (bc *BannersCreate) Mutation() *BannersMutation {
	return bc.mutation
}

// Save creates the Banners in the database.
func (bc *BannersCreate) Save(ctx context.Context) (*Banners, error) {
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BannersCreate) SaveX(ctx context.Context) *Banners {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BannersCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BannersCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BannersCreate) check() error {
	if _, ok := bc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Banners.title"`)}
	}
	if _, ok := bc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Banners.description"`)}
	}
	if _, ok := bc.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "Banners.image"`)}
	}
	return nil
}

func (bc *BannersCreate) sqlSave(ctx context.Context) (*Banners, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BannersCreate) createSpec() (*Banners, *sqlgraph.CreateSpec) {
	var (
		_node = &Banners{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(banners.Table, sqlgraph.NewFieldSpec(banners.FieldID, field.TypeInt))
	)
	if value, ok := bc.mutation.Title(); ok {
		_spec.SetField(banners.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := bc.mutation.Description(); ok {
		_spec.SetField(banners.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := bc.mutation.Image(); ok {
		_spec.SetField(banners.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if nodes := bc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   banners.UsersTable,
			Columns: []string{banners.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BannersCreateBulk is the builder for creating many Banners entities in bulk.
type BannersCreateBulk struct {
	config
	err      error
	builders []*BannersCreate
}

// Save creates the Banners entities in the database.
func (bcb *BannersCreateBulk) Save(ctx context.Context) ([]*Banners, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Banners, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BannersMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BannersCreateBulk) SaveX(ctx context.Context) []*Banners {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BannersCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BannersCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
