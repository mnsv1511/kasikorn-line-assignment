// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountbalances"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountdetails"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accountflags"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/accounts"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/users"
)

// AccountsQuery is the builder for querying Accounts entities.
type AccountsQuery struct {
	config
	ctx                 *QueryContext
	order               []accounts.OrderOption
	inters              []Interceptor
	predicates          []predicate.Accounts
	withAccountBalances *AccountBalancesQuery
	withAccountDetails  *AccountDetailsQuery
	withAccountFlags    *AccountFlagsQuery
	withUsers           *UsersQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AccountsQuery builder.
func (aq *AccountsQuery) Where(ps ...predicate.Accounts) *AccountsQuery {
	aq.predicates = append(aq.predicates, ps...)
	return aq
}

// Limit the number of records to be returned by this query.
func (aq *AccountsQuery) Limit(limit int) *AccountsQuery {
	aq.ctx.Limit = &limit
	return aq
}

// Offset to start from.
func (aq *AccountsQuery) Offset(offset int) *AccountsQuery {
	aq.ctx.Offset = &offset
	return aq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aq *AccountsQuery) Unique(unique bool) *AccountsQuery {
	aq.ctx.Unique = &unique
	return aq
}

// Order specifies how the records should be ordered.
func (aq *AccountsQuery) Order(o ...accounts.OrderOption) *AccountsQuery {
	aq.order = append(aq.order, o...)
	return aq
}

// QueryAccountBalances chains the current query on the "account_balances" edge.
func (aq *AccountsQuery) QueryAccountBalances() *AccountBalancesQuery {
	query := (&AccountBalancesClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(accounts.Table, accounts.FieldID, selector),
			sqlgraph.To(accountbalances.Table, accountbalances.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, accounts.AccountBalancesTable, accounts.AccountBalancesColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAccountDetails chains the current query on the "account_details" edge.
func (aq *AccountsQuery) QueryAccountDetails() *AccountDetailsQuery {
	query := (&AccountDetailsClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(accounts.Table, accounts.FieldID, selector),
			sqlgraph.To(accountdetails.Table, accountdetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, accounts.AccountDetailsTable, accounts.AccountDetailsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAccountFlags chains the current query on the "account_flags" edge.
func (aq *AccountsQuery) QueryAccountFlags() *AccountFlagsQuery {
	query := (&AccountFlagsClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(accounts.Table, accounts.FieldID, selector),
			sqlgraph.To(accountflags.Table, accountflags.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, accounts.AccountFlagsTable, accounts.AccountFlagsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsers chains the current query on the "users" edge.
func (aq *AccountsQuery) QueryUsers() *UsersQuery {
	query := (&UsersClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(accounts.Table, accounts.FieldID, selector),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, accounts.UsersTable, accounts.UsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Accounts entity from the query.
// Returns a *NotFoundError when no Accounts was found.
func (aq *AccountsQuery) First(ctx context.Context) (*Accounts, error) {
	nodes, err := aq.Limit(1).All(setContextOp(ctx, aq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{accounts.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aq *AccountsQuery) FirstX(ctx context.Context) *Accounts {
	node, err := aq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Accounts ID from the query.
// Returns a *NotFoundError when no Accounts ID was found.
func (aq *AccountsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(1).IDs(setContextOp(ctx, aq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{accounts.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aq *AccountsQuery) FirstIDX(ctx context.Context) int {
	id, err := aq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Accounts entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Accounts entity is found.
// Returns a *NotFoundError when no Accounts entities are found.
func (aq *AccountsQuery) Only(ctx context.Context) (*Accounts, error) {
	nodes, err := aq.Limit(2).All(setContextOp(ctx, aq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{accounts.Label}
	default:
		return nil, &NotSingularError{accounts.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aq *AccountsQuery) OnlyX(ctx context.Context) *Accounts {
	node, err := aq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Accounts ID in the query.
// Returns a *NotSingularError when more than one Accounts ID is found.
// Returns a *NotFoundError when no entities are found.
func (aq *AccountsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(2).IDs(setContextOp(ctx, aq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{accounts.Label}
	default:
		err = &NotSingularError{accounts.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aq *AccountsQuery) OnlyIDX(ctx context.Context) int {
	id, err := aq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AccountsSlice.
func (aq *AccountsQuery) All(ctx context.Context) ([]*Accounts, error) {
	ctx = setContextOp(ctx, aq.ctx, ent.OpQueryAll)
	if err := aq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Accounts, *AccountsQuery]()
	return withInterceptors[[]*Accounts](ctx, aq, qr, aq.inters)
}

// AllX is like All, but panics if an error occurs.
func (aq *AccountsQuery) AllX(ctx context.Context) []*Accounts {
	nodes, err := aq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Accounts IDs.
func (aq *AccountsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if aq.ctx.Unique == nil && aq.path != nil {
		aq.Unique(true)
	}
	ctx = setContextOp(ctx, aq.ctx, ent.OpQueryIDs)
	if err = aq.Select(accounts.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aq *AccountsQuery) IDsX(ctx context.Context) []int {
	ids, err := aq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aq *AccountsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, aq.ctx, ent.OpQueryCount)
	if err := aq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, aq, querierCount[*AccountsQuery](), aq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (aq *AccountsQuery) CountX(ctx context.Context) int {
	count, err := aq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aq *AccountsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, aq.ctx, ent.OpQueryExist)
	switch _, err := aq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (aq *AccountsQuery) ExistX(ctx context.Context) bool {
	exist, err := aq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AccountsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aq *AccountsQuery) Clone() *AccountsQuery {
	if aq == nil {
		return nil
	}
	return &AccountsQuery{
		config:              aq.config,
		ctx:                 aq.ctx.Clone(),
		order:               append([]accounts.OrderOption{}, aq.order...),
		inters:              append([]Interceptor{}, aq.inters...),
		predicates:          append([]predicate.Accounts{}, aq.predicates...),
		withAccountBalances: aq.withAccountBalances.Clone(),
		withAccountDetails:  aq.withAccountDetails.Clone(),
		withAccountFlags:    aq.withAccountFlags.Clone(),
		withUsers:           aq.withUsers.Clone(),
		// clone intermediate query.
		sql:  aq.sql.Clone(),
		path: aq.path,
	}
}

// WithAccountBalances tells the query-builder to eager-load the nodes that are connected to
// the "account_balances" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AccountsQuery) WithAccountBalances(opts ...func(*AccountBalancesQuery)) *AccountsQuery {
	query := (&AccountBalancesClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withAccountBalances = query
	return aq
}

// WithAccountDetails tells the query-builder to eager-load the nodes that are connected to
// the "account_details" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AccountsQuery) WithAccountDetails(opts ...func(*AccountDetailsQuery)) *AccountsQuery {
	query := (&AccountDetailsClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withAccountDetails = query
	return aq
}

// WithAccountFlags tells the query-builder to eager-load the nodes that are connected to
// the "account_flags" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AccountsQuery) WithAccountFlags(opts ...func(*AccountFlagsQuery)) *AccountsQuery {
	query := (&AccountFlagsClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withAccountFlags = query
	return aq
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AccountsQuery) WithUsers(opts ...func(*UsersQuery)) *AccountsQuery {
	query := (&UsersClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withUsers = query
	return aq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID int `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Accounts.Query().
//		GroupBy(accounts.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (aq *AccountsQuery) GroupBy(field string, fields ...string) *AccountsGroupBy {
	aq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AccountsGroupBy{build: aq}
	grbuild.flds = &aq.ctx.Fields
	grbuild.label = accounts.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID int `json:"user_id,omitempty"`
//	}
//
//	client.Accounts.Query().
//		Select(accounts.FieldUserID).
//		Scan(ctx, &v)
func (aq *AccountsQuery) Select(fields ...string) *AccountsSelect {
	aq.ctx.Fields = append(aq.ctx.Fields, fields...)
	sbuild := &AccountsSelect{AccountsQuery: aq}
	sbuild.label = accounts.Label
	sbuild.flds, sbuild.scan = &aq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AccountsSelect configured with the given aggregations.
func (aq *AccountsQuery) Aggregate(fns ...AggregateFunc) *AccountsSelect {
	return aq.Select().Aggregate(fns...)
}

func (aq *AccountsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range aq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, aq); err != nil {
				return err
			}
		}
	}
	for _, f := range aq.ctx.Fields {
		if !accounts.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aq.path != nil {
		prev, err := aq.path(ctx)
		if err != nil {
			return err
		}
		aq.sql = prev
	}
	return nil
}

func (aq *AccountsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Accounts, error) {
	var (
		nodes       = []*Accounts{}
		_spec       = aq.querySpec()
		loadedTypes = [4]bool{
			aq.withAccountBalances != nil,
			aq.withAccountDetails != nil,
			aq.withAccountFlags != nil,
			aq.withUsers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Accounts).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Accounts{config: aq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, aq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := aq.withAccountBalances; query != nil {
		if err := aq.loadAccountBalances(ctx, query, nodes,
			func(n *Accounts) { n.Edges.AccountBalances = []*AccountBalances{} },
			func(n *Accounts, e *AccountBalances) { n.Edges.AccountBalances = append(n.Edges.AccountBalances, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withAccountDetails; query != nil {
		if err := aq.loadAccountDetails(ctx, query, nodes,
			func(n *Accounts) { n.Edges.AccountDetails = []*AccountDetails{} },
			func(n *Accounts, e *AccountDetails) { n.Edges.AccountDetails = append(n.Edges.AccountDetails, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withAccountFlags; query != nil {
		if err := aq.loadAccountFlags(ctx, query, nodes,
			func(n *Accounts) { n.Edges.AccountFlags = []*AccountFlags{} },
			func(n *Accounts, e *AccountFlags) { n.Edges.AccountFlags = append(n.Edges.AccountFlags, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withUsers; query != nil {
		if err := aq.loadUsers(ctx, query, nodes, nil,
			func(n *Accounts, e *Users) { n.Edges.Users = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (aq *AccountsQuery) loadAccountBalances(ctx context.Context, query *AccountBalancesQuery, nodes []*Accounts, init func(*Accounts), assign func(*Accounts, *AccountBalances)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Accounts)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(accountbalances.FieldAccountID)
	}
	query.Where(predicate.AccountBalances(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(accounts.AccountBalancesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AccountID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "account_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AccountsQuery) loadAccountDetails(ctx context.Context, query *AccountDetailsQuery, nodes []*Accounts, init func(*Accounts), assign func(*Accounts, *AccountDetails)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Accounts)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(accountdetails.FieldAccountID)
	}
	query.Where(predicate.AccountDetails(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(accounts.AccountDetailsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AccountID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "account_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AccountsQuery) loadAccountFlags(ctx context.Context, query *AccountFlagsQuery, nodes []*Accounts, init func(*Accounts), assign func(*Accounts, *AccountFlags)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Accounts)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(accountflags.FieldAccountID)
	}
	query.Where(predicate.AccountFlags(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(accounts.AccountFlagsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AccountID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "account_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AccountsQuery) loadUsers(ctx context.Context, query *UsersQuery, nodes []*Accounts, init func(*Accounts), assign func(*Accounts, *Users)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Accounts)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(users.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (aq *AccountsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aq.querySpec()
	_spec.Node.Columns = aq.ctx.Fields
	if len(aq.ctx.Fields) > 0 {
		_spec.Unique = aq.ctx.Unique != nil && *aq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, aq.driver, _spec)
}

func (aq *AccountsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(accounts.Table, accounts.Columns, sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt))
	_spec.From = aq.sql
	if unique := aq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if aq.path != nil {
		_spec.Unique = true
	}
	if fields := aq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accounts.FieldID)
		for i := range fields {
			if fields[i] != accounts.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if aq.withUsers != nil {
			_spec.Node.AddColumnOnce(accounts.FieldUserID)
		}
	}
	if ps := aq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aq *AccountsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aq.driver.Dialect())
	t1 := builder.Table(accounts.Table)
	columns := aq.ctx.Fields
	if len(columns) == 0 {
		columns = accounts.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aq.sql != nil {
		selector = aq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aq.ctx.Unique != nil && *aq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range aq.predicates {
		p(selector)
	}
	for _, p := range aq.order {
		p(selector)
	}
	if offset := aq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AccountsGroupBy is the group-by builder for Accounts entities.
type AccountsGroupBy struct {
	selector
	build *AccountsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (agb *AccountsGroupBy) Aggregate(fns ...AggregateFunc) *AccountsGroupBy {
	agb.fns = append(agb.fns, fns...)
	return agb
}

// Scan applies the selector query and scans the result into the given value.
func (agb *AccountsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, agb.build.ctx, ent.OpQueryGroupBy)
	if err := agb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AccountsQuery, *AccountsGroupBy](ctx, agb.build, agb, agb.build.inters, v)
}

func (agb *AccountsGroupBy) sqlScan(ctx context.Context, root *AccountsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(agb.fns))
	for _, fn := range agb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*agb.flds)+len(agb.fns))
		for _, f := range *agb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*agb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := agb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AccountsSelect is the builder for selecting fields of Accounts entities.
type AccountsSelect struct {
	*AccountsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (as *AccountsSelect) Aggregate(fns ...AggregateFunc) *AccountsSelect {
	as.fns = append(as.fns, fns...)
	return as
}

// Scan applies the selector query and scans the result into the given value.
func (as *AccountsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, as.ctx, ent.OpQuerySelect)
	if err := as.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AccountsQuery, *AccountsSelect](ctx, as.AccountsQuery, as, as.inters, v)
}

func (as *AccountsSelect) sqlScan(ctx context.Context, root *AccountsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(as.fns))
	for _, fn := range as.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*as.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := as.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
