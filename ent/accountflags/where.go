// Code generated by ent, DO NOT EDIT.

package accountflags

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mnsv1511/kasikorn-line-assignment/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldLTE(FieldID, id))
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v int) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldEQ(FieldAccountID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldEQ(FieldUserID, v))
}

// FlagType applies equality check predicate on the "flag_type" field. It's identical to FlagTypeEQ.
func FlagType(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldEQ(FieldFlagType, v))
}

// FlagValue applies equality check predicate on the "flag_value" field. It's identical to FlagValueEQ.
func FlagValue(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldEQ(FieldFlagValue, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldEQ(FieldUpdatedAt, v))
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v int) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldEQ(FieldAccountID, v))
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v int) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldNEQ(FieldAccountID, v))
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...int) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldIn(FieldAccountID, vs...))
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...int) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldNotIn(FieldAccountID, vs...))
}

// AccountIDIsNil applies the IsNil predicate on the "account_id" field.
func AccountIDIsNil() predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldIsNull(FieldAccountID))
}

// AccountIDNotNil applies the NotNil predicate on the "account_id" field.
func AccountIDNotNil() predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldNotNull(FieldAccountID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldNotNull(FieldUserID))
}

// FlagTypeEQ applies the EQ predicate on the "flag_type" field.
func FlagTypeEQ(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldEQ(FieldFlagType, v))
}

// FlagTypeNEQ applies the NEQ predicate on the "flag_type" field.
func FlagTypeNEQ(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldNEQ(FieldFlagType, v))
}

// FlagTypeIn applies the In predicate on the "flag_type" field.
func FlagTypeIn(vs ...string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldIn(FieldFlagType, vs...))
}

// FlagTypeNotIn applies the NotIn predicate on the "flag_type" field.
func FlagTypeNotIn(vs ...string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldNotIn(FieldFlagType, vs...))
}

// FlagTypeGT applies the GT predicate on the "flag_type" field.
func FlagTypeGT(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldGT(FieldFlagType, v))
}

// FlagTypeGTE applies the GTE predicate on the "flag_type" field.
func FlagTypeGTE(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldGTE(FieldFlagType, v))
}

// FlagTypeLT applies the LT predicate on the "flag_type" field.
func FlagTypeLT(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldLT(FieldFlagType, v))
}

// FlagTypeLTE applies the LTE predicate on the "flag_type" field.
func FlagTypeLTE(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldLTE(FieldFlagType, v))
}

// FlagTypeContains applies the Contains predicate on the "flag_type" field.
func FlagTypeContains(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldContains(FieldFlagType, v))
}

// FlagTypeHasPrefix applies the HasPrefix predicate on the "flag_type" field.
func FlagTypeHasPrefix(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldHasPrefix(FieldFlagType, v))
}

// FlagTypeHasSuffix applies the HasSuffix predicate on the "flag_type" field.
func FlagTypeHasSuffix(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldHasSuffix(FieldFlagType, v))
}

// FlagTypeEqualFold applies the EqualFold predicate on the "flag_type" field.
func FlagTypeEqualFold(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldEqualFold(FieldFlagType, v))
}

// FlagTypeContainsFold applies the ContainsFold predicate on the "flag_type" field.
func FlagTypeContainsFold(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldContainsFold(FieldFlagType, v))
}

// FlagValueEQ applies the EQ predicate on the "flag_value" field.
func FlagValueEQ(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldEQ(FieldFlagValue, v))
}

// FlagValueNEQ applies the NEQ predicate on the "flag_value" field.
func FlagValueNEQ(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldNEQ(FieldFlagValue, v))
}

// FlagValueIn applies the In predicate on the "flag_value" field.
func FlagValueIn(vs ...string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldIn(FieldFlagValue, vs...))
}

// FlagValueNotIn applies the NotIn predicate on the "flag_value" field.
func FlagValueNotIn(vs ...string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldNotIn(FieldFlagValue, vs...))
}

// FlagValueGT applies the GT predicate on the "flag_value" field.
func FlagValueGT(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldGT(FieldFlagValue, v))
}

// FlagValueGTE applies the GTE predicate on the "flag_value" field.
func FlagValueGTE(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldGTE(FieldFlagValue, v))
}

// FlagValueLT applies the LT predicate on the "flag_value" field.
func FlagValueLT(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldLT(FieldFlagValue, v))
}

// FlagValueLTE applies the LTE predicate on the "flag_value" field.
func FlagValueLTE(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldLTE(FieldFlagValue, v))
}

// FlagValueContains applies the Contains predicate on the "flag_value" field.
func FlagValueContains(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldContains(FieldFlagValue, v))
}

// FlagValueHasPrefix applies the HasPrefix predicate on the "flag_value" field.
func FlagValueHasPrefix(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldHasPrefix(FieldFlagValue, v))
}

// FlagValueHasSuffix applies the HasSuffix predicate on the "flag_value" field.
func FlagValueHasSuffix(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldHasSuffix(FieldFlagValue, v))
}

// FlagValueEqualFold applies the EqualFold predicate on the "flag_value" field.
func FlagValueEqualFold(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldEqualFold(FieldFlagValue, v))
}

// FlagValueContainsFold applies the ContainsFold predicate on the "flag_value" field.
func FlagValueContainsFold(v string) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldContainsFold(FieldFlagValue, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AccountFlags {
	return predicate.AccountFlags(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.AccountFlags {
	return predicate.AccountFlags(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.Users) predicate.AccountFlags {
	return predicate.AccountFlags(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAccounts applies the HasEdge predicate on the "accounts" edge.
func HasAccounts() predicate.AccountFlags {
	return predicate.AccountFlags(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AccountsTable, AccountsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccountsWith applies the HasEdge predicate on the "accounts" edge with a given conditions (other predicates).
func HasAccountsWith(preds ...predicate.Accounts) predicate.AccountFlags {
	return predicate.AccountFlags(func(s *sql.Selector) {
		step := newAccountsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AccountFlags) predicate.AccountFlags {
	return predicate.AccountFlags(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AccountFlags) predicate.AccountFlags {
	return predicate.AccountFlags(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AccountFlags) predicate.AccountFlags {
	return predicate.AccountFlags(sql.NotPredicates(p))
}
